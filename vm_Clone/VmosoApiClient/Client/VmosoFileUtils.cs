/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using VmosoApiClient.Model;
using VmosoApiClient.Api;

namespace VmosoApiClient.Client
{
    public static class VmosoFileUtils
    {
        static public Stream downloadIcon(VmosoSession session, String iconKey, String userKey)
        {
            String url = session.Host + "/dl/" + Uri.EscapeUriString(iconKey) + "." + userKey + "/temp";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.UserAgent = session.GetApiClient().Configuration.UserAgent;
            request.Headers.Add("X-CV-Authorization",session.GetAuthorizationHeader());

            WebResponse resp = null;
            try
            {
                resp = request.GetResponse();
                Stream respStream = resp.GetResponseStream();

                byte[] buffer = new byte[16 * 1024];
                MemoryStream ms = new MemoryStream();
                int read;
                while ((read = respStream.Read(buffer, 0, buffer.Length)) > 0)
                {
                    ms.Write(buffer, 0, read);
                }
                respStream.Close();
                return ms;
            } catch(Exception)
            {
                return null;
            }
        }

        static public Stream downloadFile(VmosoSession session, String fileKey, String fileName)
        {
            String url = session.Host + "/dl/" + fileKey + "/" + Uri.EscapeUriString(fileName);
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.UserAgent = session.GetApiClient().Configuration.UserAgent;
            request.Headers.Add("X-CV-Authorization", session.GetAuthorizationHeader());

            WebResponse resp = request.GetResponse();
            Stream respStream = resp.GetResponseStream();

            byte[] buffer = new byte[16 * 1024];
            MemoryStream ms = new MemoryStream();
            int read;
            while ((read = respStream.Read(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            respStream.Close();
            return ms;
        }

        static public Model.FileRecord uploadFile(VmosoSession session, String filePath, String title, String description, bool dominantActivity)
        {
            try { 

                String url = session.Host + "/up/file";
                String userAgent = session.GetApiClient().Configuration.UserAgent;

                WebClient client = new WebClient();
                client.Headers.Add("X-CV-Authorization", session.GetAuthorizationHeader());
                client.Headers.Add("User-Agent", userAgent);

                byte[] response = client.UploadFile(url, filePath);
                var jsonString = System.Text.Encoding.Default.GetString(response);
                dynamic dynObj = JsonConvert.DeserializeObject(jsonString);
                var file = dynObj[0];

                String fileName = file.name;
                String fileDownloadId = file.fileDownloadId;
                String mimeType = file.mimeType;
                int fileSize = file.filesize;

                FileRecord fr = new FileRecord();
                fr.Type = "file";
                fr.Name = title;
                fr.Description = description;
                fr.Filename = "1";
                fr.Originalfilename = fileName;
                fr.SiteSelected = "1";
                fr.FilestoreDirRoot = "1";
                fr.FilestoreFilestore = fileDownloadId;
                fr.Mimetype = mimeType;
                fr.Filesize = fileSize;
                fr.Downloadable = "1";
                fr.Simpletype = "1";
                fr.DvaultItemFlag = "1";
                fr.DvaultItemStatus = "1";
                fr.BvrevVersion = 1;
                fr.BvrevLastUpdater = 1;
                fr.Trashed = "0";

                FileApi fileApi = new FileApi(session.GetApiClient());

                CreateFileInput createFileInput = new CreateFileInput(fr,dominantActivity,null);

                CreateFileResult createFileResult = fileApi.CreateFile(createFileInput);
                if (createFileResult.Hdr.Rc == 0)
                {
                    return createFileResult.File;
                }
                else
                {
                    throw new Exception("Error uploading file. Rc=" + createFileResult.Hdr.Rc);
                }
            } catch(Exception ex)
            {
                throw new Exception("Error uploading file", ex);
            }
        }

        static public Model.FileRecord uploadNewVersion(VmosoSession session, String fileKey, String filePath)
        {
            try
            {
                FileApi fileApi = new FileApi(session.GetApiClient());
                ViewFileResult viewFileResult = fileApi.ViewFile(fileKey);
                if (viewFileResult.Hdr.Rc == 0)
                {
                    FileRecord fileRecord = viewFileResult.File;

                    String url = session.Host + "/up/file";
                    String userAgent = session.GetApiClient().Configuration.UserAgent;

                    WebClient client = new WebClient();
                    client.Headers.Add("X-CV-Authorization", session.GetAuthorizationHeader());
                    client.Headers.Add("User-Agent", userAgent);

                    byte[] response = client.UploadFile(url, filePath);
                    var jsonString = System.Text.Encoding.Default.GetString(response);
                    dynamic dynObj = JsonConvert.DeserializeObject(jsonString);
                    var file = dynObj[0];

                    String fileName = file.name;
                    String fileDownloadId = file.fileDownloadId;
                    String mimeType = file.mimeType;
                    int fileSize = file.filesize;

                    fileRecord.FilestoreFilestore = fileDownloadId;
                    fileRecord.Filesize = fileSize;

                    UpdateFileInput updateFileInput = new UpdateFileInput(fileRecord, null);
                    UpdateFileResult updateFileResult = fileApi.UpdateFile(fileKey, updateFileInput);
                    if (updateFileResult.Hdr.Rc == 0)
                    {
                        return updateFileResult.Updated;
                    }
                    else
                    {
                        throw new Exception("Error updating file. Rc=" + viewFileResult.Hdr.Rc);
                    }
                }
                else
                {
                    throw new Exception("Error getting file. Rc=" + viewFileResult.Hdr.Rc);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error uploading new version", ex);
            }

        }

    }


    public static class FormUpload
    {
        private static readonly Encoding encoding = Encoding.UTF8;
        public static HttpWebResponse MultipartFormDataPost(VmosoSession session, string postUrl, string userAgent, Dictionary<string, object> postParameters)
        {
            string formDataBoundary = String.Format("----------{0:N}", Guid.NewGuid());
            string contentType = "multipart/form-data; boundary=" + formDataBoundary;

            byte[] formData = GetMultipartFormData(postParameters, formDataBoundary);

            return PostForm(session, postUrl, userAgent, contentType, formData);
        }
        private static HttpWebResponse PostForm(VmosoSession session, string postUrl, string userAgent, string contentType, byte[] formData)
        {
            HttpWebRequest request = WebRequest.Create(postUrl) as HttpWebRequest;

            if (request == null)
            {
                throw new NullReferenceException("request is not a http request");
            }

            // Set up the request properties.
            request.Method = "POST";
            request.ContentType = contentType;
            request.UserAgent = userAgent;
            request.CookieContainer = new CookieContainer();
            request.ContentLength = formData.Length;

            request.Headers.Add("X-CV-Authorization", session.GetAuthorizationHeader());

            // Send the form data to the request.
            using (Stream requestStream = request.GetRequestStream())
            {
                requestStream.Write(formData, 0, formData.Length);
                requestStream.Close();
            }

            return request.GetResponse() as HttpWebResponse;
        }

        private static byte[] GetMultipartFormData(Dictionary<string, object> postParameters, string boundary)
        {
            Stream formDataStream = new System.IO.MemoryStream();
            bool needsCLRF = false;

            foreach (var param in postParameters)
            {
                // Thanks to feedback from commenters, add a CRLF to allow multiple parameters to be added.
                // Skip it on the first parameter, add it to subsequent parameters.
                if (needsCLRF)
                    formDataStream.Write(encoding.GetBytes("\r\n"), 0, encoding.GetByteCount("\r\n"));

                needsCLRF = true;

                if (param.Value is FileParameter)
                {
                    FileParameter fileToUpload = (FileParameter)param.Value;

                    // Add just the first part of this param, since we will write the file data directly to the Stream
                    string header = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n",
                        boundary,
                        param.Key,
                        fileToUpload.FileName ?? param.Key,
                        fileToUpload.ContentType ?? "application/octet-stream");

                    formDataStream.Write(encoding.GetBytes(header), 0, encoding.GetByteCount(header));

                    // Write the file data directly to the Stream, rather than serializing it to a string.
                    formDataStream.Write(fileToUpload.File, 0, fileToUpload.File.Length);
                }
                else
                {
                    string postData = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}",
                        boundary,
                        param.Key,
                        param.Value);
                    formDataStream.Write(encoding.GetBytes(postData), 0, encoding.GetByteCount(postData));
                }
            }

            // Add the end of the request.  Start with a newline
            string footer = "\r\n--" + boundary + "--\r\n";
            formDataStream.Write(encoding.GetBytes(footer), 0, encoding.GetByteCount(footer));

            // Dump the Stream into a byte[]
            formDataStream.Position = 0;
            byte[] formData = new byte[formDataStream.Length];
            formDataStream.Read(formData, 0, formData.Length);
            formDataStream.Close();

            return formData;
        }

        public class FileParameter
        {
            public byte[] File { get; set; }
            public string FileName { get; set; }
            public string ContentType { get; set; }
            public FileParameter(byte[] file) : this(file, null) { }
            public FileParameter(byte[] file, string filename) : this(file, filename, null) { }
            public FileParameter(byte[] file, string filename, string contenttype)
            {
                File = file;
                FileName = filename;
                ContentType = contenttype;
            }
        }
    }
}
