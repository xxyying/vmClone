/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// WorkflowRoleMetaRecord
    /// </summary>
    [DataContract]
    public partial class WorkflowRoleMetaRecord :  IEquatable<WorkflowRoleMetaRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowRoleMetaRecord" /> class.
        /// </summary>
        /// <param name="Min">Minimum number of participants in this role..</param>
        /// <param name="Max">Maximum number of participants in this role..</param>
        /// <param name="DisplayName">Role display name..</param>
        /// <param name="Name">Role name..</param>
        /// <param name="Flags">Special role flags, e.g. {@link FLAG_LAUNCHER}..</param>
        /// <param name="Conflicts">Names of roles that are in conflict with this one. When two roles are in conflict, a user cannot take on both..</param>
        public WorkflowRoleMetaRecord(int? Min = null, int? Max = null, string DisplayName = null, string Name = null, List<string> Flags = null, List<string> Conflicts = null)
        {
            this.Min = Min;
            this.Max = Max;
            this.DisplayName = DisplayName;
            this.Name = Name;
            this.Flags = Flags;
            this.Conflicts = Conflicts;
        }
        
        /// <summary>
        /// Minimum number of participants in this role.
        /// </summary>
        /// <value>Minimum number of participants in this role.</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public int? Min { get; set; }
        /// <summary>
        /// Maximum number of participants in this role.
        /// </summary>
        /// <value>Maximum number of participants in this role.</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public int? Max { get; set; }
        /// <summary>
        /// Role display name.
        /// </summary>
        /// <value>Role display name.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Role name.
        /// </summary>
        /// <value>Role name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Special role flags, e.g. {@link FLAG_LAUNCHER}.
        /// </summary>
        /// <value>Special role flags, e.g. {@link FLAG_LAUNCHER}.</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }
        /// <summary>
        /// Names of roles that are in conflict with this one. When two roles are in conflict, a user cannot take on both.
        /// </summary>
        /// <value>Names of roles that are in conflict with this one. When two roles are in conflict, a user cannot take on both.</value>
        [DataMember(Name="conflicts", EmitDefaultValue=false)]
        public List<string> Conflicts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowRoleMetaRecord {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Conflicts: ").Append(Conflicts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowRoleMetaRecord);
        }

        /// <summary>
        /// Returns true if WorkflowRoleMetaRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowRoleMetaRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowRoleMetaRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Min == other.Min ||
                    this.Min != null &&
                    this.Min.Equals(other.Min)
                ) && 
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.Equals(other.Max)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Flags == other.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(other.Flags)
                ) && 
                (
                    this.Conflicts == other.Conflicts ||
                    this.Conflicts != null &&
                    this.Conflicts.SequenceEqual(other.Conflicts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Min != null)
                    hash = hash * 59 + this.Min.GetHashCode();
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Flags != null)
                    hash = hash * 59 + this.Flags.GetHashCode();
                if (this.Conflicts != null)
                    hash = hash * 59 + this.Conflicts.GetHashCode();
                return hash;
            }
        }
    }

}
