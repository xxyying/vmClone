/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ReferenceIdRecord
    /// </summary>
    [DataContract]
    public partial class ReferenceIdRecord :  IEquatable<ReferenceIdRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceIdRecord" /> class.
        /// </summary>
        /// <param name="ListKey">Comment list ID.</param>
        /// <param name="Pid">Comment Pid.</param>
        /// <param name="Id">Record ID.</param>
        /// <param name="Cid">Comment Cid.</param>
        public ReferenceIdRecord(string ListKey = null, int? Pid = null, string Id = null, int? Cid = null)
        {
            this.ListKey = ListKey;
            this.Pid = Pid;
            this.Id = Id;
            this.Cid = Cid;
        }
        
        /// <summary>
        /// Comment list ID
        /// </summary>
        /// <value>Comment list ID</value>
        [DataMember(Name="listKey", EmitDefaultValue=false)]
        public string ListKey { get; set; }
        /// <summary>
        /// Comment Pid
        /// </summary>
        /// <value>Comment Pid</value>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public int? Pid { get; set; }
        /// <summary>
        /// Record ID
        /// </summary>
        /// <value>Record ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Comment Cid
        /// </summary>
        /// <value>Comment Cid</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public int? Cid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceIdRecord {\n");
            sb.Append("  ListKey: ").Append(ListKey).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReferenceIdRecord);
        }

        /// <summary>
        /// Returns true if ReferenceIdRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ReferenceIdRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceIdRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ListKey == other.ListKey ||
                    this.ListKey != null &&
                    this.ListKey.Equals(other.ListKey)
                ) && 
                (
                    this.Pid == other.Pid ||
                    this.Pid != null &&
                    this.Pid.Equals(other.Pid)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Cid == other.Cid ||
                    this.Cid != null &&
                    this.Cid.Equals(other.Cid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ListKey != null)
                    hash = hash * 59 + this.ListKey.GetHashCode();
                if (this.Pid != null)
                    hash = hash * 59 + this.Pid.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Cid != null)
                    hash = hash * 59 + this.Cid.GetHashCode();
                return hash;
            }
        }
    }

}
