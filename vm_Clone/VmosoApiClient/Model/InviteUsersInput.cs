/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// InviteUsersInput
    /// </summary>
    [DataContract]
    public partial class InviteUsersInput :  IEquatable<InviteUsersInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteUsersInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteUsersInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteUsersInput" /> class.
        /// </summary>
        /// <param name="InvitationType"> (required).</param>
        /// <param name="GroupKeys">.</param>
        /// <param name="InvitationMsg"> (required).</param>
        /// <param name="ContactKeys">.</param>
        public InviteUsersInput(string InvitationType = null, List<string> GroupKeys = null, string InvitationMsg = null, List<string> ContactKeys = null)
        {
            // to ensure "InvitationType" is required (not null)
            if (InvitationType == null)
            {
                throw new InvalidDataException("InvitationType is a required property for InviteUsersInput and cannot be null");
            }
            else
            {
                this.InvitationType = InvitationType;
            }
            // to ensure "InvitationMsg" is required (not null)
            if (InvitationMsg == null)
            {
                throw new InvalidDataException("InvitationMsg is a required property for InviteUsersInput and cannot be null");
            }
            else
            {
                this.InvitationMsg = InvitationMsg;
            }
            this.GroupKeys = GroupKeys;
            this.ContactKeys = ContactKeys;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="invitationType", EmitDefaultValue=false)]
        public string InvitationType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="groupKeys", EmitDefaultValue=false)]
        public List<string> GroupKeys { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="invitationMsg", EmitDefaultValue=false)]
        public string InvitationMsg { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="contactKeys", EmitDefaultValue=false)]
        public List<string> ContactKeys { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteUsersInput {\n");
            sb.Append("  InvitationType: ").Append(InvitationType).Append("\n");
            sb.Append("  GroupKeys: ").Append(GroupKeys).Append("\n");
            sb.Append("  InvitationMsg: ").Append(InvitationMsg).Append("\n");
            sb.Append("  ContactKeys: ").Append(ContactKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InviteUsersInput);
        }

        /// <summary>
        /// Returns true if InviteUsersInput instances are equal
        /// </summary>
        /// <param name="other">Instance of InviteUsersInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteUsersInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InvitationType == other.InvitationType ||
                    this.InvitationType != null &&
                    this.InvitationType.Equals(other.InvitationType)
                ) && 
                (
                    this.GroupKeys == other.GroupKeys ||
                    this.GroupKeys != null &&
                    this.GroupKeys.SequenceEqual(other.GroupKeys)
                ) && 
                (
                    this.InvitationMsg == other.InvitationMsg ||
                    this.InvitationMsg != null &&
                    this.InvitationMsg.Equals(other.InvitationMsg)
                ) && 
                (
                    this.ContactKeys == other.ContactKeys ||
                    this.ContactKeys != null &&
                    this.ContactKeys.SequenceEqual(other.ContactKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InvitationType != null)
                    hash = hash * 59 + this.InvitationType.GetHashCode();
                if (this.GroupKeys != null)
                    hash = hash * 59 + this.GroupKeys.GetHashCode();
                if (this.InvitationMsg != null)
                    hash = hash * 59 + this.InvitationMsg.GetHashCode();
                if (this.ContactKeys != null)
                    hash = hash * 59 + this.ContactKeys.GetHashCode();
                return hash;
            }
        }
    }

}
