/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// AnalyticActivityRecord
    /// </summary>
    [DataContract]
    public partial class AnalyticActivityRecord :  IEquatable<AnalyticActivityRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticActivityRecord" /> class.
        /// </summary>
        /// <param name="TaskDone">Number of done tasks.</param>
        /// <param name="FileDownload">Number of files downloaded.</param>
        /// <param name="MyFile">Number of files created.</param>
        /// <param name="TaskNew">Number of new tasks.</param>
        /// <param name="TaskOwner">Number of task user has created.</param>
        /// <param name="FileTotal">Number of my file total.</param>
        /// <param name="TaskDueToday">Number of due today tasks.</param>
        /// <param name="FileEdit">Number of file edited.</param>
        /// <param name="TaskComments">Number of task comments.</param>
        /// <param name="TaskAllCompleted">Number of all completed tasks.</param>
        /// <param name="FileRevised">Number of files revised.</param>
        /// <param name="TaskSummary">Number of task summary.</param>
        /// <param name="ShareFile">Number of files shared.</param>
        /// <param name="FileCreated">Number of files created.</param>
        /// <param name="TaskUpdated">Number of updated tasks.</param>
        /// <param name="FilePreview">Number of files previewed.</param>
        /// <param name="TaskCc">Number of task user is in Cc.</param>
        /// <param name="TaskProgression">Number of task progressions.</param>
        /// <param name="TaskPast">Number of past tasks.</param>
        /// <param name="TaskTo">Number of task user is in To.</param>
        /// <param name="TaskParticipation">Task Participation by Me count.</param>
        /// <param name="TaskAccesses">Number of task access.</param>
        /// <param name="ContentSummary">Number of content total count.</param>
        public AnalyticActivityRecord(int? TaskDone = null, int? FileDownload = null, int? MyFile = null, int? TaskNew = null, int? TaskOwner = null, int? FileTotal = null, int? TaskDueToday = null, int? FileEdit = null, int? TaskComments = null, int? TaskAllCompleted = null, int? FileRevised = null, int? TaskSummary = null, int? ShareFile = null, int? FileCreated = null, int? TaskUpdated = null, int? FilePreview = null, int? TaskCc = null, int? TaskProgression = null, int? TaskPast = null, int? TaskTo = null, int? TaskParticipation = null, int? TaskAccesses = null, int? ContentSummary = null)
        {
            this.TaskDone = TaskDone;
            this.FileDownload = FileDownload;
            this.MyFile = MyFile;
            this.TaskNew = TaskNew;
            this.TaskOwner = TaskOwner;
            this.FileTotal = FileTotal;
            this.TaskDueToday = TaskDueToday;
            this.FileEdit = FileEdit;
            this.TaskComments = TaskComments;
            this.TaskAllCompleted = TaskAllCompleted;
            this.FileRevised = FileRevised;
            this.TaskSummary = TaskSummary;
            this.ShareFile = ShareFile;
            this.FileCreated = FileCreated;
            this.TaskUpdated = TaskUpdated;
            this.FilePreview = FilePreview;
            this.TaskCc = TaskCc;
            this.TaskProgression = TaskProgression;
            this.TaskPast = TaskPast;
            this.TaskTo = TaskTo;
            this.TaskParticipation = TaskParticipation;
            this.TaskAccesses = TaskAccesses;
            this.ContentSummary = ContentSummary;
        }
        
        /// <summary>
        /// Number of done tasks
        /// </summary>
        /// <value>Number of done tasks</value>
        [DataMember(Name="taskDone", EmitDefaultValue=false)]
        public int? TaskDone { get; set; }
        /// <summary>
        /// Number of files downloaded
        /// </summary>
        /// <value>Number of files downloaded</value>
        [DataMember(Name="fileDownload", EmitDefaultValue=false)]
        public int? FileDownload { get; set; }
        /// <summary>
        /// Number of files created
        /// </summary>
        /// <value>Number of files created</value>
        [DataMember(Name="myFile", EmitDefaultValue=false)]
        public int? MyFile { get; set; }
        /// <summary>
        /// Number of new tasks
        /// </summary>
        /// <value>Number of new tasks</value>
        [DataMember(Name="taskNew", EmitDefaultValue=false)]
        public int? TaskNew { get; set; }
        /// <summary>
        /// Number of task user has created
        /// </summary>
        /// <value>Number of task user has created</value>
        [DataMember(Name="taskOwner", EmitDefaultValue=false)]
        public int? TaskOwner { get; set; }
        /// <summary>
        /// Number of my file total
        /// </summary>
        /// <value>Number of my file total</value>
        [DataMember(Name="fileTotal", EmitDefaultValue=false)]
        public int? FileTotal { get; set; }
        /// <summary>
        /// Number of due today tasks
        /// </summary>
        /// <value>Number of due today tasks</value>
        [DataMember(Name="taskDueToday", EmitDefaultValue=false)]
        public int? TaskDueToday { get; set; }
        /// <summary>
        /// Number of file edited
        /// </summary>
        /// <value>Number of file edited</value>
        [DataMember(Name="fileEdit", EmitDefaultValue=false)]
        public int? FileEdit { get; set; }
        /// <summary>
        /// Number of task comments
        /// </summary>
        /// <value>Number of task comments</value>
        [DataMember(Name="taskComments", EmitDefaultValue=false)]
        public int? TaskComments { get; set; }
        /// <summary>
        /// Number of all completed tasks
        /// </summary>
        /// <value>Number of all completed tasks</value>
        [DataMember(Name="taskAllCompleted", EmitDefaultValue=false)]
        public int? TaskAllCompleted { get; set; }
        /// <summary>
        /// Number of files revised
        /// </summary>
        /// <value>Number of files revised</value>
        [DataMember(Name="fileRevised", EmitDefaultValue=false)]
        public int? FileRevised { get; set; }
        /// <summary>
        /// Number of task summary
        /// </summary>
        /// <value>Number of task summary</value>
        [DataMember(Name="taskSummary", EmitDefaultValue=false)]
        public int? TaskSummary { get; set; }
        /// <summary>
        /// Number of files shared
        /// </summary>
        /// <value>Number of files shared</value>
        [DataMember(Name="shareFile", EmitDefaultValue=false)]
        public int? ShareFile { get; set; }
        /// <summary>
        /// Number of files created
        /// </summary>
        /// <value>Number of files created</value>
        [DataMember(Name="fileCreated", EmitDefaultValue=false)]
        public int? FileCreated { get; set; }
        /// <summary>
        /// Number of updated tasks
        /// </summary>
        /// <value>Number of updated tasks</value>
        [DataMember(Name="taskUpdated", EmitDefaultValue=false)]
        public int? TaskUpdated { get; set; }
        /// <summary>
        /// Number of files previewed
        /// </summary>
        /// <value>Number of files previewed</value>
        [DataMember(Name="filePreview", EmitDefaultValue=false)]
        public int? FilePreview { get; set; }
        /// <summary>
        /// Number of task user is in Cc
        /// </summary>
        /// <value>Number of task user is in Cc</value>
        [DataMember(Name="taskCc", EmitDefaultValue=false)]
        public int? TaskCc { get; set; }
        /// <summary>
        /// Number of task progressions
        /// </summary>
        /// <value>Number of task progressions</value>
        [DataMember(Name="taskProgression", EmitDefaultValue=false)]
        public int? TaskProgression { get; set; }
        /// <summary>
        /// Number of past tasks
        /// </summary>
        /// <value>Number of past tasks</value>
        [DataMember(Name="taskPast", EmitDefaultValue=false)]
        public int? TaskPast { get; set; }
        /// <summary>
        /// Number of task user is in To
        /// </summary>
        /// <value>Number of task user is in To</value>
        [DataMember(Name="taskTo", EmitDefaultValue=false)]
        public int? TaskTo { get; set; }
        /// <summary>
        /// Task Participation by Me count
        /// </summary>
        /// <value>Task Participation by Me count</value>
        [DataMember(Name="taskParticipation", EmitDefaultValue=false)]
        public int? TaskParticipation { get; set; }
        /// <summary>
        /// Number of task access
        /// </summary>
        /// <value>Number of task access</value>
        [DataMember(Name="taskAccesses", EmitDefaultValue=false)]
        public int? TaskAccesses { get; set; }
        /// <summary>
        /// Number of content total count
        /// </summary>
        /// <value>Number of content total count</value>
        [DataMember(Name="contentSummary", EmitDefaultValue=false)]
        public int? ContentSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticActivityRecord {\n");
            sb.Append("  TaskDone: ").Append(TaskDone).Append("\n");
            sb.Append("  FileDownload: ").Append(FileDownload).Append("\n");
            sb.Append("  MyFile: ").Append(MyFile).Append("\n");
            sb.Append("  TaskNew: ").Append(TaskNew).Append("\n");
            sb.Append("  TaskOwner: ").Append(TaskOwner).Append("\n");
            sb.Append("  FileTotal: ").Append(FileTotal).Append("\n");
            sb.Append("  TaskDueToday: ").Append(TaskDueToday).Append("\n");
            sb.Append("  FileEdit: ").Append(FileEdit).Append("\n");
            sb.Append("  TaskComments: ").Append(TaskComments).Append("\n");
            sb.Append("  TaskAllCompleted: ").Append(TaskAllCompleted).Append("\n");
            sb.Append("  FileRevised: ").Append(FileRevised).Append("\n");
            sb.Append("  TaskSummary: ").Append(TaskSummary).Append("\n");
            sb.Append("  ShareFile: ").Append(ShareFile).Append("\n");
            sb.Append("  FileCreated: ").Append(FileCreated).Append("\n");
            sb.Append("  TaskUpdated: ").Append(TaskUpdated).Append("\n");
            sb.Append("  FilePreview: ").Append(FilePreview).Append("\n");
            sb.Append("  TaskCc: ").Append(TaskCc).Append("\n");
            sb.Append("  TaskProgression: ").Append(TaskProgression).Append("\n");
            sb.Append("  TaskPast: ").Append(TaskPast).Append("\n");
            sb.Append("  TaskTo: ").Append(TaskTo).Append("\n");
            sb.Append("  TaskParticipation: ").Append(TaskParticipation).Append("\n");
            sb.Append("  TaskAccesses: ").Append(TaskAccesses).Append("\n");
            sb.Append("  ContentSummary: ").Append(ContentSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AnalyticActivityRecord);
        }

        /// <summary>
        /// Returns true if AnalyticActivityRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalyticActivityRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticActivityRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaskDone == other.TaskDone ||
                    this.TaskDone != null &&
                    this.TaskDone.Equals(other.TaskDone)
                ) && 
                (
                    this.FileDownload == other.FileDownload ||
                    this.FileDownload != null &&
                    this.FileDownload.Equals(other.FileDownload)
                ) && 
                (
                    this.MyFile == other.MyFile ||
                    this.MyFile != null &&
                    this.MyFile.Equals(other.MyFile)
                ) && 
                (
                    this.TaskNew == other.TaskNew ||
                    this.TaskNew != null &&
                    this.TaskNew.Equals(other.TaskNew)
                ) && 
                (
                    this.TaskOwner == other.TaskOwner ||
                    this.TaskOwner != null &&
                    this.TaskOwner.Equals(other.TaskOwner)
                ) && 
                (
                    this.FileTotal == other.FileTotal ||
                    this.FileTotal != null &&
                    this.FileTotal.Equals(other.FileTotal)
                ) && 
                (
                    this.TaskDueToday == other.TaskDueToday ||
                    this.TaskDueToday != null &&
                    this.TaskDueToday.Equals(other.TaskDueToday)
                ) && 
                (
                    this.FileEdit == other.FileEdit ||
                    this.FileEdit != null &&
                    this.FileEdit.Equals(other.FileEdit)
                ) && 
                (
                    this.TaskComments == other.TaskComments ||
                    this.TaskComments != null &&
                    this.TaskComments.Equals(other.TaskComments)
                ) && 
                (
                    this.TaskAllCompleted == other.TaskAllCompleted ||
                    this.TaskAllCompleted != null &&
                    this.TaskAllCompleted.Equals(other.TaskAllCompleted)
                ) && 
                (
                    this.FileRevised == other.FileRevised ||
                    this.FileRevised != null &&
                    this.FileRevised.Equals(other.FileRevised)
                ) && 
                (
                    this.TaskSummary == other.TaskSummary ||
                    this.TaskSummary != null &&
                    this.TaskSummary.Equals(other.TaskSummary)
                ) && 
                (
                    this.ShareFile == other.ShareFile ||
                    this.ShareFile != null &&
                    this.ShareFile.Equals(other.ShareFile)
                ) && 
                (
                    this.FileCreated == other.FileCreated ||
                    this.FileCreated != null &&
                    this.FileCreated.Equals(other.FileCreated)
                ) && 
                (
                    this.TaskUpdated == other.TaskUpdated ||
                    this.TaskUpdated != null &&
                    this.TaskUpdated.Equals(other.TaskUpdated)
                ) && 
                (
                    this.FilePreview == other.FilePreview ||
                    this.FilePreview != null &&
                    this.FilePreview.Equals(other.FilePreview)
                ) && 
                (
                    this.TaskCc == other.TaskCc ||
                    this.TaskCc != null &&
                    this.TaskCc.Equals(other.TaskCc)
                ) && 
                (
                    this.TaskProgression == other.TaskProgression ||
                    this.TaskProgression != null &&
                    this.TaskProgression.Equals(other.TaskProgression)
                ) && 
                (
                    this.TaskPast == other.TaskPast ||
                    this.TaskPast != null &&
                    this.TaskPast.Equals(other.TaskPast)
                ) && 
                (
                    this.TaskTo == other.TaskTo ||
                    this.TaskTo != null &&
                    this.TaskTo.Equals(other.TaskTo)
                ) && 
                (
                    this.TaskParticipation == other.TaskParticipation ||
                    this.TaskParticipation != null &&
                    this.TaskParticipation.Equals(other.TaskParticipation)
                ) && 
                (
                    this.TaskAccesses == other.TaskAccesses ||
                    this.TaskAccesses != null &&
                    this.TaskAccesses.Equals(other.TaskAccesses)
                ) && 
                (
                    this.ContentSummary == other.ContentSummary ||
                    this.ContentSummary != null &&
                    this.ContentSummary.Equals(other.ContentSummary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaskDone != null)
                    hash = hash * 59 + this.TaskDone.GetHashCode();
                if (this.FileDownload != null)
                    hash = hash * 59 + this.FileDownload.GetHashCode();
                if (this.MyFile != null)
                    hash = hash * 59 + this.MyFile.GetHashCode();
                if (this.TaskNew != null)
                    hash = hash * 59 + this.TaskNew.GetHashCode();
                if (this.TaskOwner != null)
                    hash = hash * 59 + this.TaskOwner.GetHashCode();
                if (this.FileTotal != null)
                    hash = hash * 59 + this.FileTotal.GetHashCode();
                if (this.TaskDueToday != null)
                    hash = hash * 59 + this.TaskDueToday.GetHashCode();
                if (this.FileEdit != null)
                    hash = hash * 59 + this.FileEdit.GetHashCode();
                if (this.TaskComments != null)
                    hash = hash * 59 + this.TaskComments.GetHashCode();
                if (this.TaskAllCompleted != null)
                    hash = hash * 59 + this.TaskAllCompleted.GetHashCode();
                if (this.FileRevised != null)
                    hash = hash * 59 + this.FileRevised.GetHashCode();
                if (this.TaskSummary != null)
                    hash = hash * 59 + this.TaskSummary.GetHashCode();
                if (this.ShareFile != null)
                    hash = hash * 59 + this.ShareFile.GetHashCode();
                if (this.FileCreated != null)
                    hash = hash * 59 + this.FileCreated.GetHashCode();
                if (this.TaskUpdated != null)
                    hash = hash * 59 + this.TaskUpdated.GetHashCode();
                if (this.FilePreview != null)
                    hash = hash * 59 + this.FilePreview.GetHashCode();
                if (this.TaskCc != null)
                    hash = hash * 59 + this.TaskCc.GetHashCode();
                if (this.TaskProgression != null)
                    hash = hash * 59 + this.TaskProgression.GetHashCode();
                if (this.TaskPast != null)
                    hash = hash * 59 + this.TaskPast.GetHashCode();
                if (this.TaskTo != null)
                    hash = hash * 59 + this.TaskTo.GetHashCode();
                if (this.TaskParticipation != null)
                    hash = hash * 59 + this.TaskParticipation.GetHashCode();
                if (this.TaskAccesses != null)
                    hash = hash * 59 + this.TaskAccesses.GetHashCode();
                if (this.ContentSummary != null)
                    hash = hash * 59 + this.ContentSummary.GetHashCode();
                return hash;
            }
        }
    }

}
