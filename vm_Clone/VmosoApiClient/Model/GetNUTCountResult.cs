/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetNUTCountResult :  IEquatable<GetNUTCountResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNUTCountResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetNUTCountResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNUTCountResult" /> class.
        /// </summary>
        /// <param name="CANUT"> (required).</param>
        /// <param name="EANUT"> (required).</param>
        /// <param name="Hdr">Hdr (required).</param>
        /// <param name="OANUT"> (required).</param>
        /// <param name="TANUT"> (required).</param>
        public GetNUTCountResult(int? CANUT = null, int? EANUT = null, ResponseHeaderRecord Hdr = null, int? OANUT = null, int? TANUT = null)
        {
            // to ensure "CANUT" is required (not null)
            if (CANUT == null)
            {
                throw new InvalidDataException("CANUT is a required property for GetNUTCountResult and cannot be null");
            }
            else
            {
                this.CANUT = CANUT;
            }
            // to ensure "EANUT" is required (not null)
            if (EANUT == null)
            {
                throw new InvalidDataException("EANUT is a required property for GetNUTCountResult and cannot be null");
            }
            else
            {
                this.EANUT = EANUT;
            }
            // to ensure "Hdr" is required (not null)
            if (Hdr == null)
            {
                throw new InvalidDataException("Hdr is a required property for GetNUTCountResult and cannot be null");
            }
            else
            {
                this.Hdr = Hdr;
            }
            // to ensure "OANUT" is required (not null)
            if (OANUT == null)
            {
                throw new InvalidDataException("OANUT is a required property for GetNUTCountResult and cannot be null");
            }
            else
            {
                this.OANUT = OANUT;
            }
            // to ensure "TANUT" is required (not null)
            if (TANUT == null)
            {
                throw new InvalidDataException("TANUT is a required property for GetNUTCountResult and cannot be null");
            }
            else
            {
                this.TANUT = TANUT;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CANUT", EmitDefaultValue=false)]
        public int? CANUT { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="EANUT", EmitDefaultValue=false)]
        public int? EANUT { get; set; }
        /// <summary>
        /// Gets or Sets Hdr
        /// </summary>
        [DataMember(Name="_hdr", EmitDefaultValue=false)]
        public ResponseHeaderRecord Hdr { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="OANUT", EmitDefaultValue=false)]
        public int? OANUT { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TANUT", EmitDefaultValue=false)]
        public int? TANUT { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetNUTCountResult {\n");
            sb.Append("  CANUT: ").Append(CANUT).Append("\n");
            sb.Append("  EANUT: ").Append(EANUT).Append("\n");
            sb.Append("  Hdr: ").Append(Hdr).Append("\n");
            sb.Append("  OANUT: ").Append(OANUT).Append("\n");
            sb.Append("  TANUT: ").Append(TANUT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetNUTCountResult);
        }

        /// <summary>
        /// Returns true if GetNUTCountResult instances are equal
        /// </summary>
        /// <param name="other">Instance of GetNUTCountResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNUTCountResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CANUT == other.CANUT ||
                    this.CANUT != null &&
                    this.CANUT.Equals(other.CANUT)
                ) && 
                (
                    this.EANUT == other.EANUT ||
                    this.EANUT != null &&
                    this.EANUT.Equals(other.EANUT)
                ) && 
                (
                    this.Hdr == other.Hdr ||
                    this.Hdr != null &&
                    this.Hdr.Equals(other.Hdr)
                ) && 
                (
                    this.OANUT == other.OANUT ||
                    this.OANUT != null &&
                    this.OANUT.Equals(other.OANUT)
                ) && 
                (
                    this.TANUT == other.TANUT ||
                    this.TANUT != null &&
                    this.TANUT.Equals(other.TANUT)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CANUT != null)
                    hash = hash * 59 + this.CANUT.GetHashCode();
                if (this.EANUT != null)
                    hash = hash * 59 + this.EANUT.GetHashCode();
                if (this.Hdr != null)
                    hash = hash * 59 + this.Hdr.GetHashCode();
                if (this.OANUT != null)
                    hash = hash * 59 + this.OANUT.GetHashCode();
                if (this.TANUT != null)
                    hash = hash * 59 + this.TANUT.GetHashCode();
                return hash;
            }
        }
    }

}
