/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// AnalyticConnectivityRecord
    /// </summary>
    [DataContract]
    public partial class AnalyticConnectivityRecord :  IEquatable<AnalyticConnectivityRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticConnectivityRecord" /> class.
        /// </summary>
        /// <param name="InboundConnectedPending">Number inbound connected pending.</param>
        /// <param name="OutboundConnectedSubtotal">Number of outbound connected subtotal.</param>
        /// <param name="OutboundTrustedRejected">Number of outbound trusted rejected.</param>
        /// <param name="InboundTrustedSubtotal">Number inbound trusted subtotal.</param>
        /// <param name="TotalTotalRejected">Number of total Total Rejected.</param>
        /// <param name="InboundConnectedSubtotal">Number inbound connected subtotal.</param>
        /// <param name="InboundTotalPending">Number of inbound total pending.</param>
        /// <param name="RegisteredEngaged">Number of registered engaged.</param>
        /// <param name="TotalTrustedPending">Number of total trusted pending.</param>
        /// <param name="OutboundTotalRejected">Number of outbound total rejected.</param>
        /// <param name="UnRegisteredSubtotal">Number of unregistered subtotal.</param>
        /// <param name="UnRegisteredAcquainted">Number of unregistered acquainted.</param>
        /// <param name="InboundConnectedRejected">Number inbound connected rejected.</param>
        /// <param name="OutboundConnectedPending">Number of outbound connected pending.</param>
        /// <param name="InboundConnectedAccepted">Number inbound connected accepted.</param>
        /// <param name="OutboundTotalPending">Number of outbout total pending.</param>
        /// <param name="UsersTotal">Number of users total.</param>
        /// <param name="InboundTrustedPending">Number of inbound trusted pending.</param>
        /// <param name="TotalConnectedSubtotal">Number of total connected subtotal.</param>
        /// <param name="TotalConnectedPending">Number of total connected pending.</param>
        /// <param name="GrandTotal">Number of grand total.</param>
        /// <param name="TotalTrustedRejected">Number of total trusted rejected.</param>
        /// <param name="OutboundTotalAccepted">Number of outbound total accepted.</param>
        /// <param name="RegisteredConnected">Number of registered connected.</param>
        /// <param name="RegisteredAcquainted">Number of registered acquainted.</param>
        /// <param name="TotalConnectedAccepted">Number of total connected accepted.</param>
        /// <param name="OutboundTotalSubtotal">Number of outbound total subtotal.</param>
        /// <param name="InboundTotalRejected">Number of inbount total rejected.</param>
        /// <param name="TotalConnectedRejected">Number of total connected rejected.</param>
        /// <param name="OutboundConnectedRejected">Number of outbound connected rejected.</param>
        /// <param name="TotalTotalPending">Number of total Total Pending.</param>
        /// <param name="InboundTrustedRejected">Number of inbound trusted rejected.</param>
        /// <param name="UnRegisteredEngaged">Number of unregistered engaged.</param>
        /// <param name="OutboundTrustedAccepted">Number of outbound connected accepted.</param>
        /// <param name="OutboundTrustedSubtotal">Number of outbound trusted subtotal.</param>
        /// <param name="TotalTotalAccepted">Number of total Total Accepted.</param>
        /// <param name="TotalTotalSubtotal">Number of total Total Subtotal.</param>
        /// <param name="InboundTrustedAccepted">Number of inbound trusted accepted.</param>
        /// <param name="OutboundConnectedAccepted">Number of outbound connected accepted.</param>
        /// <param name="OutboundTrustedPending">Number of outbound trusted pending.</param>
        /// <param name="TotalTrustedSubtotal">Number of total Trusted Subtotal.</param>
        /// <param name="ConnectivityTotal">Connectivity Total.</param>
        /// <param name="TotalTrustedAccepted">Number of total trusted accepted.</param>
        /// <param name="RegisteredTrusted">Number of registered trusted.</param>
        /// <param name="RegisteredSubtotal">Number of registered subtotal.</param>
        /// <param name="InboundTotalAccepted">Number of inbound total accepted.</param>
        /// <param name="InboundTotalSubtotal">Number of inbound total subtotal.</param>
        public AnalyticConnectivityRecord(int? InboundConnectedPending = null, int? OutboundConnectedSubtotal = null, int? OutboundTrustedRejected = null, int? InboundTrustedSubtotal = null, int? TotalTotalRejected = null, int? InboundConnectedSubtotal = null, int? InboundTotalPending = null, int? RegisteredEngaged = null, int? TotalTrustedPending = null, int? OutboundTotalRejected = null, int? UnRegisteredSubtotal = null, int? UnRegisteredAcquainted = null, int? InboundConnectedRejected = null, int? OutboundConnectedPending = null, int? InboundConnectedAccepted = null, int? OutboundTotalPending = null, int? UsersTotal = null, int? InboundTrustedPending = null, int? TotalConnectedSubtotal = null, int? TotalConnectedPending = null, int? GrandTotal = null, int? TotalTrustedRejected = null, int? OutboundTotalAccepted = null, int? RegisteredConnected = null, int? RegisteredAcquainted = null, int? TotalConnectedAccepted = null, int? OutboundTotalSubtotal = null, int? InboundTotalRejected = null, int? TotalConnectedRejected = null, int? OutboundConnectedRejected = null, int? TotalTotalPending = null, int? InboundTrustedRejected = null, int? UnRegisteredEngaged = null, int? OutboundTrustedAccepted = null, int? OutboundTrustedSubtotal = null, int? TotalTotalAccepted = null, int? TotalTotalSubtotal = null, int? InboundTrustedAccepted = null, int? OutboundConnectedAccepted = null, int? OutboundTrustedPending = null, int? TotalTrustedSubtotal = null, int? ConnectivityTotal = null, int? TotalTrustedAccepted = null, int? RegisteredTrusted = null, int? RegisteredSubtotal = null, int? InboundTotalAccepted = null, int? InboundTotalSubtotal = null)
        {
            this.InboundConnectedPending = InboundConnectedPending;
            this.OutboundConnectedSubtotal = OutboundConnectedSubtotal;
            this.OutboundTrustedRejected = OutboundTrustedRejected;
            this.InboundTrustedSubtotal = InboundTrustedSubtotal;
            this.TotalTotalRejected = TotalTotalRejected;
            this.InboundConnectedSubtotal = InboundConnectedSubtotal;
            this.InboundTotalPending = InboundTotalPending;
            this.RegisteredEngaged = RegisteredEngaged;
            this.TotalTrustedPending = TotalTrustedPending;
            this.OutboundTotalRejected = OutboundTotalRejected;
            this.UnRegisteredSubtotal = UnRegisteredSubtotal;
            this.UnRegisteredAcquainted = UnRegisteredAcquainted;
            this.InboundConnectedRejected = InboundConnectedRejected;
            this.OutboundConnectedPending = OutboundConnectedPending;
            this.InboundConnectedAccepted = InboundConnectedAccepted;
            this.OutboundTotalPending = OutboundTotalPending;
            this.UsersTotal = UsersTotal;
            this.InboundTrustedPending = InboundTrustedPending;
            this.TotalConnectedSubtotal = TotalConnectedSubtotal;
            this.TotalConnectedPending = TotalConnectedPending;
            this.GrandTotal = GrandTotal;
            this.TotalTrustedRejected = TotalTrustedRejected;
            this.OutboundTotalAccepted = OutboundTotalAccepted;
            this.RegisteredConnected = RegisteredConnected;
            this.RegisteredAcquainted = RegisteredAcquainted;
            this.TotalConnectedAccepted = TotalConnectedAccepted;
            this.OutboundTotalSubtotal = OutboundTotalSubtotal;
            this.InboundTotalRejected = InboundTotalRejected;
            this.TotalConnectedRejected = TotalConnectedRejected;
            this.OutboundConnectedRejected = OutboundConnectedRejected;
            this.TotalTotalPending = TotalTotalPending;
            this.InboundTrustedRejected = InboundTrustedRejected;
            this.UnRegisteredEngaged = UnRegisteredEngaged;
            this.OutboundTrustedAccepted = OutboundTrustedAccepted;
            this.OutboundTrustedSubtotal = OutboundTrustedSubtotal;
            this.TotalTotalAccepted = TotalTotalAccepted;
            this.TotalTotalSubtotal = TotalTotalSubtotal;
            this.InboundTrustedAccepted = InboundTrustedAccepted;
            this.OutboundConnectedAccepted = OutboundConnectedAccepted;
            this.OutboundTrustedPending = OutboundTrustedPending;
            this.TotalTrustedSubtotal = TotalTrustedSubtotal;
            this.ConnectivityTotal = ConnectivityTotal;
            this.TotalTrustedAccepted = TotalTrustedAccepted;
            this.RegisteredTrusted = RegisteredTrusted;
            this.RegisteredSubtotal = RegisteredSubtotal;
            this.InboundTotalAccepted = InboundTotalAccepted;
            this.InboundTotalSubtotal = InboundTotalSubtotal;
        }
        
        /// <summary>
        /// Number inbound connected pending
        /// </summary>
        /// <value>Number inbound connected pending</value>
        [DataMember(Name="inboundConnectedPending", EmitDefaultValue=false)]
        public int? InboundConnectedPending { get; set; }
        /// <summary>
        /// Number of outbound connected subtotal
        /// </summary>
        /// <value>Number of outbound connected subtotal</value>
        [DataMember(Name="outboundConnectedSubtotal", EmitDefaultValue=false)]
        public int? OutboundConnectedSubtotal { get; set; }
        /// <summary>
        /// Number of outbound trusted rejected
        /// </summary>
        /// <value>Number of outbound trusted rejected</value>
        [DataMember(Name="outboundTrustedRejected", EmitDefaultValue=false)]
        public int? OutboundTrustedRejected { get; set; }
        /// <summary>
        /// Number inbound trusted subtotal
        /// </summary>
        /// <value>Number inbound trusted subtotal</value>
        [DataMember(Name="inboundTrustedSubtotal", EmitDefaultValue=false)]
        public int? InboundTrustedSubtotal { get; set; }
        /// <summary>
        /// Number of total Total Rejected
        /// </summary>
        /// <value>Number of total Total Rejected</value>
        [DataMember(Name="totalTotalRejected", EmitDefaultValue=false)]
        public int? TotalTotalRejected { get; set; }
        /// <summary>
        /// Number inbound connected subtotal
        /// </summary>
        /// <value>Number inbound connected subtotal</value>
        [DataMember(Name="inboundConnectedSubtotal", EmitDefaultValue=false)]
        public int? InboundConnectedSubtotal { get; set; }
        /// <summary>
        /// Number of inbound total pending
        /// </summary>
        /// <value>Number of inbound total pending</value>
        [DataMember(Name="inboundTotalPending", EmitDefaultValue=false)]
        public int? InboundTotalPending { get; set; }
        /// <summary>
        /// Number of registered engaged
        /// </summary>
        /// <value>Number of registered engaged</value>
        [DataMember(Name="registeredEngaged", EmitDefaultValue=false)]
        public int? RegisteredEngaged { get; set; }
        /// <summary>
        /// Number of total trusted pending
        /// </summary>
        /// <value>Number of total trusted pending</value>
        [DataMember(Name="totalTrustedPending", EmitDefaultValue=false)]
        public int? TotalTrustedPending { get; set; }
        /// <summary>
        /// Number of outbound total rejected
        /// </summary>
        /// <value>Number of outbound total rejected</value>
        [DataMember(Name="outboundTotalRejected", EmitDefaultValue=false)]
        public int? OutboundTotalRejected { get; set; }
        /// <summary>
        /// Number of unregistered subtotal
        /// </summary>
        /// <value>Number of unregistered subtotal</value>
        [DataMember(Name="unRegisteredSubtotal", EmitDefaultValue=false)]
        public int? UnRegisteredSubtotal { get; set; }
        /// <summary>
        /// Number of unregistered acquainted
        /// </summary>
        /// <value>Number of unregistered acquainted</value>
        [DataMember(Name="unRegisteredAcquainted", EmitDefaultValue=false)]
        public int? UnRegisteredAcquainted { get; set; }
        /// <summary>
        /// Number inbound connected rejected
        /// </summary>
        /// <value>Number inbound connected rejected</value>
        [DataMember(Name="inboundConnectedRejected", EmitDefaultValue=false)]
        public int? InboundConnectedRejected { get; set; }
        /// <summary>
        /// Number of outbound connected pending
        /// </summary>
        /// <value>Number of outbound connected pending</value>
        [DataMember(Name="outboundConnectedPending", EmitDefaultValue=false)]
        public int? OutboundConnectedPending { get; set; }
        /// <summary>
        /// Number inbound connected accepted
        /// </summary>
        /// <value>Number inbound connected accepted</value>
        [DataMember(Name="inboundConnectedAccepted", EmitDefaultValue=false)]
        public int? InboundConnectedAccepted { get; set; }
        /// <summary>
        /// Number of outbout total pending
        /// </summary>
        /// <value>Number of outbout total pending</value>
        [DataMember(Name="outboundTotalPending", EmitDefaultValue=false)]
        public int? OutboundTotalPending { get; set; }
        /// <summary>
        /// Number of users total
        /// </summary>
        /// <value>Number of users total</value>
        [DataMember(Name="usersTotal", EmitDefaultValue=false)]
        public int? UsersTotal { get; set; }
        /// <summary>
        /// Number of inbound trusted pending
        /// </summary>
        /// <value>Number of inbound trusted pending</value>
        [DataMember(Name="inboundTrustedPending", EmitDefaultValue=false)]
        public int? InboundTrustedPending { get; set; }
        /// <summary>
        /// Number of total connected subtotal
        /// </summary>
        /// <value>Number of total connected subtotal</value>
        [DataMember(Name="totalConnectedSubtotal", EmitDefaultValue=false)]
        public int? TotalConnectedSubtotal { get; set; }
        /// <summary>
        /// Number of total connected pending
        /// </summary>
        /// <value>Number of total connected pending</value>
        [DataMember(Name="totalConnectedPending", EmitDefaultValue=false)]
        public int? TotalConnectedPending { get; set; }
        /// <summary>
        /// Number of grand total
        /// </summary>
        /// <value>Number of grand total</value>
        [DataMember(Name="grandTotal", EmitDefaultValue=false)]
        public int? GrandTotal { get; set; }
        /// <summary>
        /// Number of total trusted rejected
        /// </summary>
        /// <value>Number of total trusted rejected</value>
        [DataMember(Name="totalTrustedRejected", EmitDefaultValue=false)]
        public int? TotalTrustedRejected { get; set; }
        /// <summary>
        /// Number of outbound total accepted
        /// </summary>
        /// <value>Number of outbound total accepted</value>
        [DataMember(Name="outboundTotalAccepted", EmitDefaultValue=false)]
        public int? OutboundTotalAccepted { get; set; }
        /// <summary>
        /// Number of registered connected
        /// </summary>
        /// <value>Number of registered connected</value>
        [DataMember(Name="registeredConnected", EmitDefaultValue=false)]
        public int? RegisteredConnected { get; set; }
        /// <summary>
        /// Number of registered acquainted
        /// </summary>
        /// <value>Number of registered acquainted</value>
        [DataMember(Name="registeredAcquainted", EmitDefaultValue=false)]
        public int? RegisteredAcquainted { get; set; }
        /// <summary>
        /// Number of total connected accepted
        /// </summary>
        /// <value>Number of total connected accepted</value>
        [DataMember(Name="totalConnectedAccepted", EmitDefaultValue=false)]
        public int? TotalConnectedAccepted { get; set; }
        /// <summary>
        /// Number of outbound total subtotal
        /// </summary>
        /// <value>Number of outbound total subtotal</value>
        [DataMember(Name="outboundTotalSubtotal", EmitDefaultValue=false)]
        public int? OutboundTotalSubtotal { get; set; }
        /// <summary>
        /// Number of inbount total rejected
        /// </summary>
        /// <value>Number of inbount total rejected</value>
        [DataMember(Name="inboundTotalRejected", EmitDefaultValue=false)]
        public int? InboundTotalRejected { get; set; }
        /// <summary>
        /// Number of total connected rejected
        /// </summary>
        /// <value>Number of total connected rejected</value>
        [DataMember(Name="totalConnectedRejected", EmitDefaultValue=false)]
        public int? TotalConnectedRejected { get; set; }
        /// <summary>
        /// Number of outbound connected rejected
        /// </summary>
        /// <value>Number of outbound connected rejected</value>
        [DataMember(Name="outboundConnectedRejected", EmitDefaultValue=false)]
        public int? OutboundConnectedRejected { get; set; }
        /// <summary>
        /// Number of total Total Pending
        /// </summary>
        /// <value>Number of total Total Pending</value>
        [DataMember(Name="totalTotalPending", EmitDefaultValue=false)]
        public int? TotalTotalPending { get; set; }
        /// <summary>
        /// Number of inbound trusted rejected
        /// </summary>
        /// <value>Number of inbound trusted rejected</value>
        [DataMember(Name="inboundTrustedRejected", EmitDefaultValue=false)]
        public int? InboundTrustedRejected { get; set; }
        /// <summary>
        /// Number of unregistered engaged
        /// </summary>
        /// <value>Number of unregistered engaged</value>
        [DataMember(Name="unRegisteredEngaged", EmitDefaultValue=false)]
        public int? UnRegisteredEngaged { get; set; }
        /// <summary>
        /// Number of outbound connected accepted
        /// </summary>
        /// <value>Number of outbound connected accepted</value>
        [DataMember(Name="outboundTrustedAccepted", EmitDefaultValue=false)]
        public int? OutboundTrustedAccepted { get; set; }
        /// <summary>
        /// Number of outbound trusted subtotal
        /// </summary>
        /// <value>Number of outbound trusted subtotal</value>
        [DataMember(Name="outboundTrustedSubtotal", EmitDefaultValue=false)]
        public int? OutboundTrustedSubtotal { get; set; }
        /// <summary>
        /// Number of total Total Accepted
        /// </summary>
        /// <value>Number of total Total Accepted</value>
        [DataMember(Name="totalTotalAccepted", EmitDefaultValue=false)]
        public int? TotalTotalAccepted { get; set; }
        /// <summary>
        /// Number of total Total Subtotal
        /// </summary>
        /// <value>Number of total Total Subtotal</value>
        [DataMember(Name="totalTotalSubtotal", EmitDefaultValue=false)]
        public int? TotalTotalSubtotal { get; set; }
        /// <summary>
        /// Number of inbound trusted accepted
        /// </summary>
        /// <value>Number of inbound trusted accepted</value>
        [DataMember(Name="inboundTrustedAccepted", EmitDefaultValue=false)]
        public int? InboundTrustedAccepted { get; set; }
        /// <summary>
        /// Number of outbound connected accepted
        /// </summary>
        /// <value>Number of outbound connected accepted</value>
        [DataMember(Name="outboundConnectedAccepted", EmitDefaultValue=false)]
        public int? OutboundConnectedAccepted { get; set; }
        /// <summary>
        /// Number of outbound trusted pending
        /// </summary>
        /// <value>Number of outbound trusted pending</value>
        [DataMember(Name="outboundTrustedPending", EmitDefaultValue=false)]
        public int? OutboundTrustedPending { get; set; }
        /// <summary>
        /// Number of total Trusted Subtotal
        /// </summary>
        /// <value>Number of total Trusted Subtotal</value>
        [DataMember(Name="totalTrustedSubtotal", EmitDefaultValue=false)]
        public int? TotalTrustedSubtotal { get; set; }
        /// <summary>
        /// Connectivity Total
        /// </summary>
        /// <value>Connectivity Total</value>
        [DataMember(Name="connectivityTotal", EmitDefaultValue=false)]
        public int? ConnectivityTotal { get; set; }
        /// <summary>
        /// Number of total trusted accepted
        /// </summary>
        /// <value>Number of total trusted accepted</value>
        [DataMember(Name="totalTrustedAccepted", EmitDefaultValue=false)]
        public int? TotalTrustedAccepted { get; set; }
        /// <summary>
        /// Number of registered trusted
        /// </summary>
        /// <value>Number of registered trusted</value>
        [DataMember(Name="registeredTrusted", EmitDefaultValue=false)]
        public int? RegisteredTrusted { get; set; }
        /// <summary>
        /// Number of registered subtotal
        /// </summary>
        /// <value>Number of registered subtotal</value>
        [DataMember(Name="registeredSubtotal", EmitDefaultValue=false)]
        public int? RegisteredSubtotal { get; set; }
        /// <summary>
        /// Number of inbound total accepted
        /// </summary>
        /// <value>Number of inbound total accepted</value>
        [DataMember(Name="inboundTotalAccepted", EmitDefaultValue=false)]
        public int? InboundTotalAccepted { get; set; }
        /// <summary>
        /// Number of inbound total subtotal
        /// </summary>
        /// <value>Number of inbound total subtotal</value>
        [DataMember(Name="inboundTotalSubtotal", EmitDefaultValue=false)]
        public int? InboundTotalSubtotal { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticConnectivityRecord {\n");
            sb.Append("  InboundConnectedPending: ").Append(InboundConnectedPending).Append("\n");
            sb.Append("  OutboundConnectedSubtotal: ").Append(OutboundConnectedSubtotal).Append("\n");
            sb.Append("  OutboundTrustedRejected: ").Append(OutboundTrustedRejected).Append("\n");
            sb.Append("  InboundTrustedSubtotal: ").Append(InboundTrustedSubtotal).Append("\n");
            sb.Append("  TotalTotalRejected: ").Append(TotalTotalRejected).Append("\n");
            sb.Append("  InboundConnectedSubtotal: ").Append(InboundConnectedSubtotal).Append("\n");
            sb.Append("  InboundTotalPending: ").Append(InboundTotalPending).Append("\n");
            sb.Append("  RegisteredEngaged: ").Append(RegisteredEngaged).Append("\n");
            sb.Append("  TotalTrustedPending: ").Append(TotalTrustedPending).Append("\n");
            sb.Append("  OutboundTotalRejected: ").Append(OutboundTotalRejected).Append("\n");
            sb.Append("  UnRegisteredSubtotal: ").Append(UnRegisteredSubtotal).Append("\n");
            sb.Append("  UnRegisteredAcquainted: ").Append(UnRegisteredAcquainted).Append("\n");
            sb.Append("  InboundConnectedRejected: ").Append(InboundConnectedRejected).Append("\n");
            sb.Append("  OutboundConnectedPending: ").Append(OutboundConnectedPending).Append("\n");
            sb.Append("  InboundConnectedAccepted: ").Append(InboundConnectedAccepted).Append("\n");
            sb.Append("  OutboundTotalPending: ").Append(OutboundTotalPending).Append("\n");
            sb.Append("  UsersTotal: ").Append(UsersTotal).Append("\n");
            sb.Append("  InboundTrustedPending: ").Append(InboundTrustedPending).Append("\n");
            sb.Append("  TotalConnectedSubtotal: ").Append(TotalConnectedSubtotal).Append("\n");
            sb.Append("  TotalConnectedPending: ").Append(TotalConnectedPending).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  TotalTrustedRejected: ").Append(TotalTrustedRejected).Append("\n");
            sb.Append("  OutboundTotalAccepted: ").Append(OutboundTotalAccepted).Append("\n");
            sb.Append("  RegisteredConnected: ").Append(RegisteredConnected).Append("\n");
            sb.Append("  RegisteredAcquainted: ").Append(RegisteredAcquainted).Append("\n");
            sb.Append("  TotalConnectedAccepted: ").Append(TotalConnectedAccepted).Append("\n");
            sb.Append("  OutboundTotalSubtotal: ").Append(OutboundTotalSubtotal).Append("\n");
            sb.Append("  InboundTotalRejected: ").Append(InboundTotalRejected).Append("\n");
            sb.Append("  TotalConnectedRejected: ").Append(TotalConnectedRejected).Append("\n");
            sb.Append("  OutboundConnectedRejected: ").Append(OutboundConnectedRejected).Append("\n");
            sb.Append("  TotalTotalPending: ").Append(TotalTotalPending).Append("\n");
            sb.Append("  InboundTrustedRejected: ").Append(InboundTrustedRejected).Append("\n");
            sb.Append("  UnRegisteredEngaged: ").Append(UnRegisteredEngaged).Append("\n");
            sb.Append("  OutboundTrustedAccepted: ").Append(OutboundTrustedAccepted).Append("\n");
            sb.Append("  OutboundTrustedSubtotal: ").Append(OutboundTrustedSubtotal).Append("\n");
            sb.Append("  TotalTotalAccepted: ").Append(TotalTotalAccepted).Append("\n");
            sb.Append("  TotalTotalSubtotal: ").Append(TotalTotalSubtotal).Append("\n");
            sb.Append("  InboundTrustedAccepted: ").Append(InboundTrustedAccepted).Append("\n");
            sb.Append("  OutboundConnectedAccepted: ").Append(OutboundConnectedAccepted).Append("\n");
            sb.Append("  OutboundTrustedPending: ").Append(OutboundTrustedPending).Append("\n");
            sb.Append("  TotalTrustedSubtotal: ").Append(TotalTrustedSubtotal).Append("\n");
            sb.Append("  ConnectivityTotal: ").Append(ConnectivityTotal).Append("\n");
            sb.Append("  TotalTrustedAccepted: ").Append(TotalTrustedAccepted).Append("\n");
            sb.Append("  RegisteredTrusted: ").Append(RegisteredTrusted).Append("\n");
            sb.Append("  RegisteredSubtotal: ").Append(RegisteredSubtotal).Append("\n");
            sb.Append("  InboundTotalAccepted: ").Append(InboundTotalAccepted).Append("\n");
            sb.Append("  InboundTotalSubtotal: ").Append(InboundTotalSubtotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AnalyticConnectivityRecord);
        }

        /// <summary>
        /// Returns true if AnalyticConnectivityRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalyticConnectivityRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticConnectivityRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InboundConnectedPending == other.InboundConnectedPending ||
                    this.InboundConnectedPending != null &&
                    this.InboundConnectedPending.Equals(other.InboundConnectedPending)
                ) && 
                (
                    this.OutboundConnectedSubtotal == other.OutboundConnectedSubtotal ||
                    this.OutboundConnectedSubtotal != null &&
                    this.OutboundConnectedSubtotal.Equals(other.OutboundConnectedSubtotal)
                ) && 
                (
                    this.OutboundTrustedRejected == other.OutboundTrustedRejected ||
                    this.OutboundTrustedRejected != null &&
                    this.OutboundTrustedRejected.Equals(other.OutboundTrustedRejected)
                ) && 
                (
                    this.InboundTrustedSubtotal == other.InboundTrustedSubtotal ||
                    this.InboundTrustedSubtotal != null &&
                    this.InboundTrustedSubtotal.Equals(other.InboundTrustedSubtotal)
                ) && 
                (
                    this.TotalTotalRejected == other.TotalTotalRejected ||
                    this.TotalTotalRejected != null &&
                    this.TotalTotalRejected.Equals(other.TotalTotalRejected)
                ) && 
                (
                    this.InboundConnectedSubtotal == other.InboundConnectedSubtotal ||
                    this.InboundConnectedSubtotal != null &&
                    this.InboundConnectedSubtotal.Equals(other.InboundConnectedSubtotal)
                ) && 
                (
                    this.InboundTotalPending == other.InboundTotalPending ||
                    this.InboundTotalPending != null &&
                    this.InboundTotalPending.Equals(other.InboundTotalPending)
                ) && 
                (
                    this.RegisteredEngaged == other.RegisteredEngaged ||
                    this.RegisteredEngaged != null &&
                    this.RegisteredEngaged.Equals(other.RegisteredEngaged)
                ) && 
                (
                    this.TotalTrustedPending == other.TotalTrustedPending ||
                    this.TotalTrustedPending != null &&
                    this.TotalTrustedPending.Equals(other.TotalTrustedPending)
                ) && 
                (
                    this.OutboundTotalRejected == other.OutboundTotalRejected ||
                    this.OutboundTotalRejected != null &&
                    this.OutboundTotalRejected.Equals(other.OutboundTotalRejected)
                ) && 
                (
                    this.UnRegisteredSubtotal == other.UnRegisteredSubtotal ||
                    this.UnRegisteredSubtotal != null &&
                    this.UnRegisteredSubtotal.Equals(other.UnRegisteredSubtotal)
                ) && 
                (
                    this.UnRegisteredAcquainted == other.UnRegisteredAcquainted ||
                    this.UnRegisteredAcquainted != null &&
                    this.UnRegisteredAcquainted.Equals(other.UnRegisteredAcquainted)
                ) && 
                (
                    this.InboundConnectedRejected == other.InboundConnectedRejected ||
                    this.InboundConnectedRejected != null &&
                    this.InboundConnectedRejected.Equals(other.InboundConnectedRejected)
                ) && 
                (
                    this.OutboundConnectedPending == other.OutboundConnectedPending ||
                    this.OutboundConnectedPending != null &&
                    this.OutboundConnectedPending.Equals(other.OutboundConnectedPending)
                ) && 
                (
                    this.InboundConnectedAccepted == other.InboundConnectedAccepted ||
                    this.InboundConnectedAccepted != null &&
                    this.InboundConnectedAccepted.Equals(other.InboundConnectedAccepted)
                ) && 
                (
                    this.OutboundTotalPending == other.OutboundTotalPending ||
                    this.OutboundTotalPending != null &&
                    this.OutboundTotalPending.Equals(other.OutboundTotalPending)
                ) && 
                (
                    this.UsersTotal == other.UsersTotal ||
                    this.UsersTotal != null &&
                    this.UsersTotal.Equals(other.UsersTotal)
                ) && 
                (
                    this.InboundTrustedPending == other.InboundTrustedPending ||
                    this.InboundTrustedPending != null &&
                    this.InboundTrustedPending.Equals(other.InboundTrustedPending)
                ) && 
                (
                    this.TotalConnectedSubtotal == other.TotalConnectedSubtotal ||
                    this.TotalConnectedSubtotal != null &&
                    this.TotalConnectedSubtotal.Equals(other.TotalConnectedSubtotal)
                ) && 
                (
                    this.TotalConnectedPending == other.TotalConnectedPending ||
                    this.TotalConnectedPending != null &&
                    this.TotalConnectedPending.Equals(other.TotalConnectedPending)
                ) && 
                (
                    this.GrandTotal == other.GrandTotal ||
                    this.GrandTotal != null &&
                    this.GrandTotal.Equals(other.GrandTotal)
                ) && 
                (
                    this.TotalTrustedRejected == other.TotalTrustedRejected ||
                    this.TotalTrustedRejected != null &&
                    this.TotalTrustedRejected.Equals(other.TotalTrustedRejected)
                ) && 
                (
                    this.OutboundTotalAccepted == other.OutboundTotalAccepted ||
                    this.OutboundTotalAccepted != null &&
                    this.OutboundTotalAccepted.Equals(other.OutboundTotalAccepted)
                ) && 
                (
                    this.RegisteredConnected == other.RegisteredConnected ||
                    this.RegisteredConnected != null &&
                    this.RegisteredConnected.Equals(other.RegisteredConnected)
                ) && 
                (
                    this.RegisteredAcquainted == other.RegisteredAcquainted ||
                    this.RegisteredAcquainted != null &&
                    this.RegisteredAcquainted.Equals(other.RegisteredAcquainted)
                ) && 
                (
                    this.TotalConnectedAccepted == other.TotalConnectedAccepted ||
                    this.TotalConnectedAccepted != null &&
                    this.TotalConnectedAccepted.Equals(other.TotalConnectedAccepted)
                ) && 
                (
                    this.OutboundTotalSubtotal == other.OutboundTotalSubtotal ||
                    this.OutboundTotalSubtotal != null &&
                    this.OutboundTotalSubtotal.Equals(other.OutboundTotalSubtotal)
                ) && 
                (
                    this.InboundTotalRejected == other.InboundTotalRejected ||
                    this.InboundTotalRejected != null &&
                    this.InboundTotalRejected.Equals(other.InboundTotalRejected)
                ) && 
                (
                    this.TotalConnectedRejected == other.TotalConnectedRejected ||
                    this.TotalConnectedRejected != null &&
                    this.TotalConnectedRejected.Equals(other.TotalConnectedRejected)
                ) && 
                (
                    this.OutboundConnectedRejected == other.OutboundConnectedRejected ||
                    this.OutboundConnectedRejected != null &&
                    this.OutboundConnectedRejected.Equals(other.OutboundConnectedRejected)
                ) && 
                (
                    this.TotalTotalPending == other.TotalTotalPending ||
                    this.TotalTotalPending != null &&
                    this.TotalTotalPending.Equals(other.TotalTotalPending)
                ) && 
                (
                    this.InboundTrustedRejected == other.InboundTrustedRejected ||
                    this.InboundTrustedRejected != null &&
                    this.InboundTrustedRejected.Equals(other.InboundTrustedRejected)
                ) && 
                (
                    this.UnRegisteredEngaged == other.UnRegisteredEngaged ||
                    this.UnRegisteredEngaged != null &&
                    this.UnRegisteredEngaged.Equals(other.UnRegisteredEngaged)
                ) && 
                (
                    this.OutboundTrustedAccepted == other.OutboundTrustedAccepted ||
                    this.OutboundTrustedAccepted != null &&
                    this.OutboundTrustedAccepted.Equals(other.OutboundTrustedAccepted)
                ) && 
                (
                    this.OutboundTrustedSubtotal == other.OutboundTrustedSubtotal ||
                    this.OutboundTrustedSubtotal != null &&
                    this.OutboundTrustedSubtotal.Equals(other.OutboundTrustedSubtotal)
                ) && 
                (
                    this.TotalTotalAccepted == other.TotalTotalAccepted ||
                    this.TotalTotalAccepted != null &&
                    this.TotalTotalAccepted.Equals(other.TotalTotalAccepted)
                ) && 
                (
                    this.TotalTotalSubtotal == other.TotalTotalSubtotal ||
                    this.TotalTotalSubtotal != null &&
                    this.TotalTotalSubtotal.Equals(other.TotalTotalSubtotal)
                ) && 
                (
                    this.InboundTrustedAccepted == other.InboundTrustedAccepted ||
                    this.InboundTrustedAccepted != null &&
                    this.InboundTrustedAccepted.Equals(other.InboundTrustedAccepted)
                ) && 
                (
                    this.OutboundConnectedAccepted == other.OutboundConnectedAccepted ||
                    this.OutboundConnectedAccepted != null &&
                    this.OutboundConnectedAccepted.Equals(other.OutboundConnectedAccepted)
                ) && 
                (
                    this.OutboundTrustedPending == other.OutboundTrustedPending ||
                    this.OutboundTrustedPending != null &&
                    this.OutboundTrustedPending.Equals(other.OutboundTrustedPending)
                ) && 
                (
                    this.TotalTrustedSubtotal == other.TotalTrustedSubtotal ||
                    this.TotalTrustedSubtotal != null &&
                    this.TotalTrustedSubtotal.Equals(other.TotalTrustedSubtotal)
                ) && 
                (
                    this.ConnectivityTotal == other.ConnectivityTotal ||
                    this.ConnectivityTotal != null &&
                    this.ConnectivityTotal.Equals(other.ConnectivityTotal)
                ) && 
                (
                    this.TotalTrustedAccepted == other.TotalTrustedAccepted ||
                    this.TotalTrustedAccepted != null &&
                    this.TotalTrustedAccepted.Equals(other.TotalTrustedAccepted)
                ) && 
                (
                    this.RegisteredTrusted == other.RegisteredTrusted ||
                    this.RegisteredTrusted != null &&
                    this.RegisteredTrusted.Equals(other.RegisteredTrusted)
                ) && 
                (
                    this.RegisteredSubtotal == other.RegisteredSubtotal ||
                    this.RegisteredSubtotal != null &&
                    this.RegisteredSubtotal.Equals(other.RegisteredSubtotal)
                ) && 
                (
                    this.InboundTotalAccepted == other.InboundTotalAccepted ||
                    this.InboundTotalAccepted != null &&
                    this.InboundTotalAccepted.Equals(other.InboundTotalAccepted)
                ) && 
                (
                    this.InboundTotalSubtotal == other.InboundTotalSubtotal ||
                    this.InboundTotalSubtotal != null &&
                    this.InboundTotalSubtotal.Equals(other.InboundTotalSubtotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InboundConnectedPending != null)
                    hash = hash * 59 + this.InboundConnectedPending.GetHashCode();
                if (this.OutboundConnectedSubtotal != null)
                    hash = hash * 59 + this.OutboundConnectedSubtotal.GetHashCode();
                if (this.OutboundTrustedRejected != null)
                    hash = hash * 59 + this.OutboundTrustedRejected.GetHashCode();
                if (this.InboundTrustedSubtotal != null)
                    hash = hash * 59 + this.InboundTrustedSubtotal.GetHashCode();
                if (this.TotalTotalRejected != null)
                    hash = hash * 59 + this.TotalTotalRejected.GetHashCode();
                if (this.InboundConnectedSubtotal != null)
                    hash = hash * 59 + this.InboundConnectedSubtotal.GetHashCode();
                if (this.InboundTotalPending != null)
                    hash = hash * 59 + this.InboundTotalPending.GetHashCode();
                if (this.RegisteredEngaged != null)
                    hash = hash * 59 + this.RegisteredEngaged.GetHashCode();
                if (this.TotalTrustedPending != null)
                    hash = hash * 59 + this.TotalTrustedPending.GetHashCode();
                if (this.OutboundTotalRejected != null)
                    hash = hash * 59 + this.OutboundTotalRejected.GetHashCode();
                if (this.UnRegisteredSubtotal != null)
                    hash = hash * 59 + this.UnRegisteredSubtotal.GetHashCode();
                if (this.UnRegisteredAcquainted != null)
                    hash = hash * 59 + this.UnRegisteredAcquainted.GetHashCode();
                if (this.InboundConnectedRejected != null)
                    hash = hash * 59 + this.InboundConnectedRejected.GetHashCode();
                if (this.OutboundConnectedPending != null)
                    hash = hash * 59 + this.OutboundConnectedPending.GetHashCode();
                if (this.InboundConnectedAccepted != null)
                    hash = hash * 59 + this.InboundConnectedAccepted.GetHashCode();
                if (this.OutboundTotalPending != null)
                    hash = hash * 59 + this.OutboundTotalPending.GetHashCode();
                if (this.UsersTotal != null)
                    hash = hash * 59 + this.UsersTotal.GetHashCode();
                if (this.InboundTrustedPending != null)
                    hash = hash * 59 + this.InboundTrustedPending.GetHashCode();
                if (this.TotalConnectedSubtotal != null)
                    hash = hash * 59 + this.TotalConnectedSubtotal.GetHashCode();
                if (this.TotalConnectedPending != null)
                    hash = hash * 59 + this.TotalConnectedPending.GetHashCode();
                if (this.GrandTotal != null)
                    hash = hash * 59 + this.GrandTotal.GetHashCode();
                if (this.TotalTrustedRejected != null)
                    hash = hash * 59 + this.TotalTrustedRejected.GetHashCode();
                if (this.OutboundTotalAccepted != null)
                    hash = hash * 59 + this.OutboundTotalAccepted.GetHashCode();
                if (this.RegisteredConnected != null)
                    hash = hash * 59 + this.RegisteredConnected.GetHashCode();
                if (this.RegisteredAcquainted != null)
                    hash = hash * 59 + this.RegisteredAcquainted.GetHashCode();
                if (this.TotalConnectedAccepted != null)
                    hash = hash * 59 + this.TotalConnectedAccepted.GetHashCode();
                if (this.OutboundTotalSubtotal != null)
                    hash = hash * 59 + this.OutboundTotalSubtotal.GetHashCode();
                if (this.InboundTotalRejected != null)
                    hash = hash * 59 + this.InboundTotalRejected.GetHashCode();
                if (this.TotalConnectedRejected != null)
                    hash = hash * 59 + this.TotalConnectedRejected.GetHashCode();
                if (this.OutboundConnectedRejected != null)
                    hash = hash * 59 + this.OutboundConnectedRejected.GetHashCode();
                if (this.TotalTotalPending != null)
                    hash = hash * 59 + this.TotalTotalPending.GetHashCode();
                if (this.InboundTrustedRejected != null)
                    hash = hash * 59 + this.InboundTrustedRejected.GetHashCode();
                if (this.UnRegisteredEngaged != null)
                    hash = hash * 59 + this.UnRegisteredEngaged.GetHashCode();
                if (this.OutboundTrustedAccepted != null)
                    hash = hash * 59 + this.OutboundTrustedAccepted.GetHashCode();
                if (this.OutboundTrustedSubtotal != null)
                    hash = hash * 59 + this.OutboundTrustedSubtotal.GetHashCode();
                if (this.TotalTotalAccepted != null)
                    hash = hash * 59 + this.TotalTotalAccepted.GetHashCode();
                if (this.TotalTotalSubtotal != null)
                    hash = hash * 59 + this.TotalTotalSubtotal.GetHashCode();
                if (this.InboundTrustedAccepted != null)
                    hash = hash * 59 + this.InboundTrustedAccepted.GetHashCode();
                if (this.OutboundConnectedAccepted != null)
                    hash = hash * 59 + this.OutboundConnectedAccepted.GetHashCode();
                if (this.OutboundTrustedPending != null)
                    hash = hash * 59 + this.OutboundTrustedPending.GetHashCode();
                if (this.TotalTrustedSubtotal != null)
                    hash = hash * 59 + this.TotalTrustedSubtotal.GetHashCode();
                if (this.ConnectivityTotal != null)
                    hash = hash * 59 + this.ConnectivityTotal.GetHashCode();
                if (this.TotalTrustedAccepted != null)
                    hash = hash * 59 + this.TotalTrustedAccepted.GetHashCode();
                if (this.RegisteredTrusted != null)
                    hash = hash * 59 + this.RegisteredTrusted.GetHashCode();
                if (this.RegisteredSubtotal != null)
                    hash = hash * 59 + this.RegisteredSubtotal.GetHashCode();
                if (this.InboundTotalAccepted != null)
                    hash = hash * 59 + this.InboundTotalAccepted.GetHashCode();
                if (this.InboundTotalSubtotal != null)
                    hash = hash * 59 + this.InboundTotalSubtotal.GetHashCode();
                return hash;
            }
        }
    }

}
