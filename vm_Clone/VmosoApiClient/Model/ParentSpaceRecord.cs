/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ParentSpaceRecord
    /// </summary>
    [DataContract]
    public partial class ParentSpaceRecord :  IEquatable<ParentSpaceRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParentSpaceRecord" /> class.
        /// </summary>
        /// <param name="ParentKey">parent key.</param>
        /// <param name="RootName">Corporate parent root name.</param>
        public ParentSpaceRecord(string ParentKey = null, string RootName = null)
        {
            this.ParentKey = ParentKey;
            this.RootName = RootName;
        }
        
        /// <summary>
        /// parent key
        /// </summary>
        /// <value>parent key</value>
        [DataMember(Name="parent_key", EmitDefaultValue=false)]
        public string ParentKey { get; set; }
        /// <summary>
        /// Corporate parent root name
        /// </summary>
        /// <value>Corporate parent root name</value>
        [DataMember(Name="root_name", EmitDefaultValue=false)]
        public string RootName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParentSpaceRecord {\n");
            sb.Append("  ParentKey: ").Append(ParentKey).Append("\n");
            sb.Append("  RootName: ").Append(RootName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ParentSpaceRecord);
        }

        /// <summary>
        /// Returns true if ParentSpaceRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ParentSpaceRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParentSpaceRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ParentKey == other.ParentKey ||
                    this.ParentKey != null &&
                    this.ParentKey.Equals(other.ParentKey)
                ) && 
                (
                    this.RootName == other.RootName ||
                    this.RootName != null &&
                    this.RootName.Equals(other.RootName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ParentKey != null)
                    hash = hash * 59 + this.ParentKey.GetHashCode();
                if (this.RootName != null)
                    hash = hash * 59 + this.RootName.GetHashCode();
                return hash;
            }
        }
    }

}
