/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SetActionNewTimeForListInput
    /// </summary>
    [DataContract]
    public partial class SetActionNewTimeForListInput :  IEquatable<SetActionNewTimeForListInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetActionNewTimeForListInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetActionNewTimeForListInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetActionNewTimeForListInput" /> class.
        /// </summary>
        /// <param name="OptionsV2">OptionsV2 (required).</param>
        /// <param name="Options">Options (required).</param>
        public SetActionNewTimeForListInput(StreamOptionsV2Record OptionsV2 = null, StreamOptionsRecord Options = null)
        {
            // to ensure "OptionsV2" is required (not null)
            if (OptionsV2 == null)
            {
                throw new InvalidDataException("OptionsV2 is a required property for SetActionNewTimeForListInput and cannot be null");
            }
            else
            {
                this.OptionsV2 = OptionsV2;
            }
            // to ensure "Options" is required (not null)
            if (Options == null)
            {
                throw new InvalidDataException("Options is a required property for SetActionNewTimeForListInput and cannot be null");
            }
            else
            {
                this.Options = Options;
            }
        }
        
        /// <summary>
        /// Gets or Sets OptionsV2
        /// </summary>
        [DataMember(Name="optionsV2", EmitDefaultValue=false)]
        public StreamOptionsV2Record OptionsV2 { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public StreamOptionsRecord Options { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetActionNewTimeForListInput {\n");
            sb.Append("  OptionsV2: ").Append(OptionsV2).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SetActionNewTimeForListInput);
        }

        /// <summary>
        /// Returns true if SetActionNewTimeForListInput instances are equal
        /// </summary>
        /// <param name="other">Instance of SetActionNewTimeForListInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetActionNewTimeForListInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OptionsV2 == other.OptionsV2 ||
                    this.OptionsV2 != null &&
                    this.OptionsV2.Equals(other.OptionsV2)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.Equals(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OptionsV2 != null)
                    hash = hash * 59 + this.OptionsV2.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                return hash;
            }
        }
    }

}
