/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// WorkflowLaunchableDesignRecord
    /// </summary>
    [DataContract]
    public partial class WorkflowLaunchableDesignRecord :  IEquatable<WorkflowLaunchableDesignRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowLaunchableDesignRecord" /> class.
        /// </summary>
        /// <param name="DisplayName">Display name of the launchable..</param>
        /// <param name="Meta">Meta.</param>
        /// <param name="Roles">Role assignments. @todo Indication of whether assignment may be overridden?.</param>
        /// <param name="Description">Description of workflow..</param>
        /// <param name="Config">Workflow configuration data. @todo TBD. But for now just say it&#39;s some JSON..</param>
        /// <param name="Status">Status.</param>
        public WorkflowLaunchableDesignRecord(string DisplayName = null, WorkflowMetaRecord Meta = null, List<WorkflowRolesRecord> Roles = null, string Description = null, Object Config = null, bool? Status = null)
        {
            this.DisplayName = DisplayName;
            this.Meta = Meta;
            this.Roles = Roles;
            this.Description = Description;
            this.Config = Config;
            this.Status = Status;
        }
        
        /// <summary>
        /// Display name of the launchable.
        /// </summary>
        /// <value>Display name of the launchable.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public WorkflowMetaRecord Meta { get; set; }
        /// <summary>
        /// Role assignments. @todo Indication of whether assignment may be overridden?
        /// </summary>
        /// <value>Role assignments. @todo Indication of whether assignment may be overridden?</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<WorkflowRolesRecord> Roles { get; set; }
        /// <summary>
        /// Description of workflow.
        /// </summary>
        /// <value>Description of workflow.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Workflow configuration data. @todo TBD. But for now just say it&#39;s some JSON.
        /// </summary>
        /// <value>Workflow configuration data. @todo TBD. But for now just say it&#39;s some JSON.</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Object Config { get; set; }
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowLaunchableDesignRecord {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowLaunchableDesignRecord);
        }

        /// <summary>
        /// Returns true if WorkflowLaunchableDesignRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowLaunchableDesignRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowLaunchableDesignRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Meta == other.Meta ||
                    this.Meta != null &&
                    this.Meta.Equals(other.Meta)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Config == other.Config ||
                    this.Config != null &&
                    this.Config.Equals(other.Config)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Meta != null)
                    hash = hash * 59 + this.Meta.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Config != null)
                    hash = hash * 59 + this.Config.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }
    }

}
