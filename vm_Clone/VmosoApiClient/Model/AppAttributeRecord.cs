/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// AppAttributeRecord
    /// </summary>
    [DataContract]
    public partial class AppAttributeRecord :  IEquatable<AppAttributeRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppAttributeRecord" /> class.
        /// </summary>
        /// <param name="AppType">APP type... currently: iphone ipad android_phone android_tablet.</param>
        /// <param name="Solution">APP solution type... currently: myvmoso vmoso.</param>
        /// <param name="InstalledVersion">Installed version.</param>
        /// <param name="Model">APP MODEL.</param>
        /// <param name="Id">APP ID.</param>
        /// <param name="Type">APP type... currently: iphone ipad android_phone android_tablet.</param>
        /// <param name="InstalledTime">Installed time.</param>
        public AppAttributeRecord(string AppType = null, string Solution = null, string InstalledVersion = null, string Model = null, string Id = null, string Type = null, int? InstalledTime = null)
        {
            this.AppType = AppType;
            this.Solution = Solution;
            this.InstalledVersion = InstalledVersion;
            this.Model = Model;
            this.Id = Id;
            this.Type = Type;
            this.InstalledTime = InstalledTime;
        }
        
        /// <summary>
        /// APP type... currently: iphone ipad android_phone android_tablet
        /// </summary>
        /// <value>APP type... currently: iphone ipad android_phone android_tablet</value>
        [DataMember(Name="app_type", EmitDefaultValue=false)]
        public string AppType { get; set; }
        /// <summary>
        /// APP solution type... currently: myvmoso vmoso
        /// </summary>
        /// <value>APP solution type... currently: myvmoso vmoso</value>
        [DataMember(Name="solution", EmitDefaultValue=false)]
        public string Solution { get; set; }
        /// <summary>
        /// Installed version
        /// </summary>
        /// <value>Installed version</value>
        [DataMember(Name="installed_version", EmitDefaultValue=false)]
        public string InstalledVersion { get; set; }
        /// <summary>
        /// APP MODEL
        /// </summary>
        /// <value>APP MODEL</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// APP ID
        /// </summary>
        /// <value>APP ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// APP type... currently: iphone ipad android_phone android_tablet
        /// </summary>
        /// <value>APP type... currently: iphone ipad android_phone android_tablet</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Installed time
        /// </summary>
        /// <value>Installed time</value>
        [DataMember(Name="installed_time", EmitDefaultValue=false)]
        public int? InstalledTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppAttributeRecord {\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  InstalledVersion: ").Append(InstalledVersion).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InstalledTime: ").Append(InstalledTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AppAttributeRecord);
        }

        /// <summary>
        /// Returns true if AppAttributeRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of AppAttributeRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppAttributeRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AppType == other.AppType ||
                    this.AppType != null &&
                    this.AppType.Equals(other.AppType)
                ) && 
                (
                    this.Solution == other.Solution ||
                    this.Solution != null &&
                    this.Solution.Equals(other.Solution)
                ) && 
                (
                    this.InstalledVersion == other.InstalledVersion ||
                    this.InstalledVersion != null &&
                    this.InstalledVersion.Equals(other.InstalledVersion)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.InstalledTime == other.InstalledTime ||
                    this.InstalledTime != null &&
                    this.InstalledTime.Equals(other.InstalledTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AppType != null)
                    hash = hash * 59 + this.AppType.GetHashCode();
                if (this.Solution != null)
                    hash = hash * 59 + this.Solution.GetHashCode();
                if (this.InstalledVersion != null)
                    hash = hash * 59 + this.InstalledVersion.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.InstalledTime != null)
                    hash = hash * 59 + this.InstalledTime.GetHashCode();
                return hash;
            }
        }
    }

}
