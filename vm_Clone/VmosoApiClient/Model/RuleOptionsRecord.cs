/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// RuleOptionsRecord
    /// </summary>
    [DataContract]
    public partial class RuleOptionsRecord : StreamOptionsRecord,  IEquatable<RuleOptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleOptionsRecord" /> class.
        /// </summary>
        /// <param name="FtsField">search field only full text search.</param>
        /// <param name="TypeFilter">Type filter... types are currently: blog post task community file forum poll wiki folder microblog network user.</param>
        /// <param name="FolderRelationshipFilter">Folder relationship filter: default member.</param>
        /// <param name="MyHotspotsFilter">My hotspots filter - Filters by items in my hotspots.</param>
        /// <param name="Type">Type of record.</param>
        /// <param name="SearchString">Search string Currently not used.</param>
        /// <param name="Spacekey">Stream space key Currently not required to be set, as initially beta 2 has no spaces. Should be set to communitykey or networkkey in the future. Can be set to userkey for now..</param>
        /// <param name="Mode">vmoso myvmoso.</param>
        /// <param name="ParticipantFilter">participant filter.</param>
        /// <param name="LifecycleFilter">Lifecycle filter... currently: open completed declined suspended archived.</param>
        /// <param name="ObjectKey">object key.</param>
        /// <param name="RuleKey">rule key.</param>
        /// <param name="LfbTypeFilter">all chats posts contents tasks spaces individuals groups; events; anchors; links; new open done draft closed suspended archived declined trash files notes.</param>
        /// <param name="MyFoldersFilter">My folders filter - Filters by items in my folders.</param>
        /// <param name="UseRelationshipFilter">Flag to indicate if relationship filter should be used or not in counts apis. This is required as the counts api currently computes counts for all four zones (All/activities/people/spaces). Client options for a given VUT node are same across 4 zones and this will be used to distinguish between people options and other options..</param>
        /// <param name="FilterDominantTime">Filters the objects by DOMINANT_ACTIVITY_TIME when CTF \&quot;All\&quot; option is selected..</param>
        /// <param name="TypeFilters">Array of ObjectTypeRecord specifying types to filter for.</param>
        /// <param name="UserFilter">User filter - Filters by items that given users can see.</param>
        /// <param name="FolderRequestlistFilter">Folder request list filter:.</param>
        /// <param name="FlagFilter">Flag filter... currently: important favorite priority follow refme notFollow followme new.</param>
        /// <param name="SortAttr">Sort attribute... Valid attributes are: OBJECT_ID OBJECT_TYPE OBJECT_CREATOR CREATION_TIME LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME OBJECT_STATUS OBJECT_NAME USER_FAVORITE USER_UNREAD USER_IMPORTANT COMMENT_COUNT ATTACHMENT_COUNT MEMBER_COUNT MEMBERS MEMBER_USER_GROUP MENTIONS TAGS OBJECT_LANG_NAVI_KEY OBJECT_LANG_SORT_KEY RELEVANCE.</param>
        /// <param name="HighlightTag">tag name used for highlight.</param>
        /// <param name="RelevanceFilter">Relevance filter : all     - default combination of most + least most least.</param>
        /// <param name="LocaleFilter">Locale filter - &#39;user&#39; &#39;any&#39; &#39;all&#39; some locale string.</param>
        /// <param name="CardCreatorFilter">Creator filter for Card all     - all card actor can see my      - ByMe: List of BizCards about others that &lt;User-X&gt; has created shared  - ToMe: List of BizCards about &lt;User-X&gt; created or shared by.</param>
        /// <param name="SubtypeFilter">Subtype filter... subtypes are currently: approval action discussion mail fyi chat feedback event announcement document audio image video general.</param>
        /// <param name="LfbZoneFilter">engage connect organize.</param>
        /// <param name="Hotspot">Hotspot key.</param>
        /// <param name="UserStatusFilter">User status filter... currently: open done declined new.</param>
        /// <param name="FolderFilter">Folder filter.</param>
        /// <param name="ListType">engage connect organize tasks posts content chats.</param>
        /// <param name="UpdaterKeyFilter">Updater filter.</param>
        /// <param name="RuleType">rule object subtype.</param>
        /// <param name="StatusFilter">Status filter... currently: online deleted draft.</param>
        /// <param name="Hotspotkey">hotspot key.</param>
        /// <param name="SubFilters">SubFilters.</param>
        /// <param name="UpdateTimeFilter">UpdateTimeFilter.</param>
        /// <param name="CreatorFilter">Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - files not created by this user.</param>
        /// <param name="NamedFolderFilter">Filters by certain named folders recent public feedback announcement mutual  contact-mutual default contacts contact-personal contact-corporate.</param>
        /// <param name="ZoneFilter">Zone filter flag &#39;engage&#39; &#39;organize&#39; &#39;contact&#39;.</param>
        /// <param name="CreatorKeyFilter">Creator filter.</param>
        /// <param name="UnreadFilter">Unread flag filter... currently: all     - default combination of unread + read unread read.</param>
        /// <param name="WallFilter">Wall filter.</param>
        /// <param name="FoldersForStream">insternal usage to mark calling folder API from stream.</param>
        /// <param name="_Namespace">Stream namespace Currently not useful.</param>
        /// <param name="EnterpriseId">Enterprise filter.</param>
        /// <param name="SortDir">Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending.</param>
        /// <param name="FolderLevelFilter">Folder level filter flag &#39;all&#39; or &#39;current&#39; or ....</param>
        /// <param name="SearchField">search field.</param>
        /// <param name="RuleGroup">Rule group.</param>
        /// <param name="PresetRules">Retrieve preset rules.</param>
        public RuleOptionsRecord(string FtsField = null, List<string> TypeFilter = null, List<string> FolderRelationshipFilter = null, bool? MyHotspotsFilter = null, string Type = null, string SearchString = null, string Spacekey = null, string Mode = null, List<string> ParticipantFilter = null, List<string> LifecycleFilter = null, string ObjectKey = null, List<string> RuleKey = null, string LfbTypeFilter = null, bool? MyFoldersFilter = null, bool? UseRelationshipFilter = null, bool? FilterDominantTime = null, List<ObjectTypeRecord> TypeFilters = null, List<string> UserFilter = null, string FolderRequestlistFilter = null, List<string> FlagFilter = null, List<string> SortAttr = null, string HighlightTag = null, string RelevanceFilter = null, List<string> LocaleFilter = null, string CardCreatorFilter = null, List<string> SubtypeFilter = null, string LfbZoneFilter = null, string Hotspot = null, List<string> UserStatusFilter = null, List<string> FolderFilter = null, string ListType = null, List<string> UpdaterKeyFilter = null, string RuleType = null, List<string> StatusFilter = null, string Hotspotkey = null, SubFilterRecord SubFilters = null, TimeRangeRecord UpdateTimeFilter = null, string CreatorFilter = null, string NamedFolderFilter = null, string ZoneFilter = null, List<string> CreatorKeyFilter = null, string UnreadFilter = null, string WallFilter = null, string FoldersForStream = null, string _Namespace = null, List<string> EnterpriseId = null, string SortDir = null, string FolderLevelFilter = null, string SearchField = null, string RuleGroup = null, bool? PresetRules = null)
        {
            this.FtsField = FtsField;
            this.TypeFilter = TypeFilter;
            this.FolderRelationshipFilter = FolderRelationshipFilter;
            this.MyHotspotsFilter = MyHotspotsFilter;
            this.Type = Type;
            this.SearchString = SearchString;
            this.Spacekey = Spacekey;
            this.Mode = Mode;
            this.ParticipantFilter = ParticipantFilter;
            this.LifecycleFilter = LifecycleFilter;
            this.ObjectKey = ObjectKey;
            this.RuleKey = RuleKey;
            this.LfbTypeFilter = LfbTypeFilter;
            this.MyFoldersFilter = MyFoldersFilter;
            this.UseRelationshipFilter = UseRelationshipFilter;
            this.FilterDominantTime = FilterDominantTime;
            this.TypeFilters = TypeFilters;
            this.UserFilter = UserFilter;
            this.FolderRequestlistFilter = FolderRequestlistFilter;
            this.FlagFilter = FlagFilter;
            this.SortAttr = SortAttr;
            this.HighlightTag = HighlightTag;
            this.RelevanceFilter = RelevanceFilter;
            this.LocaleFilter = LocaleFilter;
            this.CardCreatorFilter = CardCreatorFilter;
            this.SubtypeFilter = SubtypeFilter;
            this.LfbZoneFilter = LfbZoneFilter;
            this.Hotspot = Hotspot;
            this.UserStatusFilter = UserStatusFilter;
            this.FolderFilter = FolderFilter;
            this.ListType = ListType;
            this.UpdaterKeyFilter = UpdaterKeyFilter;
            this.RuleType = RuleType;
            this.StatusFilter = StatusFilter;
            this.Hotspotkey = Hotspotkey;
            this.SubFilters = SubFilters;
            this.UpdateTimeFilter = UpdateTimeFilter;
            this.CreatorFilter = CreatorFilter;
            this.NamedFolderFilter = NamedFolderFilter;
            this.ZoneFilter = ZoneFilter;
            this.CreatorKeyFilter = CreatorKeyFilter;
            this.UnreadFilter = UnreadFilter;
            this.WallFilter = WallFilter;
            this.FoldersForStream = FoldersForStream;
            this._Namespace = _Namespace;
            this.EnterpriseId = EnterpriseId;
            this.SortDir = SortDir;
            this.FolderLevelFilter = FolderLevelFilter;
            this.SearchField = SearchField;
            this.RuleGroup = RuleGroup;
            this.PresetRules = PresetRules;
        }
        
        /// <summary>
        /// search field only full text search
        /// </summary>
        /// <value>search field only full text search</value>
        [DataMember(Name="fts_field", EmitDefaultValue=false)]
        public string FtsField { get; set; }
        /// <summary>
        /// Type filter... types are currently: blog post task community file forum poll wiki folder microblog network user
        /// </summary>
        /// <value>Type filter... types are currently: blog post task community file forum poll wiki folder microblog network user</value>
        [DataMember(Name="type_filter", EmitDefaultValue=false)]
        public List<string> TypeFilter { get; set; }
        /// <summary>
        /// Folder relationship filter: default member
        /// </summary>
        /// <value>Folder relationship filter: default member</value>
        [DataMember(Name="folder_relationship_filter", EmitDefaultValue=false)]
        public List<string> FolderRelationshipFilter { get; set; }
        /// <summary>
        /// My hotspots filter - Filters by items in my hotspots
        /// </summary>
        /// <value>My hotspots filter - Filters by items in my hotspots</value>
        [DataMember(Name="my_hotspots_filter", EmitDefaultValue=false)]
        public bool? MyHotspotsFilter { get; set; }
        /// <summary>
        /// Type of record
        /// </summary>
        /// <value>Type of record</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Search string Currently not used
        /// </summary>
        /// <value>Search string Currently not used</value>
        [DataMember(Name="search_string", EmitDefaultValue=false)]
        public string SearchString { get; set; }
        /// <summary>
        /// Stream space key Currently not required to be set, as initially beta 2 has no spaces. Should be set to communitykey or networkkey in the future. Can be set to userkey for now.
        /// </summary>
        /// <value>Stream space key Currently not required to be set, as initially beta 2 has no spaces. Should be set to communitykey or networkkey in the future. Can be set to userkey for now.</value>
        [DataMember(Name="spacekey", EmitDefaultValue=false)]
        public string Spacekey { get; set; }
        /// <summary>
        /// vmoso myvmoso
        /// </summary>
        /// <value>vmoso myvmoso</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }
        /// <summary>
        /// participant filter
        /// </summary>
        /// <value>participant filter</value>
        [DataMember(Name="participantFilter", EmitDefaultValue=false)]
        public List<string> ParticipantFilter { get; set; }
        /// <summary>
        /// Lifecycle filter... currently: open completed declined suspended archived
        /// </summary>
        /// <value>Lifecycle filter... currently: open completed declined suspended archived</value>
        [DataMember(Name="lifecycle_filter", EmitDefaultValue=false)]
        public List<string> LifecycleFilter { get; set; }
        /// <summary>
        /// object key
        /// </summary>
        /// <value>object key</value>
        [DataMember(Name="objectKey", EmitDefaultValue=false)]
        public string ObjectKey { get; set; }
        /// <summary>
        /// rule key
        /// </summary>
        /// <value>rule key</value>
        [DataMember(Name="rule_key", EmitDefaultValue=false)]
        public List<string> RuleKey { get; set; }
        /// <summary>
        /// all chats posts contents tasks spaces individuals groups; events; anchors; links; new open done draft closed suspended archived declined trash files notes
        /// </summary>
        /// <value>all chats posts contents tasks spaces individuals groups; events; anchors; links; new open done draft closed suspended archived declined trash files notes</value>
        [DataMember(Name="lfb_type_filter", EmitDefaultValue=false)]
        public string LfbTypeFilter { get; set; }
        /// <summary>
        /// My folders filter - Filters by items in my folders
        /// </summary>
        /// <value>My folders filter - Filters by items in my folders</value>
        [DataMember(Name="my_folders_filter", EmitDefaultValue=false)]
        public bool? MyFoldersFilter { get; set; }
        /// <summary>
        /// Flag to indicate if relationship filter should be used or not in counts apis. This is required as the counts api currently computes counts for all four zones (All/activities/people/spaces). Client options for a given VUT node are same across 4 zones and this will be used to distinguish between people options and other options.
        /// </summary>
        /// <value>Flag to indicate if relationship filter should be used or not in counts apis. This is required as the counts api currently computes counts for all four zones (All/activities/people/spaces). Client options for a given VUT node are same across 4 zones and this will be used to distinguish between people options and other options.</value>
        [DataMember(Name="useRelationshipFilter", EmitDefaultValue=false)]
        public bool? UseRelationshipFilter { get; set; }
        /// <summary>
        /// Filters the objects by DOMINANT_ACTIVITY_TIME when CTF \&quot;All\&quot; option is selected.
        /// </summary>
        /// <value>Filters the objects by DOMINANT_ACTIVITY_TIME when CTF \&quot;All\&quot; option is selected.</value>
        [DataMember(Name="filterDominantTime", EmitDefaultValue=false)]
        public bool? FilterDominantTime { get; set; }
        /// <summary>
        /// Array of ObjectTypeRecord specifying types to filter for
        /// </summary>
        /// <value>Array of ObjectTypeRecord specifying types to filter for</value>
        [DataMember(Name="type_filters", EmitDefaultValue=false)]
        public List<ObjectTypeRecord> TypeFilters { get; set; }
        /// <summary>
        /// User filter - Filters by items that given users can see
        /// </summary>
        /// <value>User filter - Filters by items that given users can see</value>
        [DataMember(Name="user_filter", EmitDefaultValue=false)]
        public List<string> UserFilter { get; set; }
        /// <summary>
        /// Folder request list filter:
        /// </summary>
        /// <value>Folder request list filter:</value>
        [DataMember(Name="folder_requestlist_filter", EmitDefaultValue=false)]
        public string FolderRequestlistFilter { get; set; }
        /// <summary>
        /// Flag filter... currently: important favorite priority follow refme notFollow followme new
        /// </summary>
        /// <value>Flag filter... currently: important favorite priority follow refme notFollow followme new</value>
        [DataMember(Name="flag_filter", EmitDefaultValue=false)]
        public List<string> FlagFilter { get; set; }
        /// <summary>
        /// Sort attribute... Valid attributes are: OBJECT_ID OBJECT_TYPE OBJECT_CREATOR CREATION_TIME LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME OBJECT_STATUS OBJECT_NAME USER_FAVORITE USER_UNREAD USER_IMPORTANT COMMENT_COUNT ATTACHMENT_COUNT MEMBER_COUNT MEMBERS MEMBER_USER_GROUP MENTIONS TAGS OBJECT_LANG_NAVI_KEY OBJECT_LANG_SORT_KEY RELEVANCE
        /// </summary>
        /// <value>Sort attribute... Valid attributes are: OBJECT_ID OBJECT_TYPE OBJECT_CREATOR CREATION_TIME LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME OBJECT_STATUS OBJECT_NAME USER_FAVORITE USER_UNREAD USER_IMPORTANT COMMENT_COUNT ATTACHMENT_COUNT MEMBER_COUNT MEMBERS MEMBER_USER_GROUP MENTIONS TAGS OBJECT_LANG_NAVI_KEY OBJECT_LANG_SORT_KEY RELEVANCE</value>
        [DataMember(Name="sort_attr", EmitDefaultValue=false)]
        public List<string> SortAttr { get; set; }
        /// <summary>
        /// tag name used for highlight
        /// </summary>
        /// <value>tag name used for highlight</value>
        [DataMember(Name="highlightTag", EmitDefaultValue=false)]
        public string HighlightTag { get; set; }
        /// <summary>
        /// Relevance filter : all     - default combination of most + least most least
        /// </summary>
        /// <value>Relevance filter : all     - default combination of most + least most least</value>
        [DataMember(Name="relevance_filter", EmitDefaultValue=false)]
        public string RelevanceFilter { get; set; }
        /// <summary>
        /// Locale filter - &#39;user&#39; &#39;any&#39; &#39;all&#39; some locale string
        /// </summary>
        /// <value>Locale filter - &#39;user&#39; &#39;any&#39; &#39;all&#39; some locale string</value>
        [DataMember(Name="locale_filter", EmitDefaultValue=false)]
        public List<string> LocaleFilter { get; set; }
        /// <summary>
        /// Creator filter for Card all     - all card actor can see my      - ByMe: List of BizCards about others that &lt;User-X&gt; has created shared  - ToMe: List of BizCards about &lt;User-X&gt; created or shared by
        /// </summary>
        /// <value>Creator filter for Card all     - all card actor can see my      - ByMe: List of BizCards about others that &lt;User-X&gt; has created shared  - ToMe: List of BizCards about &lt;User-X&gt; created or shared by</value>
        [DataMember(Name="card_creator_filter", EmitDefaultValue=false)]
        public string CardCreatorFilter { get; set; }
        /// <summary>
        /// Subtype filter... subtypes are currently: approval action discussion mail fyi chat feedback event announcement document audio image video general
        /// </summary>
        /// <value>Subtype filter... subtypes are currently: approval action discussion mail fyi chat feedback event announcement document audio image video general</value>
        [DataMember(Name="subtype_filter", EmitDefaultValue=false)]
        public List<string> SubtypeFilter { get; set; }
        /// <summary>
        /// engage connect organize
        /// </summary>
        /// <value>engage connect organize</value>
        [DataMember(Name="lfb_zone_filter", EmitDefaultValue=false)]
        public string LfbZoneFilter { get; set; }
        /// <summary>
        /// Hotspot key
        /// </summary>
        /// <value>Hotspot key</value>
        [DataMember(Name="hotspot", EmitDefaultValue=false)]
        public string Hotspot { get; set; }
        /// <summary>
        /// User status filter... currently: open done declined new
        /// </summary>
        /// <value>User status filter... currently: open done declined new</value>
        [DataMember(Name="user_status_filter", EmitDefaultValue=false)]
        public List<string> UserStatusFilter { get; set; }
        /// <summary>
        /// Folder filter
        /// </summary>
        /// <value>Folder filter</value>
        [DataMember(Name="folder_filter", EmitDefaultValue=false)]
        public List<string> FolderFilter { get; set; }
        /// <summary>
        /// engage connect organize tasks posts content chats
        /// </summary>
        /// <value>engage connect organize tasks posts content chats</value>
        [DataMember(Name="listType", EmitDefaultValue=false)]
        public string ListType { get; set; }
        /// <summary>
        /// Updater filter
        /// </summary>
        /// <value>Updater filter</value>
        [DataMember(Name="updater_key_filter", EmitDefaultValue=false)]
        public List<string> UpdaterKeyFilter { get; set; }
        /// <summary>
        /// rule object subtype
        /// </summary>
        /// <value>rule object subtype</value>
        [DataMember(Name="rule_type", EmitDefaultValue=false)]
        public string RuleType { get; set; }
        /// <summary>
        /// Status filter... currently: online deleted draft
        /// </summary>
        /// <value>Status filter... currently: online deleted draft</value>
        [DataMember(Name="status_filter", EmitDefaultValue=false)]
        public List<string> StatusFilter { get; set; }
        /// <summary>
        /// hotspot key
        /// </summary>
        /// <value>hotspot key</value>
        [DataMember(Name="hotspotkey", EmitDefaultValue=false)]
        public string Hotspotkey { get; set; }
        /// <summary>
        /// Gets or Sets SubFilters
        /// </summary>
        [DataMember(Name="subFilters", EmitDefaultValue=false)]
        public SubFilterRecord SubFilters { get; set; }
        /// <summary>
        /// Gets or Sets UpdateTimeFilter
        /// </summary>
        [DataMember(Name="update_time_filter", EmitDefaultValue=false)]
        public TimeRangeRecord UpdateTimeFilter { get; set; }
        /// <summary>
        /// Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - files not created by this user
        /// </summary>
        /// <value>Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - files not created by this user</value>
        [DataMember(Name="creator_filter", EmitDefaultValue=false)]
        public string CreatorFilter { get; set; }
        /// <summary>
        /// Filters by certain named folders recent public feedback announcement mutual  contact-mutual default contacts contact-personal contact-corporate
        /// </summary>
        /// <value>Filters by certain named folders recent public feedback announcement mutual  contact-mutual default contacts contact-personal contact-corporate</value>
        [DataMember(Name="named_folder_filter", EmitDefaultValue=false)]
        public string NamedFolderFilter { get; set; }
        /// <summary>
        /// Zone filter flag &#39;engage&#39; &#39;organize&#39; &#39;contact&#39;
        /// </summary>
        /// <value>Zone filter flag &#39;engage&#39; &#39;organize&#39; &#39;contact&#39;</value>
        [DataMember(Name="zone_filter", EmitDefaultValue=false)]
        public string ZoneFilter { get; set; }
        /// <summary>
        /// Creator filter
        /// </summary>
        /// <value>Creator filter</value>
        [DataMember(Name="creator_key_filter", EmitDefaultValue=false)]
        public List<string> CreatorKeyFilter { get; set; }
        /// <summary>
        /// Unread flag filter... currently: all     - default combination of unread + read unread read
        /// </summary>
        /// <value>Unread flag filter... currently: all     - default combination of unread + read unread read</value>
        [DataMember(Name="unread_filter", EmitDefaultValue=false)]
        public string UnreadFilter { get; set; }
        /// <summary>
        /// Wall filter
        /// </summary>
        /// <value>Wall filter</value>
        [DataMember(Name="wall_filter", EmitDefaultValue=false)]
        public string WallFilter { get; set; }
        /// <summary>
        /// insternal usage to mark calling folder API from stream
        /// </summary>
        /// <value>insternal usage to mark calling folder API from stream</value>
        [DataMember(Name="folders_for_stream", EmitDefaultValue=false)]
        public string FoldersForStream { get; set; }
        /// <summary>
        /// Stream namespace Currently not useful
        /// </summary>
        /// <value>Stream namespace Currently not useful</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }
        /// <summary>
        /// Enterprise filter
        /// </summary>
        /// <value>Enterprise filter</value>
        [DataMember(Name="enterpriseId", EmitDefaultValue=false)]
        public List<string> EnterpriseId { get; set; }
        /// <summary>
        /// Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending
        /// </summary>
        /// <value>Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending</value>
        [DataMember(Name="sort_dir", EmitDefaultValue=false)]
        public string SortDir { get; set; }
        /// <summary>
        /// Folder level filter flag &#39;all&#39; or &#39;current&#39; or ...
        /// </summary>
        /// <value>Folder level filter flag &#39;all&#39; or &#39;current&#39; or ...</value>
        [DataMember(Name="folder_level_filter", EmitDefaultValue=false)]
        public string FolderLevelFilter { get; set; }
        /// <summary>
        /// search field
        /// </summary>
        /// <value>search field</value>
        [DataMember(Name="search_field", EmitDefaultValue=false)]
        public string SearchField { get; set; }
        /// <summary>
        /// Rule group
        /// </summary>
        /// <value>Rule group</value>
        [DataMember(Name="ruleGroup", EmitDefaultValue=false)]
        public string RuleGroup { get; set; }
        /// <summary>
        /// Retrieve preset rules
        /// </summary>
        /// <value>Retrieve preset rules</value>
        [DataMember(Name="preset_rules", EmitDefaultValue=false)]
        public bool? PresetRules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleOptionsRecord {\n");
            sb.Append("  FtsField: ").Append(FtsField).Append("\n");
            sb.Append("  TypeFilter: ").Append(TypeFilter).Append("\n");
            sb.Append("  FolderRelationshipFilter: ").Append(FolderRelationshipFilter).Append("\n");
            sb.Append("  MyHotspotsFilter: ").Append(MyHotspotsFilter).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SearchString: ").Append(SearchString).Append("\n");
            sb.Append("  Spacekey: ").Append(Spacekey).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ParticipantFilter: ").Append(ParticipantFilter).Append("\n");
            sb.Append("  LifecycleFilter: ").Append(LifecycleFilter).Append("\n");
            sb.Append("  ObjectKey: ").Append(ObjectKey).Append("\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("  LfbTypeFilter: ").Append(LfbTypeFilter).Append("\n");
            sb.Append("  MyFoldersFilter: ").Append(MyFoldersFilter).Append("\n");
            sb.Append("  UseRelationshipFilter: ").Append(UseRelationshipFilter).Append("\n");
            sb.Append("  FilterDominantTime: ").Append(FilterDominantTime).Append("\n");
            sb.Append("  TypeFilters: ").Append(TypeFilters).Append("\n");
            sb.Append("  UserFilter: ").Append(UserFilter).Append("\n");
            sb.Append("  FolderRequestlistFilter: ").Append(FolderRequestlistFilter).Append("\n");
            sb.Append("  FlagFilter: ").Append(FlagFilter).Append("\n");
            sb.Append("  SortAttr: ").Append(SortAttr).Append("\n");
            sb.Append("  HighlightTag: ").Append(HighlightTag).Append("\n");
            sb.Append("  RelevanceFilter: ").Append(RelevanceFilter).Append("\n");
            sb.Append("  LocaleFilter: ").Append(LocaleFilter).Append("\n");
            sb.Append("  CardCreatorFilter: ").Append(CardCreatorFilter).Append("\n");
            sb.Append("  SubtypeFilter: ").Append(SubtypeFilter).Append("\n");
            sb.Append("  LfbZoneFilter: ").Append(LfbZoneFilter).Append("\n");
            sb.Append("  Hotspot: ").Append(Hotspot).Append("\n");
            sb.Append("  UserStatusFilter: ").Append(UserStatusFilter).Append("\n");
            sb.Append("  FolderFilter: ").Append(FolderFilter).Append("\n");
            sb.Append("  ListType: ").Append(ListType).Append("\n");
            sb.Append("  UpdaterKeyFilter: ").Append(UpdaterKeyFilter).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  StatusFilter: ").Append(StatusFilter).Append("\n");
            sb.Append("  Hotspotkey: ").Append(Hotspotkey).Append("\n");
            sb.Append("  SubFilters: ").Append(SubFilters).Append("\n");
            sb.Append("  UpdateTimeFilter: ").Append(UpdateTimeFilter).Append("\n");
            sb.Append("  CreatorFilter: ").Append(CreatorFilter).Append("\n");
            sb.Append("  NamedFolderFilter: ").Append(NamedFolderFilter).Append("\n");
            sb.Append("  ZoneFilter: ").Append(ZoneFilter).Append("\n");
            sb.Append("  CreatorKeyFilter: ").Append(CreatorKeyFilter).Append("\n");
            sb.Append("  UnreadFilter: ").Append(UnreadFilter).Append("\n");
            sb.Append("  WallFilter: ").Append(WallFilter).Append("\n");
            sb.Append("  FoldersForStream: ").Append(FoldersForStream).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  EnterpriseId: ").Append(EnterpriseId).Append("\n");
            sb.Append("  SortDir: ").Append(SortDir).Append("\n");
            sb.Append("  FolderLevelFilter: ").Append(FolderLevelFilter).Append("\n");
            sb.Append("  SearchField: ").Append(SearchField).Append("\n");
            sb.Append("  RuleGroup: ").Append(RuleGroup).Append("\n");
            sb.Append("  PresetRules: ").Append(PresetRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuleOptionsRecord);
        }

        /// <summary>
        /// Returns true if RuleOptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleOptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleOptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FtsField == other.FtsField ||
                    this.FtsField != null &&
                    this.FtsField.Equals(other.FtsField)
                ) && 
                (
                    this.TypeFilter == other.TypeFilter ||
                    this.TypeFilter != null &&
                    this.TypeFilter.SequenceEqual(other.TypeFilter)
                ) && 
                (
                    this.FolderRelationshipFilter == other.FolderRelationshipFilter ||
                    this.FolderRelationshipFilter != null &&
                    this.FolderRelationshipFilter.SequenceEqual(other.FolderRelationshipFilter)
                ) && 
                (
                    this.MyHotspotsFilter == other.MyHotspotsFilter ||
                    this.MyHotspotsFilter != null &&
                    this.MyHotspotsFilter.Equals(other.MyHotspotsFilter)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SearchString == other.SearchString ||
                    this.SearchString != null &&
                    this.SearchString.Equals(other.SearchString)
                ) && 
                (
                    this.Spacekey == other.Spacekey ||
                    this.Spacekey != null &&
                    this.Spacekey.Equals(other.Spacekey)
                ) && 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.ParticipantFilter == other.ParticipantFilter ||
                    this.ParticipantFilter != null &&
                    this.ParticipantFilter.SequenceEqual(other.ParticipantFilter)
                ) && 
                (
                    this.LifecycleFilter == other.LifecycleFilter ||
                    this.LifecycleFilter != null &&
                    this.LifecycleFilter.SequenceEqual(other.LifecycleFilter)
                ) && 
                (
                    this.ObjectKey == other.ObjectKey ||
                    this.ObjectKey != null &&
                    this.ObjectKey.Equals(other.ObjectKey)
                ) && 
                (
                    this.RuleKey == other.RuleKey ||
                    this.RuleKey != null &&
                    this.RuleKey.SequenceEqual(other.RuleKey)
                ) && 
                (
                    this.LfbTypeFilter == other.LfbTypeFilter ||
                    this.LfbTypeFilter != null &&
                    this.LfbTypeFilter.Equals(other.LfbTypeFilter)
                ) && 
                (
                    this.MyFoldersFilter == other.MyFoldersFilter ||
                    this.MyFoldersFilter != null &&
                    this.MyFoldersFilter.Equals(other.MyFoldersFilter)
                ) && 
                (
                    this.UseRelationshipFilter == other.UseRelationshipFilter ||
                    this.UseRelationshipFilter != null &&
                    this.UseRelationshipFilter.Equals(other.UseRelationshipFilter)
                ) && 
                (
                    this.FilterDominantTime == other.FilterDominantTime ||
                    this.FilterDominantTime != null &&
                    this.FilterDominantTime.Equals(other.FilterDominantTime)
                ) && 
                (
                    this.TypeFilters == other.TypeFilters ||
                    this.TypeFilters != null &&
                    this.TypeFilters.SequenceEqual(other.TypeFilters)
                ) && 
                (
                    this.UserFilter == other.UserFilter ||
                    this.UserFilter != null &&
                    this.UserFilter.SequenceEqual(other.UserFilter)
                ) && 
                (
                    this.FolderRequestlistFilter == other.FolderRequestlistFilter ||
                    this.FolderRequestlistFilter != null &&
                    this.FolderRequestlistFilter.Equals(other.FolderRequestlistFilter)
                ) && 
                (
                    this.FlagFilter == other.FlagFilter ||
                    this.FlagFilter != null &&
                    this.FlagFilter.SequenceEqual(other.FlagFilter)
                ) && 
                (
                    this.SortAttr == other.SortAttr ||
                    this.SortAttr != null &&
                    this.SortAttr.SequenceEqual(other.SortAttr)
                ) && 
                (
                    this.HighlightTag == other.HighlightTag ||
                    this.HighlightTag != null &&
                    this.HighlightTag.Equals(other.HighlightTag)
                ) && 
                (
                    this.RelevanceFilter == other.RelevanceFilter ||
                    this.RelevanceFilter != null &&
                    this.RelevanceFilter.Equals(other.RelevanceFilter)
                ) && 
                (
                    this.LocaleFilter == other.LocaleFilter ||
                    this.LocaleFilter != null &&
                    this.LocaleFilter.SequenceEqual(other.LocaleFilter)
                ) && 
                (
                    this.CardCreatorFilter == other.CardCreatorFilter ||
                    this.CardCreatorFilter != null &&
                    this.CardCreatorFilter.Equals(other.CardCreatorFilter)
                ) && 
                (
                    this.SubtypeFilter == other.SubtypeFilter ||
                    this.SubtypeFilter != null &&
                    this.SubtypeFilter.SequenceEqual(other.SubtypeFilter)
                ) && 
                (
                    this.LfbZoneFilter == other.LfbZoneFilter ||
                    this.LfbZoneFilter != null &&
                    this.LfbZoneFilter.Equals(other.LfbZoneFilter)
                ) && 
                (
                    this.Hotspot == other.Hotspot ||
                    this.Hotspot != null &&
                    this.Hotspot.Equals(other.Hotspot)
                ) && 
                (
                    this.UserStatusFilter == other.UserStatusFilter ||
                    this.UserStatusFilter != null &&
                    this.UserStatusFilter.SequenceEqual(other.UserStatusFilter)
                ) && 
                (
                    this.FolderFilter == other.FolderFilter ||
                    this.FolderFilter != null &&
                    this.FolderFilter.SequenceEqual(other.FolderFilter)
                ) && 
                (
                    this.ListType == other.ListType ||
                    this.ListType != null &&
                    this.ListType.Equals(other.ListType)
                ) && 
                (
                    this.UpdaterKeyFilter == other.UpdaterKeyFilter ||
                    this.UpdaterKeyFilter != null &&
                    this.UpdaterKeyFilter.SequenceEqual(other.UpdaterKeyFilter)
                ) && 
                (
                    this.RuleType == other.RuleType ||
                    this.RuleType != null &&
                    this.RuleType.Equals(other.RuleType)
                ) && 
                (
                    this.StatusFilter == other.StatusFilter ||
                    this.StatusFilter != null &&
                    this.StatusFilter.SequenceEqual(other.StatusFilter)
                ) && 
                (
                    this.Hotspotkey == other.Hotspotkey ||
                    this.Hotspotkey != null &&
                    this.Hotspotkey.Equals(other.Hotspotkey)
                ) && 
                (
                    this.SubFilters == other.SubFilters ||
                    this.SubFilters != null &&
                    this.SubFilters.Equals(other.SubFilters)
                ) && 
                (
                    this.UpdateTimeFilter == other.UpdateTimeFilter ||
                    this.UpdateTimeFilter != null &&
                    this.UpdateTimeFilter.Equals(other.UpdateTimeFilter)
                ) && 
                (
                    this.CreatorFilter == other.CreatorFilter ||
                    this.CreatorFilter != null &&
                    this.CreatorFilter.Equals(other.CreatorFilter)
                ) && 
                (
                    this.NamedFolderFilter == other.NamedFolderFilter ||
                    this.NamedFolderFilter != null &&
                    this.NamedFolderFilter.Equals(other.NamedFolderFilter)
                ) && 
                (
                    this.ZoneFilter == other.ZoneFilter ||
                    this.ZoneFilter != null &&
                    this.ZoneFilter.Equals(other.ZoneFilter)
                ) && 
                (
                    this.CreatorKeyFilter == other.CreatorKeyFilter ||
                    this.CreatorKeyFilter != null &&
                    this.CreatorKeyFilter.SequenceEqual(other.CreatorKeyFilter)
                ) && 
                (
                    this.UnreadFilter == other.UnreadFilter ||
                    this.UnreadFilter != null &&
                    this.UnreadFilter.Equals(other.UnreadFilter)
                ) && 
                (
                    this.WallFilter == other.WallFilter ||
                    this.WallFilter != null &&
                    this.WallFilter.Equals(other.WallFilter)
                ) && 
                (
                    this.FoldersForStream == other.FoldersForStream ||
                    this.FoldersForStream != null &&
                    this.FoldersForStream.Equals(other.FoldersForStream)
                ) && 
                (
                    this._Namespace == other._Namespace ||
                    this._Namespace != null &&
                    this._Namespace.Equals(other._Namespace)
                ) && 
                (
                    this.EnterpriseId == other.EnterpriseId ||
                    this.EnterpriseId != null &&
                    this.EnterpriseId.SequenceEqual(other.EnterpriseId)
                ) && 
                (
                    this.SortDir == other.SortDir ||
                    this.SortDir != null &&
                    this.SortDir.Equals(other.SortDir)
                ) && 
                (
                    this.FolderLevelFilter == other.FolderLevelFilter ||
                    this.FolderLevelFilter != null &&
                    this.FolderLevelFilter.Equals(other.FolderLevelFilter)
                ) && 
                (
                    this.SearchField == other.SearchField ||
                    this.SearchField != null &&
                    this.SearchField.Equals(other.SearchField)
                ) && 
                (
                    this.RuleGroup == other.RuleGroup ||
                    this.RuleGroup != null &&
                    this.RuleGroup.Equals(other.RuleGroup)
                ) && 
                (
                    this.PresetRules == other.PresetRules ||
                    this.PresetRules != null &&
                    this.PresetRules.Equals(other.PresetRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FtsField != null)
                    hash = hash * 59 + this.FtsField.GetHashCode();
                if (this.TypeFilter != null)
                    hash = hash * 59 + this.TypeFilter.GetHashCode();
                if (this.FolderRelationshipFilter != null)
                    hash = hash * 59 + this.FolderRelationshipFilter.GetHashCode();
                if (this.MyHotspotsFilter != null)
                    hash = hash * 59 + this.MyHotspotsFilter.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SearchString != null)
                    hash = hash * 59 + this.SearchString.GetHashCode();
                if (this.Spacekey != null)
                    hash = hash * 59 + this.Spacekey.GetHashCode();
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.ParticipantFilter != null)
                    hash = hash * 59 + this.ParticipantFilter.GetHashCode();
                if (this.LifecycleFilter != null)
                    hash = hash * 59 + this.LifecycleFilter.GetHashCode();
                if (this.ObjectKey != null)
                    hash = hash * 59 + this.ObjectKey.GetHashCode();
                if (this.RuleKey != null)
                    hash = hash * 59 + this.RuleKey.GetHashCode();
                if (this.LfbTypeFilter != null)
                    hash = hash * 59 + this.LfbTypeFilter.GetHashCode();
                if (this.MyFoldersFilter != null)
                    hash = hash * 59 + this.MyFoldersFilter.GetHashCode();
                if (this.UseRelationshipFilter != null)
                    hash = hash * 59 + this.UseRelationshipFilter.GetHashCode();
                if (this.FilterDominantTime != null)
                    hash = hash * 59 + this.FilterDominantTime.GetHashCode();
                if (this.TypeFilters != null)
                    hash = hash * 59 + this.TypeFilters.GetHashCode();
                if (this.UserFilter != null)
                    hash = hash * 59 + this.UserFilter.GetHashCode();
                if (this.FolderRequestlistFilter != null)
                    hash = hash * 59 + this.FolderRequestlistFilter.GetHashCode();
                if (this.FlagFilter != null)
                    hash = hash * 59 + this.FlagFilter.GetHashCode();
                if (this.SortAttr != null)
                    hash = hash * 59 + this.SortAttr.GetHashCode();
                if (this.HighlightTag != null)
                    hash = hash * 59 + this.HighlightTag.GetHashCode();
                if (this.RelevanceFilter != null)
                    hash = hash * 59 + this.RelevanceFilter.GetHashCode();
                if (this.LocaleFilter != null)
                    hash = hash * 59 + this.LocaleFilter.GetHashCode();
                if (this.CardCreatorFilter != null)
                    hash = hash * 59 + this.CardCreatorFilter.GetHashCode();
                if (this.SubtypeFilter != null)
                    hash = hash * 59 + this.SubtypeFilter.GetHashCode();
                if (this.LfbZoneFilter != null)
                    hash = hash * 59 + this.LfbZoneFilter.GetHashCode();
                if (this.Hotspot != null)
                    hash = hash * 59 + this.Hotspot.GetHashCode();
                if (this.UserStatusFilter != null)
                    hash = hash * 59 + this.UserStatusFilter.GetHashCode();
                if (this.FolderFilter != null)
                    hash = hash * 59 + this.FolderFilter.GetHashCode();
                if (this.ListType != null)
                    hash = hash * 59 + this.ListType.GetHashCode();
                if (this.UpdaterKeyFilter != null)
                    hash = hash * 59 + this.UpdaterKeyFilter.GetHashCode();
                if (this.RuleType != null)
                    hash = hash * 59 + this.RuleType.GetHashCode();
                if (this.StatusFilter != null)
                    hash = hash * 59 + this.StatusFilter.GetHashCode();
                if (this.Hotspotkey != null)
                    hash = hash * 59 + this.Hotspotkey.GetHashCode();
                if (this.SubFilters != null)
                    hash = hash * 59 + this.SubFilters.GetHashCode();
                if (this.UpdateTimeFilter != null)
                    hash = hash * 59 + this.UpdateTimeFilter.GetHashCode();
                if (this.CreatorFilter != null)
                    hash = hash * 59 + this.CreatorFilter.GetHashCode();
                if (this.NamedFolderFilter != null)
                    hash = hash * 59 + this.NamedFolderFilter.GetHashCode();
                if (this.ZoneFilter != null)
                    hash = hash * 59 + this.ZoneFilter.GetHashCode();
                if (this.CreatorKeyFilter != null)
                    hash = hash * 59 + this.CreatorKeyFilter.GetHashCode();
                if (this.UnreadFilter != null)
                    hash = hash * 59 + this.UnreadFilter.GetHashCode();
                if (this.WallFilter != null)
                    hash = hash * 59 + this.WallFilter.GetHashCode();
                if (this.FoldersForStream != null)
                    hash = hash * 59 + this.FoldersForStream.GetHashCode();
                if (this._Namespace != null)
                    hash = hash * 59 + this._Namespace.GetHashCode();
                if (this.EnterpriseId != null)
                    hash = hash * 59 + this.EnterpriseId.GetHashCode();
                if (this.SortDir != null)
                    hash = hash * 59 + this.SortDir.GetHashCode();
                if (this.FolderLevelFilter != null)
                    hash = hash * 59 + this.FolderLevelFilter.GetHashCode();
                if (this.SearchField != null)
                    hash = hash * 59 + this.SearchField.GetHashCode();
                if (this.RuleGroup != null)
                    hash = hash * 59 + this.RuleGroup.GetHashCode();
                if (this.PresetRules != null)
                    hash = hash * 59 + this.PresetRules.GetHashCode();
                return hash;
            }
        }
    }

}
