/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ConfirmSecondaryEmailInput
    /// </summary>
    [DataContract]
    public partial class ConfirmSecondaryEmailInput :  IEquatable<ConfirmSecondaryEmailInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmSecondaryEmailInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfirmSecondaryEmailInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmSecondaryEmailInput" /> class.
        /// </summary>
        /// <param name="SecondEmail"> (required).</param>
        /// <param name="UKey"> (required).</param>
        /// <param name="AccessToken"> (required).</param>
        public ConfirmSecondaryEmailInput(string SecondEmail = null, string UKey = null, string AccessToken = null)
        {
            // to ensure "SecondEmail" is required (not null)
            if (SecondEmail == null)
            {
                throw new InvalidDataException("SecondEmail is a required property for ConfirmSecondaryEmailInput and cannot be null");
            }
            else
            {
                this.SecondEmail = SecondEmail;
            }
            // to ensure "UKey" is required (not null)
            if (UKey == null)
            {
                throw new InvalidDataException("UKey is a required property for ConfirmSecondaryEmailInput and cannot be null");
            }
            else
            {
                this.UKey = UKey;
            }
            // to ensure "AccessToken" is required (not null)
            if (AccessToken == null)
            {
                throw new InvalidDataException("AccessToken is a required property for ConfirmSecondaryEmailInput and cannot be null");
            }
            else
            {
                this.AccessToken = AccessToken;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="secondEmail", EmitDefaultValue=false)]
        public string SecondEmail { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="uKey", EmitDefaultValue=false)]
        public string UKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfirmSecondaryEmailInput {\n");
            sb.Append("  SecondEmail: ").Append(SecondEmail).Append("\n");
            sb.Append("  UKey: ").Append(UKey).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConfirmSecondaryEmailInput);
        }

        /// <summary>
        /// Returns true if ConfirmSecondaryEmailInput instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfirmSecondaryEmailInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfirmSecondaryEmailInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SecondEmail == other.SecondEmail ||
                    this.SecondEmail != null &&
                    this.SecondEmail.Equals(other.SecondEmail)
                ) && 
                (
                    this.UKey == other.UKey ||
                    this.UKey != null &&
                    this.UKey.Equals(other.UKey)
                ) && 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SecondEmail != null)
                    hash = hash * 59 + this.SecondEmail.GetHashCode();
                if (this.UKey != null)
                    hash = hash * 59 + this.UKey.GetHashCode();
                if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                return hash;
            }
        }
    }

}
