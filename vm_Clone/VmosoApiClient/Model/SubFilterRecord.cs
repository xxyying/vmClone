/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SubFilterRecord
    /// </summary>
    [DataContract]
    public partial class SubFilterRecord :  IEquatable<SubFilterRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubFilterRecord" /> class.
        /// </summary>
        /// <param name="Lifecycle">Array of selected lifecycleState.</param>
        /// <param name="Types">Array of selected object types (Tasks/Posts/Chats...)..</param>
        /// <param name="RegistrationStatus">Array of selected registration status.</param>
        /// <param name="Modes">Array of selected modes (RefMe/Followed...)..</param>
        /// <param name="Organization">Array of selected organization.</param>
        /// <param name="ContactType">Array of selected contact type.</param>
        /// <param name="Sharing">Array of selected sharing.</param>
        /// <param name="Relevance">Array of selected relevance.</param>
        /// <param name="Viewing">Array of selected viewing.</param>
        public SubFilterRecord(List<string> Lifecycle = null, List<string> Types = null, List<string> RegistrationStatus = null, List<string> Modes = null, List<string> Organization = null, List<string> ContactType = null, List<string> Sharing = null, List<string> Relevance = null, List<string> Viewing = null)
        {
            this.Lifecycle = Lifecycle;
            this.Types = Types;
            this.RegistrationStatus = RegistrationStatus;
            this.Modes = Modes;
            this.Organization = Organization;
            this.ContactType = ContactType;
            this.Sharing = Sharing;
            this.Relevance = Relevance;
            this.Viewing = Viewing;
        }
        
        /// <summary>
        /// Array of selected lifecycleState
        /// </summary>
        /// <value>Array of selected lifecycleState</value>
        [DataMember(Name="lifecycle", EmitDefaultValue=false)]
        public List<string> Lifecycle { get; set; }
        /// <summary>
        /// Array of selected object types (Tasks/Posts/Chats...).
        /// </summary>
        /// <value>Array of selected object types (Tasks/Posts/Chats...).</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }
        /// <summary>
        /// Array of selected registration status
        /// </summary>
        /// <value>Array of selected registration status</value>
        [DataMember(Name="registrationStatus", EmitDefaultValue=false)]
        public List<string> RegistrationStatus { get; set; }
        /// <summary>
        /// Array of selected modes (RefMe/Followed...).
        /// </summary>
        /// <value>Array of selected modes (RefMe/Followed...).</value>
        [DataMember(Name="modes", EmitDefaultValue=false)]
        public List<string> Modes { get; set; }
        /// <summary>
        /// Array of selected organization
        /// </summary>
        /// <value>Array of selected organization</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public List<string> Organization { get; set; }
        /// <summary>
        /// Array of selected contact type
        /// </summary>
        /// <value>Array of selected contact type</value>
        [DataMember(Name="contactType", EmitDefaultValue=false)]
        public List<string> ContactType { get; set; }
        /// <summary>
        /// Array of selected sharing
        /// </summary>
        /// <value>Array of selected sharing</value>
        [DataMember(Name="sharing", EmitDefaultValue=false)]
        public List<string> Sharing { get; set; }
        /// <summary>
        /// Array of selected relevance
        /// </summary>
        /// <value>Array of selected relevance</value>
        [DataMember(Name="relevance", EmitDefaultValue=false)]
        public List<string> Relevance { get; set; }
        /// <summary>
        /// Array of selected viewing
        /// </summary>
        /// <value>Array of selected viewing</value>
        [DataMember(Name="viewing", EmitDefaultValue=false)]
        public List<string> Viewing { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubFilterRecord {\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  RegistrationStatus: ").Append(RegistrationStatus).Append("\n");
            sb.Append("  Modes: ").Append(Modes).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  Sharing: ").Append(Sharing).Append("\n");
            sb.Append("  Relevance: ").Append(Relevance).Append("\n");
            sb.Append("  Viewing: ").Append(Viewing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubFilterRecord);
        }

        /// <summary>
        /// Returns true if SubFilterRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SubFilterRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubFilterRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Lifecycle == other.Lifecycle ||
                    this.Lifecycle != null &&
                    this.Lifecycle.SequenceEqual(other.Lifecycle)
                ) && 
                (
                    this.Types == other.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(other.Types)
                ) && 
                (
                    this.RegistrationStatus == other.RegistrationStatus ||
                    this.RegistrationStatus != null &&
                    this.RegistrationStatus.SequenceEqual(other.RegistrationStatus)
                ) && 
                (
                    this.Modes == other.Modes ||
                    this.Modes != null &&
                    this.Modes.SequenceEqual(other.Modes)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.SequenceEqual(other.Organization)
                ) && 
                (
                    this.ContactType == other.ContactType ||
                    this.ContactType != null &&
                    this.ContactType.SequenceEqual(other.ContactType)
                ) && 
                (
                    this.Sharing == other.Sharing ||
                    this.Sharing != null &&
                    this.Sharing.SequenceEqual(other.Sharing)
                ) && 
                (
                    this.Relevance == other.Relevance ||
                    this.Relevance != null &&
                    this.Relevance.SequenceEqual(other.Relevance)
                ) && 
                (
                    this.Viewing == other.Viewing ||
                    this.Viewing != null &&
                    this.Viewing.SequenceEqual(other.Viewing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Lifecycle != null)
                    hash = hash * 59 + this.Lifecycle.GetHashCode();
                if (this.Types != null)
                    hash = hash * 59 + this.Types.GetHashCode();
                if (this.RegistrationStatus != null)
                    hash = hash * 59 + this.RegistrationStatus.GetHashCode();
                if (this.Modes != null)
                    hash = hash * 59 + this.Modes.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                if (this.ContactType != null)
                    hash = hash * 59 + this.ContactType.GetHashCode();
                if (this.Sharing != null)
                    hash = hash * 59 + this.Sharing.GetHashCode();
                if (this.Relevance != null)
                    hash = hash * 59 + this.Relevance.GetHashCode();
                if (this.Viewing != null)
                    hash = hash * 59 + this.Viewing.GetHashCode();
                return hash;
            }
        }
    }

}
