/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// PostV2Record
    /// </summary>
    [DataContract]
    public partial class PostV2Record : RateableObjectV2Record,  IEquatable<PostV2Record>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostV2Record" /> class.
        /// </summary>
        /// <param name="HasDraft">the login user has comment drafts in this object..</param>
        /// <param name="Editor">Editor.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="ExplicitReadCount">ExplicitReadCount.</param>
        /// <param name="FavoriteFlag">ImportantFlag..</param>
        /// <param name="Destinations">Destinations where this object has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="RefmeFlag">RefmeFlag..</param>
        /// <param name="Type">Type of document record..</param>
        /// <param name="Locale">Locale language..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="ImportantFlag">ImportantFlag..</param>
        /// <param name="LifecycleState">lifecycle state..</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Type of document record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Key">Key of document record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status..</param>
        /// <param name="HybridFlag">Hybrid Flag..</param>
        /// <param name="Ratings">Ratings.</param>
        /// <param name="CommentCount">Post comment count.</param>
        /// <param name="EditCommentFlag">whether allow member to edit comment..</param>
        /// <param name="Permissions">Permissions granted on document..</param>
        /// <param name="Document">Document.</param>
        /// <param name="ReShareFlag">whether allow member re-share post..</param>
        /// <param name="CommentlistKey">Key of commentlist.</param>
        /// <param name="Text">Post description..</param>
        /// <param name="Title">Post title..</param>
        /// <param name="AnonymousPost">Anonymous flag set true to allow anonymous posted from users..</param>
        /// <param name="AttachmentCount">Post attachment count.</param>
        /// <param name="AnonymousCommentFlag">whether allow Anonymous Comments..</param>
        /// <param name="AddByEmail">whether the post was created by email..</param>
        public PostV2Record(string HasDraft = null, DisplayRecord Editor = null, DisplayRecord Creator = null, ObjectReadInfoRecord ExplicitReadCount = null, string FavoriteFlag = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, bool? RefmeFlag = null, string Type = null, string Locale = null, int? Timeupdated = null, string ImportantFlag = null, string LifecycleState = null, int? Timecreated = null, int? DominantTime = null, string HideFlag = null, string Subtype = null, string PinFlag = null, bool? FollowFlag = null, string Key = null, int? PinTime = null, string Status = null, bool? HybridFlag = null, RatingsRecord Ratings = null, int? CommentCount = null, int? EditCommentFlag = null, List<string> Permissions = null, NoteV2Record Document = null, int? ReShareFlag = null, string CommentlistKey = null, string Text = null, string Title = null, bool? AnonymousPost = null, int? AttachmentCount = null, int? AnonymousCommentFlag = null, bool? AddByEmail = null)
        {
            this.HasDraft = HasDraft;
            this.Editor = Editor;
            this.Creator = Creator;
            this.ExplicitReadCount = ExplicitReadCount;
            this.FavoriteFlag = FavoriteFlag;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.RefmeFlag = RefmeFlag;
            this.Type = Type;
            this.Locale = Locale;
            this.Timeupdated = Timeupdated;
            this.ImportantFlag = ImportantFlag;
            this.LifecycleState = LifecycleState;
            this.Timecreated = Timecreated;
            this.DominantTime = DominantTime;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.HybridFlag = HybridFlag;
            this.Ratings = Ratings;
            this.CommentCount = CommentCount;
            this.EditCommentFlag = EditCommentFlag;
            this.Permissions = Permissions;
            this.Document = Document;
            this.ReShareFlag = ReShareFlag;
            this.CommentlistKey = CommentlistKey;
            this.Text = Text;
            this.Title = Title;
            this.AnonymousPost = AnonymousPost;
            this.AttachmentCount = AttachmentCount;
            this.AnonymousCommentFlag = AnonymousCommentFlag;
            this.AddByEmail = AddByEmail;
        }
        
        /// <summary>
        /// the login user has comment drafts in this object.
        /// </summary>
        /// <value>the login user has comment drafts in this object.</value>
        [DataMember(Name="hasDraft", EmitDefaultValue=false)]
        public string HasDraft { get; set; }
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Gets or Sets ExplicitReadCount
        /// </summary>
        [DataMember(Name="explicitReadCount", EmitDefaultValue=false)]
        public ObjectReadInfoRecord ExplicitReadCount { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public string FavoriteFlag { get; set; }
        /// <summary>
        /// Destinations where this object has been placed.
        /// </summary>
        /// <value>Destinations where this object has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// RefmeFlag.
        /// </summary>
        /// <value>RefmeFlag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Locale language.
        /// </summary>
        /// <value>Locale language.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public string ImportantFlag { get; set; }
        /// <summary>
        /// lifecycle state.
        /// </summary>
        /// <value>lifecycle state.</value>
        [DataMember(Name="lifecycle_state", EmitDefaultValue=false)]
        public string LifecycleState { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public string HideFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public string PinFlag { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Key of document record.
        /// </summary>
        /// <value>Key of document record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status.
        /// </summary>
        /// <value>Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Hybrid Flag.
        /// </summary>
        /// <value>Hybrid Flag.</value>
        [DataMember(Name="hybridFlag", EmitDefaultValue=false)]
        public bool? HybridFlag { get; set; }
        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name="ratings", EmitDefaultValue=false)]
        public RatingsRecord Ratings { get; set; }
        /// <summary>
        /// Post comment count
        /// </summary>
        /// <value>Post comment count</value>
        [DataMember(Name="comment_count", EmitDefaultValue=false)]
        public int? CommentCount { get; set; }
        /// <summary>
        /// whether allow member to edit comment.
        /// </summary>
        /// <value>whether allow member to edit comment.</value>
        [DataMember(Name="editCommentFlag", EmitDefaultValue=false)]
        public int? EditCommentFlag { get; set; }
        /// <summary>
        /// Permissions granted on document.
        /// </summary>
        /// <value>Permissions granted on document.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }
        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=false)]
        public NoteV2Record Document { get; set; }
        /// <summary>
        /// whether allow member re-share post.
        /// </summary>
        /// <value>whether allow member re-share post.</value>
        [DataMember(Name="reShareFlag", EmitDefaultValue=false)]
        public int? ReShareFlag { get; set; }
        /// <summary>
        /// Key of commentlist
        /// </summary>
        /// <value>Key of commentlist</value>
        [DataMember(Name="commentlist_key", EmitDefaultValue=false)]
        public string CommentlistKey { get; set; }
        /// <summary>
        /// Post description.
        /// </summary>
        /// <value>Post description.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Post title.
        /// </summary>
        /// <value>Post title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Anonymous flag set true to allow anonymous posted from users.
        /// </summary>
        /// <value>Anonymous flag set true to allow anonymous posted from users.</value>
        [DataMember(Name="anonymousPost", EmitDefaultValue=false)]
        public bool? AnonymousPost { get; set; }
        /// <summary>
        /// Post attachment count
        /// </summary>
        /// <value>Post attachment count</value>
        [DataMember(Name="attachment_count", EmitDefaultValue=false)]
        public int? AttachmentCount { get; set; }
        /// <summary>
        /// whether allow Anonymous Comments.
        /// </summary>
        /// <value>whether allow Anonymous Comments.</value>
        [DataMember(Name="anonymousCommentFlag", EmitDefaultValue=false)]
        public int? AnonymousCommentFlag { get; set; }
        /// <summary>
        /// whether the post was created by email.
        /// </summary>
        /// <value>whether the post was created by email.</value>
        [DataMember(Name="addByEmail", EmitDefaultValue=false)]
        public bool? AddByEmail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostV2Record {\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExplicitReadCount: ").Append(ExplicitReadCount).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HybridFlag: ").Append(HybridFlag).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  EditCommentFlag: ").Append(EditCommentFlag).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  ReShareFlag: ").Append(ReShareFlag).Append("\n");
            sb.Append("  CommentlistKey: ").Append(CommentlistKey).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AnonymousPost: ").Append(AnonymousPost).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  AnonymousCommentFlag: ").Append(AnonymousCommentFlag).Append("\n");
            sb.Append("  AddByEmail: ").Append(AddByEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PostV2Record);
        }

        /// <summary>
        /// Returns true if PostV2Record instances are equal
        /// </summary>
        /// <param name="other">Instance of PostV2Record to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostV2Record other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasDraft == other.HasDraft ||
                    this.HasDraft != null &&
                    this.HasDraft.Equals(other.HasDraft)
                ) && 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.ExplicitReadCount == other.ExplicitReadCount ||
                    this.ExplicitReadCount != null &&
                    this.ExplicitReadCount.Equals(other.ExplicitReadCount)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.LifecycleState == other.LifecycleState ||
                    this.LifecycleState != null &&
                    this.LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HybridFlag == other.HybridFlag ||
                    this.HybridFlag != null &&
                    this.HybridFlag.Equals(other.HybridFlag)
                ) && 
                (
                    this.Ratings == other.Ratings ||
                    this.Ratings != null &&
                    this.Ratings.Equals(other.Ratings)
                ) && 
                (
                    this.CommentCount == other.CommentCount ||
                    this.CommentCount != null &&
                    this.CommentCount.Equals(other.CommentCount)
                ) && 
                (
                    this.EditCommentFlag == other.EditCommentFlag ||
                    this.EditCommentFlag != null &&
                    this.EditCommentFlag.Equals(other.EditCommentFlag)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    this.Document == other.Document ||
                    this.Document != null &&
                    this.Document.Equals(other.Document)
                ) && 
                (
                    this.ReShareFlag == other.ReShareFlag ||
                    this.ReShareFlag != null &&
                    this.ReShareFlag.Equals(other.ReShareFlag)
                ) && 
                (
                    this.CommentlistKey == other.CommentlistKey ||
                    this.CommentlistKey != null &&
                    this.CommentlistKey.Equals(other.CommentlistKey)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.AnonymousPost == other.AnonymousPost ||
                    this.AnonymousPost != null &&
                    this.AnonymousPost.Equals(other.AnonymousPost)
                ) && 
                (
                    this.AttachmentCount == other.AttachmentCount ||
                    this.AttachmentCount != null &&
                    this.AttachmentCount.Equals(other.AttachmentCount)
                ) && 
                (
                    this.AnonymousCommentFlag == other.AnonymousCommentFlag ||
                    this.AnonymousCommentFlag != null &&
                    this.AnonymousCommentFlag.Equals(other.AnonymousCommentFlag)
                ) && 
                (
                    this.AddByEmail == other.AddByEmail ||
                    this.AddByEmail != null &&
                    this.AddByEmail.Equals(other.AddByEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasDraft != null)
                    hash = hash * 59 + this.HasDraft.GetHashCode();
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.ExplicitReadCount != null)
                    hash = hash * 59 + this.ExplicitReadCount.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.LifecycleState != null)
                    hash = hash * 59 + this.LifecycleState.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HybridFlag != null)
                    hash = hash * 59 + this.HybridFlag.GetHashCode();
                if (this.Ratings != null)
                    hash = hash * 59 + this.Ratings.GetHashCode();
                if (this.CommentCount != null)
                    hash = hash * 59 + this.CommentCount.GetHashCode();
                if (this.EditCommentFlag != null)
                    hash = hash * 59 + this.EditCommentFlag.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.Document != null)
                    hash = hash * 59 + this.Document.GetHashCode();
                if (this.ReShareFlag != null)
                    hash = hash * 59 + this.ReShareFlag.GetHashCode();
                if (this.CommentlistKey != null)
                    hash = hash * 59 + this.CommentlistKey.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.AnonymousPost != null)
                    hash = hash * 59 + this.AnonymousPost.GetHashCode();
                if (this.AttachmentCount != null)
                    hash = hash * 59 + this.AttachmentCount.GetHashCode();
                if (this.AnonymousCommentFlag != null)
                    hash = hash * 59 + this.AnonymousCommentFlag.GetHashCode();
                if (this.AddByEmail != null)
                    hash = hash * 59 + this.AddByEmail.GetHashCode();
                return hash;
            }
        }
    }

}
