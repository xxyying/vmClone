/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// 0 : success, 1 : unknown exception, 113 : user received confirmation email and need confirm, -2 : unknown installation, 100 : username and password unmatch, 116 : password new policy take effect, need reset password for new policy, 101 : password expired, 102 : email not allowed, 107 : received reset email when input wrong username or password, 109 : user not registered, -30 : client invalid, 111 : user disabled
    /// </summary>
    [DataContract]
    public partial class LoginResult :  IEquatable<LoginResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResult" /> class.
        /// </summary>
        /// <param name="Cred">Cred (required).</param>
        /// <param name="WelcomeChatKey"> (required).</param>
        /// <param name="Landing">Landing (required).</param>
        /// <param name="Solution"> (required).</param>
        /// <param name="FirstLogin">first login or not. (required).</param>
        /// <param name="RestrictionFlag">Contact restrict or not (required).</param>
        /// <param name="LandingPage"> (required).</param>
        /// <param name="Hdr">Hdr (required).</param>
        /// <param name="User">User (required).</param>
        /// <param name="CopyEmailSuffix"> (required).</param>
        /// <param name="TaskZoneFlag"> (required).</param>
        public LoginResult(SessionCredentialRecord Cred = null, string WelcomeChatKey = null, Record Landing = null, string Solution = null, bool? FirstLogin = null, int? RestrictionFlag = null, string LandingPage = null, ResponseHeaderRecord Hdr = null, UserObjectRecord User = null, string CopyEmailSuffix = null, bool? TaskZoneFlag = null)
        {
            // to ensure "Cred" is required (not null)
            if (Cred == null)
            {
                throw new InvalidDataException("Cred is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.Cred = Cred;
            }
            // to ensure "WelcomeChatKey" is required (not null)
            if (WelcomeChatKey == null)
            {
                throw new InvalidDataException("WelcomeChatKey is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.WelcomeChatKey = WelcomeChatKey;
            }
            // to ensure "Landing" is required (not null)
            if (Landing == null)
            {
                throw new InvalidDataException("Landing is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.Landing = Landing;
            }
            // to ensure "Solution" is required (not null)
            if (Solution == null)
            {
                throw new InvalidDataException("Solution is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.Solution = Solution;
            }
            // to ensure "FirstLogin" is required (not null)
            if (FirstLogin == null)
            {
                throw new InvalidDataException("FirstLogin is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.FirstLogin = FirstLogin;
            }
            // to ensure "RestrictionFlag" is required (not null)
            if (RestrictionFlag == null)
            {
                throw new InvalidDataException("RestrictionFlag is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.RestrictionFlag = RestrictionFlag;
            }
            // to ensure "LandingPage" is required (not null)
            if (LandingPage == null)
            {
                throw new InvalidDataException("LandingPage is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.LandingPage = LandingPage;
            }
            // to ensure "Hdr" is required (not null)
            if (Hdr == null)
            {
                throw new InvalidDataException("Hdr is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.Hdr = Hdr;
            }
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.User = User;
            }
            // to ensure "CopyEmailSuffix" is required (not null)
            if (CopyEmailSuffix == null)
            {
                throw new InvalidDataException("CopyEmailSuffix is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.CopyEmailSuffix = CopyEmailSuffix;
            }
            // to ensure "TaskZoneFlag" is required (not null)
            if (TaskZoneFlag == null)
            {
                throw new InvalidDataException("TaskZoneFlag is a required property for LoginResult and cannot be null");
            }
            else
            {
                this.TaskZoneFlag = TaskZoneFlag;
            }
        }
        
        /// <summary>
        /// Gets or Sets Cred
        /// </summary>
        [DataMember(Name="cred", EmitDefaultValue=false)]
        public SessionCredentialRecord Cred { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="welcomeChatKey", EmitDefaultValue=false)]
        public string WelcomeChatKey { get; set; }
        /// <summary>
        /// Gets or Sets Landing
        /// </summary>
        [DataMember(Name="landing", EmitDefaultValue=false)]
        public Record Landing { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="solution", EmitDefaultValue=false)]
        public string Solution { get; set; }
        /// <summary>
        /// first login or not.
        /// </summary>
        /// <value>first login or not.</value>
        [DataMember(Name="firstLogin", EmitDefaultValue=false)]
        public bool? FirstLogin { get; set; }
        /// <summary>
        /// Contact restrict or not
        /// </summary>
        /// <value>Contact restrict or not</value>
        [DataMember(Name="restrictionFlag", EmitDefaultValue=false)]
        public int? RestrictionFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="landingPage", EmitDefaultValue=false)]
        public string LandingPage { get; set; }
        /// <summary>
        /// Gets or Sets Hdr
        /// </summary>
        [DataMember(Name="_hdr", EmitDefaultValue=false)]
        public ResponseHeaderRecord Hdr { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserObjectRecord User { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="copyEmailSuffix", EmitDefaultValue=false)]
        public string CopyEmailSuffix { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="taskZoneFlag", EmitDefaultValue=false)]
        public bool? TaskZoneFlag { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginResult {\n");
            sb.Append("  Cred: ").Append(Cred).Append("\n");
            sb.Append("  WelcomeChatKey: ").Append(WelcomeChatKey).Append("\n");
            sb.Append("  Landing: ").Append(Landing).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  FirstLogin: ").Append(FirstLogin).Append("\n");
            sb.Append("  RestrictionFlag: ").Append(RestrictionFlag).Append("\n");
            sb.Append("  LandingPage: ").Append(LandingPage).Append("\n");
            sb.Append("  Hdr: ").Append(Hdr).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CopyEmailSuffix: ").Append(CopyEmailSuffix).Append("\n");
            sb.Append("  TaskZoneFlag: ").Append(TaskZoneFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LoginResult);
        }

        /// <summary>
        /// Returns true if LoginResult instances are equal
        /// </summary>
        /// <param name="other">Instance of LoginResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cred == other.Cred ||
                    this.Cred != null &&
                    this.Cred.Equals(other.Cred)
                ) && 
                (
                    this.WelcomeChatKey == other.WelcomeChatKey ||
                    this.WelcomeChatKey != null &&
                    this.WelcomeChatKey.Equals(other.WelcomeChatKey)
                ) && 
                (
                    this.Landing == other.Landing ||
                    this.Landing != null &&
                    this.Landing.Equals(other.Landing)
                ) && 
                (
                    this.Solution == other.Solution ||
                    this.Solution != null &&
                    this.Solution.Equals(other.Solution)
                ) && 
                (
                    this.FirstLogin == other.FirstLogin ||
                    this.FirstLogin != null &&
                    this.FirstLogin.Equals(other.FirstLogin)
                ) && 
                (
                    this.RestrictionFlag == other.RestrictionFlag ||
                    this.RestrictionFlag != null &&
                    this.RestrictionFlag.Equals(other.RestrictionFlag)
                ) && 
                (
                    this.LandingPage == other.LandingPage ||
                    this.LandingPage != null &&
                    this.LandingPage.Equals(other.LandingPage)
                ) && 
                (
                    this.Hdr == other.Hdr ||
                    this.Hdr != null &&
                    this.Hdr.Equals(other.Hdr)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.CopyEmailSuffix == other.CopyEmailSuffix ||
                    this.CopyEmailSuffix != null &&
                    this.CopyEmailSuffix.Equals(other.CopyEmailSuffix)
                ) && 
                (
                    this.TaskZoneFlag == other.TaskZoneFlag ||
                    this.TaskZoneFlag != null &&
                    this.TaskZoneFlag.Equals(other.TaskZoneFlag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cred != null)
                    hash = hash * 59 + this.Cred.GetHashCode();
                if (this.WelcomeChatKey != null)
                    hash = hash * 59 + this.WelcomeChatKey.GetHashCode();
                if (this.Landing != null)
                    hash = hash * 59 + this.Landing.GetHashCode();
                if (this.Solution != null)
                    hash = hash * 59 + this.Solution.GetHashCode();
                if (this.FirstLogin != null)
                    hash = hash * 59 + this.FirstLogin.GetHashCode();
                if (this.RestrictionFlag != null)
                    hash = hash * 59 + this.RestrictionFlag.GetHashCode();
                if (this.LandingPage != null)
                    hash = hash * 59 + this.LandingPage.GetHashCode();
                if (this.Hdr != null)
                    hash = hash * 59 + this.Hdr.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.CopyEmailSuffix != null)
                    hash = hash * 59 + this.CopyEmailSuffix.GetHashCode();
                if (this.TaskZoneFlag != null)
                    hash = hash * 59 + this.TaskZoneFlag.GetHashCode();
                return hash;
            }
        }
    }

}
