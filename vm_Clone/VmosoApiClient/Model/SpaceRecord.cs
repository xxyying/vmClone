/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SpaceRecord
    /// </summary>
    [DataContract]
    public partial class SpaceRecord : BasicRecord,  IEquatable<SpaceRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceRecord" /> class.
        /// </summary>
        /// <param name="Name">Name of space record..</param>
        /// <param name="NaviKey">Navigation Key ; store navigation group letter.</param>
        /// <param name="Key">Key of Space record..</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="Destinations">Destinations where this space has been placed..</param>
        /// <param name="Description">Description of space record..</param>
        /// <param name="Type">Type of Space record..</param>
        /// <param name="SpaceACL">SpaceACL.</param>
        /// <param name="Status">Status of space record..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        public SpaceRecord(string Name = null, string NaviKey = null, string Key = null, DisplayRecord Creator = null, int? Timecreated = null, List<DisplayRecord> Destinations = null, string Description = null, string Type = null, SpaceACLRecord SpaceACL = null, string Status = null, int? Timeupdated = null)
        {
            this.Name = Name;
            this.NaviKey = NaviKey;
            this.Key = Key;
            this.Creator = Creator;
            this.Timecreated = Timecreated;
            this.Destinations = Destinations;
            this.Description = Description;
            this.Type = Type;
            this.SpaceACL = SpaceACL;
            this.Status = Status;
            this.Timeupdated = Timeupdated;
        }
        
        /// <summary>
        /// Name of space record.
        /// </summary>
        /// <value>Name of space record.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Navigation Key ; store navigation group letter
        /// </summary>
        /// <value>Navigation Key ; store navigation group letter</value>
        [DataMember(Name="naviKey", EmitDefaultValue=false)]
        public string NaviKey { get; set; }
        /// <summary>
        /// Key of Space record.
        /// </summary>
        /// <value>Key of Space record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Destinations where this space has been placed.
        /// </summary>
        /// <value>Destinations where this space has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// Description of space record.
        /// </summary>
        /// <value>Description of space record.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Type of Space record.
        /// </summary>
        /// <value>Type of Space record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets SpaceACL
        /// </summary>
        [DataMember(Name="spaceACL", EmitDefaultValue=false)]
        public SpaceACLRecord SpaceACL { get; set; }
        /// <summary>
        /// Status of space record.
        /// </summary>
        /// <value>Status of space record.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceRecord {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NaviKey: ").Append(NaviKey).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SpaceACL: ").Append(SpaceACL).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpaceRecord);
        }

        /// <summary>
        /// Returns true if SpaceRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SpaceRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NaviKey == other.NaviKey ||
                    this.NaviKey != null &&
                    this.NaviKey.Equals(other.NaviKey)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SpaceACL == other.SpaceACL ||
                    this.SpaceACL != null &&
                    this.SpaceACL.Equals(other.SpaceACL)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NaviKey != null)
                    hash = hash * 59 + this.NaviKey.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SpaceACL != null)
                    hash = hash * 59 + this.SpaceACL.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                return hash;
            }
        }
    }

}
