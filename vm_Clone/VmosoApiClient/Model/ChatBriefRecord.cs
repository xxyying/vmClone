/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ChatBriefRecord
    /// </summary>
    [DataContract]
    public partial class ChatBriefRecord :  IEquatable<ChatBriefRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBriefRecord" /> class.
        /// </summary>
        /// <param name="AttachmentsCount">.</param>
        /// <param name="TaskRecord">TaskRecord.</param>
        /// <param name="CcersCount">.</param>
        /// <param name="AssigneesCount">.</param>
        /// <param name="Acl">Acl.</param>
        /// <param name="FoldersCount">.</param>
        /// <param name="AllParticipantsCount">.</param>
        public ChatBriefRecord(int? AttachmentsCount = null, ChatV2Record TaskRecord = null, int? CcersCount = null, int? AssigneesCount = null, TaskACLRecord Acl = null, int? FoldersCount = null, int? AllParticipantsCount = null)
        {
            this.AttachmentsCount = AttachmentsCount;
            this.TaskRecord = TaskRecord;
            this.CcersCount = CcersCount;
            this.AssigneesCount = AssigneesCount;
            this.Acl = Acl;
            this.FoldersCount = FoldersCount;
            this.AllParticipantsCount = AllParticipantsCount;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="attachmentsCount", EmitDefaultValue=false)]
        public int? AttachmentsCount { get; set; }
        /// <summary>
        /// Gets or Sets TaskRecord
        /// </summary>
        [DataMember(Name="taskRecord", EmitDefaultValue=false)]
        public ChatV2Record TaskRecord { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ccersCount", EmitDefaultValue=false)]
        public int? CcersCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="assigneesCount", EmitDefaultValue=false)]
        public int? AssigneesCount { get; set; }
        /// <summary>
        /// Gets or Sets Acl
        /// </summary>
        [DataMember(Name="acl", EmitDefaultValue=false)]
        public TaskACLRecord Acl { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="foldersCount", EmitDefaultValue=false)]
        public int? FoldersCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allParticipantsCount", EmitDefaultValue=false)]
        public int? AllParticipantsCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChatBriefRecord {\n");
            sb.Append("  AttachmentsCount: ").Append(AttachmentsCount).Append("\n");
            sb.Append("  TaskRecord: ").Append(TaskRecord).Append("\n");
            sb.Append("  CcersCount: ").Append(CcersCount).Append("\n");
            sb.Append("  AssigneesCount: ").Append(AssigneesCount).Append("\n");
            sb.Append("  Acl: ").Append(Acl).Append("\n");
            sb.Append("  FoldersCount: ").Append(FoldersCount).Append("\n");
            sb.Append("  AllParticipantsCount: ").Append(AllParticipantsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChatBriefRecord);
        }

        /// <summary>
        /// Returns true if ChatBriefRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ChatBriefRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatBriefRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AttachmentsCount == other.AttachmentsCount ||
                    this.AttachmentsCount != null &&
                    this.AttachmentsCount.Equals(other.AttachmentsCount)
                ) && 
                (
                    this.TaskRecord == other.TaskRecord ||
                    this.TaskRecord != null &&
                    this.TaskRecord.Equals(other.TaskRecord)
                ) && 
                (
                    this.CcersCount == other.CcersCount ||
                    this.CcersCount != null &&
                    this.CcersCount.Equals(other.CcersCount)
                ) && 
                (
                    this.AssigneesCount == other.AssigneesCount ||
                    this.AssigneesCount != null &&
                    this.AssigneesCount.Equals(other.AssigneesCount)
                ) && 
                (
                    this.Acl == other.Acl ||
                    this.Acl != null &&
                    this.Acl.Equals(other.Acl)
                ) && 
                (
                    this.FoldersCount == other.FoldersCount ||
                    this.FoldersCount != null &&
                    this.FoldersCount.Equals(other.FoldersCount)
                ) && 
                (
                    this.AllParticipantsCount == other.AllParticipantsCount ||
                    this.AllParticipantsCount != null &&
                    this.AllParticipantsCount.Equals(other.AllParticipantsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AttachmentsCount != null)
                    hash = hash * 59 + this.AttachmentsCount.GetHashCode();
                if (this.TaskRecord != null)
                    hash = hash * 59 + this.TaskRecord.GetHashCode();
                if (this.CcersCount != null)
                    hash = hash * 59 + this.CcersCount.GetHashCode();
                if (this.AssigneesCount != null)
                    hash = hash * 59 + this.AssigneesCount.GetHashCode();
                if (this.Acl != null)
                    hash = hash * 59 + this.Acl.GetHashCode();
                if (this.FoldersCount != null)
                    hash = hash * 59 + this.FoldersCount.GetHashCode();
                if (this.AllParticipantsCount != null)
                    hash = hash * 59 + this.AllParticipantsCount.GetHashCode();
                return hash;
            }
        }
    }

}
