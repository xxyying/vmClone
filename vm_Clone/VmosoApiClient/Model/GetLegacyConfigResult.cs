/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetLegacyConfigResult :  IEquatable<GetLegacyConfigResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLegacyConfigResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetLegacyConfigResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLegacyConfigResult" /> class.
        /// </summary>
        /// <param name="Signature"> (required).</param>
        /// <param name="PushUrl"> (required).</param>
        /// <param name="ServerProtocol"> (required).</param>
        /// <param name="PushUrlLegacy"> (required).</param>
        /// <param name="Hdr">Hdr (required).</param>
        /// <param name="ServerProtocolLegacy"> (required).</param>
        public GetLegacyConfigResult(string Signature = null, string PushUrl = null, string ServerProtocol = null, string PushUrlLegacy = null, ResponseHeaderRecord Hdr = null, string ServerProtocolLegacy = null)
        {
            // to ensure "Signature" is required (not null)
            if (Signature == null)
            {
                throw new InvalidDataException("Signature is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.Signature = Signature;
            }
            // to ensure "PushUrl" is required (not null)
            if (PushUrl == null)
            {
                throw new InvalidDataException("PushUrl is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.PushUrl = PushUrl;
            }
            // to ensure "ServerProtocol" is required (not null)
            if (ServerProtocol == null)
            {
                throw new InvalidDataException("ServerProtocol is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.ServerProtocol = ServerProtocol;
            }
            // to ensure "PushUrlLegacy" is required (not null)
            if (PushUrlLegacy == null)
            {
                throw new InvalidDataException("PushUrlLegacy is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.PushUrlLegacy = PushUrlLegacy;
            }
            // to ensure "Hdr" is required (not null)
            if (Hdr == null)
            {
                throw new InvalidDataException("Hdr is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.Hdr = Hdr;
            }
            // to ensure "ServerProtocolLegacy" is required (not null)
            if (ServerProtocolLegacy == null)
            {
                throw new InvalidDataException("ServerProtocolLegacy is a required property for GetLegacyConfigResult and cannot be null");
            }
            else
            {
                this.ServerProtocolLegacy = ServerProtocolLegacy;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="push_url", EmitDefaultValue=false)]
        public string PushUrl { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="serverProtocol", EmitDefaultValue=false)]
        public string ServerProtocol { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="push_url_legacy", EmitDefaultValue=false)]
        public string PushUrlLegacy { get; set; }
        /// <summary>
        /// Gets or Sets Hdr
        /// </summary>
        [DataMember(Name="_hdr", EmitDefaultValue=false)]
        public ResponseHeaderRecord Hdr { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="serverProtocol_legacy", EmitDefaultValue=false)]
        public string ServerProtocolLegacy { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetLegacyConfigResult {\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  PushUrl: ").Append(PushUrl).Append("\n");
            sb.Append("  ServerProtocol: ").Append(ServerProtocol).Append("\n");
            sb.Append("  PushUrlLegacy: ").Append(PushUrlLegacy).Append("\n");
            sb.Append("  Hdr: ").Append(Hdr).Append("\n");
            sb.Append("  ServerProtocolLegacy: ").Append(ServerProtocolLegacy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetLegacyConfigResult);
        }

        /// <summary>
        /// Returns true if GetLegacyConfigResult instances are equal
        /// </summary>
        /// <param name="other">Instance of GetLegacyConfigResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetLegacyConfigResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Signature == other.Signature ||
                    this.Signature != null &&
                    this.Signature.Equals(other.Signature)
                ) && 
                (
                    this.PushUrl == other.PushUrl ||
                    this.PushUrl != null &&
                    this.PushUrl.Equals(other.PushUrl)
                ) && 
                (
                    this.ServerProtocol == other.ServerProtocol ||
                    this.ServerProtocol != null &&
                    this.ServerProtocol.Equals(other.ServerProtocol)
                ) && 
                (
                    this.PushUrlLegacy == other.PushUrlLegacy ||
                    this.PushUrlLegacy != null &&
                    this.PushUrlLegacy.Equals(other.PushUrlLegacy)
                ) && 
                (
                    this.Hdr == other.Hdr ||
                    this.Hdr != null &&
                    this.Hdr.Equals(other.Hdr)
                ) && 
                (
                    this.ServerProtocolLegacy == other.ServerProtocolLegacy ||
                    this.ServerProtocolLegacy != null &&
                    this.ServerProtocolLegacy.Equals(other.ServerProtocolLegacy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Signature != null)
                    hash = hash * 59 + this.Signature.GetHashCode();
                if (this.PushUrl != null)
                    hash = hash * 59 + this.PushUrl.GetHashCode();
                if (this.ServerProtocol != null)
                    hash = hash * 59 + this.ServerProtocol.GetHashCode();
                if (this.PushUrlLegacy != null)
                    hash = hash * 59 + this.PushUrlLegacy.GetHashCode();
                if (this.Hdr != null)
                    hash = hash * 59 + this.Hdr.GetHashCode();
                if (this.ServerProtocolLegacy != null)
                    hash = hash * 59 + this.ServerProtocolLegacy.GetHashCode();
                return hash;
            }
        }
    }

}
