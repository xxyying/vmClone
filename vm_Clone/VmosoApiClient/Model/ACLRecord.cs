/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ACLRecord
    /// </summary>
    [DataContract]
    public partial class ACLRecord :  IEquatable<ACLRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ACLRecord" /> class.
        /// </summary>
        /// <param name="CanView">Determine if user can view object.</param>
        /// <param name="FileInSpaceID">Determine if file exist with in calling space If true, then set to space ID else false, then set to zero.</param>
        /// <param name="CanEdit">Determine if user has edit access.</param>
        /// <param name="CanShare">Determine if user can share object.</param>
        /// <param name="CanDownload">Determine if user can download object.</param>
        /// <param name="CanDelete">Determine if user has edit delete.</param>
        public ACLRecord(bool? CanView = null, int? FileInSpaceID = null, bool? CanEdit = null, bool? CanShare = null, bool? CanDownload = null, bool? CanDelete = null)
        {
            this.CanView = CanView;
            this.FileInSpaceID = FileInSpaceID;
            this.CanEdit = CanEdit;
            this.CanShare = CanShare;
            this.CanDownload = CanDownload;
            this.CanDelete = CanDelete;
        }
        
        /// <summary>
        /// Determine if user can view object
        /// </summary>
        /// <value>Determine if user can view object</value>
        [DataMember(Name="canView", EmitDefaultValue=false)]
        public bool? CanView { get; set; }
        /// <summary>
        /// Determine if file exist with in calling space If true, then set to space ID else false, then set to zero
        /// </summary>
        /// <value>Determine if file exist with in calling space If true, then set to space ID else false, then set to zero</value>
        [DataMember(Name="fileInSpaceID", EmitDefaultValue=false)]
        public int? FileInSpaceID { get; set; }
        /// <summary>
        /// Determine if user has edit access
        /// </summary>
        /// <value>Determine if user has edit access</value>
        [DataMember(Name="canEdit", EmitDefaultValue=false)]
        public bool? CanEdit { get; set; }
        /// <summary>
        /// Determine if user can share object
        /// </summary>
        /// <value>Determine if user can share object</value>
        [DataMember(Name="canShare", EmitDefaultValue=false)]
        public bool? CanShare { get; set; }
        /// <summary>
        /// Determine if user can download object
        /// </summary>
        /// <value>Determine if user can download object</value>
        [DataMember(Name="canDownload", EmitDefaultValue=false)]
        public bool? CanDownload { get; set; }
        /// <summary>
        /// Determine if user has edit delete
        /// </summary>
        /// <value>Determine if user has edit delete</value>
        [DataMember(Name="canDelete", EmitDefaultValue=false)]
        public bool? CanDelete { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ACLRecord {\n");
            sb.Append("  CanView: ").Append(CanView).Append("\n");
            sb.Append("  FileInSpaceID: ").Append(FileInSpaceID).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  CanShare: ").Append(CanShare).Append("\n");
            sb.Append("  CanDownload: ").Append(CanDownload).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ACLRecord);
        }

        /// <summary>
        /// Returns true if ACLRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ACLRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ACLRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CanView == other.CanView ||
                    this.CanView != null &&
                    this.CanView.Equals(other.CanView)
                ) && 
                (
                    this.FileInSpaceID == other.FileInSpaceID ||
                    this.FileInSpaceID != null &&
                    this.FileInSpaceID.Equals(other.FileInSpaceID)
                ) && 
                (
                    this.CanEdit == other.CanEdit ||
                    this.CanEdit != null &&
                    this.CanEdit.Equals(other.CanEdit)
                ) && 
                (
                    this.CanShare == other.CanShare ||
                    this.CanShare != null &&
                    this.CanShare.Equals(other.CanShare)
                ) && 
                (
                    this.CanDownload == other.CanDownload ||
                    this.CanDownload != null &&
                    this.CanDownload.Equals(other.CanDownload)
                ) && 
                (
                    this.CanDelete == other.CanDelete ||
                    this.CanDelete != null &&
                    this.CanDelete.Equals(other.CanDelete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CanView != null)
                    hash = hash * 59 + this.CanView.GetHashCode();
                if (this.FileInSpaceID != null)
                    hash = hash * 59 + this.FileInSpaceID.GetHashCode();
                if (this.CanEdit != null)
                    hash = hash * 59 + this.CanEdit.GetHashCode();
                if (this.CanShare != null)
                    hash = hash * 59 + this.CanShare.GetHashCode();
                if (this.CanDownload != null)
                    hash = hash * 59 + this.CanDownload.GetHashCode();
                if (this.CanDelete != null)
                    hash = hash * 59 + this.CanDelete.GetHashCode();
                return hash;
            }
        }
    }

}
