/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ResponseHeaderRecord
    /// </summary>
    [DataContract]
    public partial class ResponseHeaderRecord :  IEquatable<ResponseHeaderRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseHeaderRecord" /> class.
        /// </summary>
        /// <param name="Msg">Information or error message..</param>
        /// <param name="Rc">Result code..</param>
        /// <param name="Tstamp">Result time stamp..</param>
        /// <param name="Diag">Disagnostic information provided by the server..</param>
        /// <param name="Errinfo">Error detailed information..</param>
        /// <param name="Updated">Site update timestamp..</param>
        /// <param name="Cxid">Client transaction ID supplied in request header..</param>
        public ResponseHeaderRecord(string Msg = null, int? Rc = null, int? Tstamp = null, List<Object> Diag = null, List<ErrorDetailRecord> Errinfo = null, int? Updated = null, string Cxid = null)
        {
            this.Msg = Msg;
            this.Rc = Rc;
            this.Tstamp = Tstamp;
            this.Diag = Diag;
            this.Errinfo = Errinfo;
            this.Updated = Updated;
            this.Cxid = Cxid;
        }
        
        /// <summary>
        /// Information or error message.
        /// </summary>
        /// <value>Information or error message.</value>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }
        /// <summary>
        /// Result code.
        /// </summary>
        /// <value>Result code.</value>
        [DataMember(Name="rc", EmitDefaultValue=false)]
        public int? Rc { get; set; }
        /// <summary>
        /// Result time stamp.
        /// </summary>
        /// <value>Result time stamp.</value>
        [DataMember(Name="tstamp", EmitDefaultValue=false)]
        public int? Tstamp { get; set; }
        /// <summary>
        /// Disagnostic information provided by the server.
        /// </summary>
        /// <value>Disagnostic information provided by the server.</value>
        [DataMember(Name="diag", EmitDefaultValue=false)]
        public List<Object> Diag { get; set; }
        /// <summary>
        /// Error detailed information.
        /// </summary>
        /// <value>Error detailed information.</value>
        [DataMember(Name="errinfo", EmitDefaultValue=false)]
        public List<ErrorDetailRecord> Errinfo { get; set; }
        /// <summary>
        /// Site update timestamp.
        /// </summary>
        /// <value>Site update timestamp.</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public int? Updated { get; set; }
        /// <summary>
        /// Client transaction ID supplied in request header.
        /// </summary>
        /// <value>Client transaction ID supplied in request header.</value>
        [DataMember(Name="cxid", EmitDefaultValue=false)]
        public string Cxid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseHeaderRecord {\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Rc: ").Append(Rc).Append("\n");
            sb.Append("  Tstamp: ").Append(Tstamp).Append("\n");
            sb.Append("  Diag: ").Append(Diag).Append("\n");
            sb.Append("  Errinfo: ").Append(Errinfo).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Cxid: ").Append(Cxid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ResponseHeaderRecord);
        }

        /// <summary>
        /// Returns true if ResponseHeaderRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseHeaderRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseHeaderRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Msg == other.Msg ||
                    this.Msg != null &&
                    this.Msg.Equals(other.Msg)
                ) && 
                (
                    this.Rc == other.Rc ||
                    this.Rc != null &&
                    this.Rc.Equals(other.Rc)
                ) && 
                (
                    this.Tstamp == other.Tstamp ||
                    this.Tstamp != null &&
                    this.Tstamp.Equals(other.Tstamp)
                ) && 
                (
                    this.Diag == other.Diag ||
                    this.Diag != null &&
                    this.Diag.SequenceEqual(other.Diag)
                ) && 
                (
                    this.Errinfo == other.Errinfo ||
                    this.Errinfo != null &&
                    this.Errinfo.SequenceEqual(other.Errinfo)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.Cxid == other.Cxid ||
                    this.Cxid != null &&
                    this.Cxid.Equals(other.Cxid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Msg != null)
                    hash = hash * 59 + this.Msg.GetHashCode();
                if (this.Rc != null)
                    hash = hash * 59 + this.Rc.GetHashCode();
                if (this.Tstamp != null)
                    hash = hash * 59 + this.Tstamp.GetHashCode();
                if (this.Diag != null)
                    hash = hash * 59 + this.Diag.GetHashCode();
                if (this.Errinfo != null)
                    hash = hash * 59 + this.Errinfo.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.Cxid != null)
                    hash = hash * 59 + this.Cxid.GetHashCode();
                return hash;
            }
        }
    }

}
