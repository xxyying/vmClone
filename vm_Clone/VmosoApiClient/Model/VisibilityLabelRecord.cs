/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// VisibilityLabelRecord
    /// </summary>
    [DataContract]
    public partial class VisibilityLabelRecord :  IEquatable<VisibilityLabelRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VisibilityLabelRecord" /> class.
        /// </summary>
        /// <param name="ConnectedTrusted">Visibility value: connected_trusted.</param>
        /// <param name="_Public">Visibility value: public.</param>
        /// <param name="Me">Visibility value: me.</param>
        /// <param name="AllContacts">Visibility value: all_contacts.</param>
        public VisibilityLabelRecord(string ConnectedTrusted = null, string _Public = null, string Me = null, string AllContacts = null)
        {
            this.ConnectedTrusted = ConnectedTrusted;
            this._Public = _Public;
            this.Me = Me;
            this.AllContacts = AllContacts;
        }
        
        /// <summary>
        /// Visibility value: connected_trusted
        /// </summary>
        /// <value>Visibility value: connected_trusted</value>
        [DataMember(Name="connected_trusted", EmitDefaultValue=false)]
        public string ConnectedTrusted { get; set; }
        /// <summary>
        /// Visibility value: public
        /// </summary>
        /// <value>Visibility value: public</value>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public string _Public { get; set; }
        /// <summary>
        /// Visibility value: me
        /// </summary>
        /// <value>Visibility value: me</value>
        [DataMember(Name="me", EmitDefaultValue=false)]
        public string Me { get; set; }
        /// <summary>
        /// Visibility value: all_contacts
        /// </summary>
        /// <value>Visibility value: all_contacts</value>
        [DataMember(Name="all_contacts", EmitDefaultValue=false)]
        public string AllContacts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VisibilityLabelRecord {\n");
            sb.Append("  ConnectedTrusted: ").Append(ConnectedTrusted).Append("\n");
            sb.Append("  _Public: ").Append(_Public).Append("\n");
            sb.Append("  Me: ").Append(Me).Append("\n");
            sb.Append("  AllContacts: ").Append(AllContacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VisibilityLabelRecord);
        }

        /// <summary>
        /// Returns true if VisibilityLabelRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of VisibilityLabelRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisibilityLabelRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConnectedTrusted == other.ConnectedTrusted ||
                    this.ConnectedTrusted != null &&
                    this.ConnectedTrusted.Equals(other.ConnectedTrusted)
                ) && 
                (
                    this._Public == other._Public ||
                    this._Public != null &&
                    this._Public.Equals(other._Public)
                ) && 
                (
                    this.Me == other.Me ||
                    this.Me != null &&
                    this.Me.Equals(other.Me)
                ) && 
                (
                    this.AllContacts == other.AllContacts ||
                    this.AllContacts != null &&
                    this.AllContacts.Equals(other.AllContacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConnectedTrusted != null)
                    hash = hash * 59 + this.ConnectedTrusted.GetHashCode();
                if (this._Public != null)
                    hash = hash * 59 + this._Public.GetHashCode();
                if (this.Me != null)
                    hash = hash * 59 + this.Me.GetHashCode();
                if (this.AllContacts != null)
                    hash = hash * 59 + this.AllContacts.GetHashCode();
                return hash;
            }
        }
    }

}
