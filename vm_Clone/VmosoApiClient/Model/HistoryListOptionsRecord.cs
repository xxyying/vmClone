/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// HistoryListOptionsRecord
    /// </summary>
    [DataContract]
    public partial class HistoryListOptionsRecord :  IEquatable<HistoryListOptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryListOptionsRecord" /> class.
        /// </summary>
        /// <param name="Pinned">Pinned history entries first..</param>
        /// <param name="UniqueObjectId">one record per object id.</param>
        /// <param name="IncludeDeleted">include deleted objects..</param>
        /// <param name="Sort">Sort order..</param>
        /// <param name="Type">History type. Only retrieve history related to specific type..</param>
        /// <param name="ObjSubtypes">object subtypes..</param>
        /// <param name="Subtypes">History subtypes. Only retrieve history related to specific subtypes..</param>
        public HistoryListOptionsRecord(bool? Pinned = null, bool? UniqueObjectId = null, bool? IncludeDeleted = null, string Sort = null, List<string> Type = null, List<string> ObjSubtypes = null, List<string> Subtypes = null)
        {
            this.Pinned = Pinned;
            this.UniqueObjectId = UniqueObjectId;
            this.IncludeDeleted = IncludeDeleted;
            this.Sort = Sort;
            this.Type = Type;
            this.ObjSubtypes = ObjSubtypes;
            this.Subtypes = Subtypes;
        }
        
        /// <summary>
        /// Pinned history entries first.
        /// </summary>
        /// <value>Pinned history entries first.</value>
        [DataMember(Name="pinned", EmitDefaultValue=false)]
        public bool? Pinned { get; set; }
        /// <summary>
        /// one record per object id
        /// </summary>
        /// <value>one record per object id</value>
        [DataMember(Name="uniqueObjectId", EmitDefaultValue=false)]
        public bool? UniqueObjectId { get; set; }
        /// <summary>
        /// include deleted objects.
        /// </summary>
        /// <value>include deleted objects.</value>
        [DataMember(Name="includeDeleted", EmitDefaultValue=false)]
        public bool? IncludeDeleted { get; set; }
        /// <summary>
        /// Sort order.
        /// </summary>
        /// <value>Sort order.</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }
        /// <summary>
        /// History type. Only retrieve history related to specific type.
        /// </summary>
        /// <value>History type. Only retrieve history related to specific type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public List<string> Type { get; set; }
        /// <summary>
        /// object subtypes.
        /// </summary>
        /// <value>object subtypes.</value>
        [DataMember(Name="objSubtypes", EmitDefaultValue=false)]
        public List<string> ObjSubtypes { get; set; }
        /// <summary>
        /// History subtypes. Only retrieve history related to specific subtypes.
        /// </summary>
        /// <value>History subtypes. Only retrieve history related to specific subtypes.</value>
        [DataMember(Name="subtypes", EmitDefaultValue=false)]
        public List<string> Subtypes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryListOptionsRecord {\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  UniqueObjectId: ").Append(UniqueObjectId).Append("\n");
            sb.Append("  IncludeDeleted: ").Append(IncludeDeleted).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ObjSubtypes: ").Append(ObjSubtypes).Append("\n");
            sb.Append("  Subtypes: ").Append(Subtypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HistoryListOptionsRecord);
        }

        /// <summary>
        /// Returns true if HistoryListOptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of HistoryListOptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryListOptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pinned == other.Pinned ||
                    this.Pinned != null &&
                    this.Pinned.Equals(other.Pinned)
                ) && 
                (
                    this.UniqueObjectId == other.UniqueObjectId ||
                    this.UniqueObjectId != null &&
                    this.UniqueObjectId.Equals(other.UniqueObjectId)
                ) && 
                (
                    this.IncludeDeleted == other.IncludeDeleted ||
                    this.IncludeDeleted != null &&
                    this.IncludeDeleted.Equals(other.IncludeDeleted)
                ) && 
                (
                    this.Sort == other.Sort ||
                    this.Sort != null &&
                    this.Sort.Equals(other.Sort)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.SequenceEqual(other.Type)
                ) && 
                (
                    this.ObjSubtypes == other.ObjSubtypes ||
                    this.ObjSubtypes != null &&
                    this.ObjSubtypes.SequenceEqual(other.ObjSubtypes)
                ) && 
                (
                    this.Subtypes == other.Subtypes ||
                    this.Subtypes != null &&
                    this.Subtypes.SequenceEqual(other.Subtypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pinned != null)
                    hash = hash * 59 + this.Pinned.GetHashCode();
                if (this.UniqueObjectId != null)
                    hash = hash * 59 + this.UniqueObjectId.GetHashCode();
                if (this.IncludeDeleted != null)
                    hash = hash * 59 + this.IncludeDeleted.GetHashCode();
                if (this.Sort != null)
                    hash = hash * 59 + this.Sort.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.ObjSubtypes != null)
                    hash = hash * 59 + this.ObjSubtypes.GetHashCode();
                if (this.Subtypes != null)
                    hash = hash * 59 + this.Subtypes.GetHashCode();
                return hash;
            }
        }
    }

}
