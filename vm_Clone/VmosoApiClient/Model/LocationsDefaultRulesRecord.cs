/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// LocationsDefaultRulesRecord
    /// </summary>
    [DataContract]
    public partial class LocationsDefaultRulesRecord :  IEquatable<LocationsDefaultRulesRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsDefaultRulesRecord" /> class.
        /// </summary>
        /// <param name="Important">Keys of important default rules..</param>
        /// <param name="Favorites">Keys of favorites default rules..</param>
        /// <param name="Template">Keys of template default rules..</param>
        /// <param name="Archived">Keys of archived default rules..</param>
        /// <param name="_Default">Keys of locations default rules..</param>
        /// <param name="Custom">Keys of trash default rules..</param>
        /// <param name="Personal">Keys of locations default rules..</param>
        /// <param name="Drafts">Keys of drafts default rules..</param>
        /// <param name="Trash">Keys of trash default rules..</param>
        public LocationsDefaultRulesRecord(List<string> Important = null, List<string> Favorites = null, List<string> Template = null, List<string> Archived = null, List<string> _Default = null, List<string> Custom = null, List<string> Personal = null, List<string> Drafts = null, List<string> Trash = null)
        {
            this.Important = Important;
            this.Favorites = Favorites;
            this.Template = Template;
            this.Archived = Archived;
            this._Default = _Default;
            this.Custom = Custom;
            this.Personal = Personal;
            this.Drafts = Drafts;
            this.Trash = Trash;
        }
        
        /// <summary>
        /// Keys of important default rules.
        /// </summary>
        /// <value>Keys of important default rules.</value>
        [DataMember(Name="important", EmitDefaultValue=false)]
        public List<string> Important { get; set; }
        /// <summary>
        /// Keys of favorites default rules.
        /// </summary>
        /// <value>Keys of favorites default rules.</value>
        [DataMember(Name="favorites", EmitDefaultValue=false)]
        public List<string> Favorites { get; set; }
        /// <summary>
        /// Keys of template default rules.
        /// </summary>
        /// <value>Keys of template default rules.</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public List<string> Template { get; set; }
        /// <summary>
        /// Keys of archived default rules.
        /// </summary>
        /// <value>Keys of archived default rules.</value>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public List<string> Archived { get; set; }
        /// <summary>
        /// Keys of locations default rules.
        /// </summary>
        /// <value>Keys of locations default rules.</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public List<string> _Default { get; set; }
        /// <summary>
        /// Keys of trash default rules.
        /// </summary>
        /// <value>Keys of trash default rules.</value>
        [DataMember(Name="custom", EmitDefaultValue=false)]
        public List<string> Custom { get; set; }
        /// <summary>
        /// Keys of locations default rules.
        /// </summary>
        /// <value>Keys of locations default rules.</value>
        [DataMember(Name="personal", EmitDefaultValue=false)]
        public List<string> Personal { get; set; }
        /// <summary>
        /// Keys of drafts default rules.
        /// </summary>
        /// <value>Keys of drafts default rules.</value>
        [DataMember(Name="drafts", EmitDefaultValue=false)]
        public List<string> Drafts { get; set; }
        /// <summary>
        /// Keys of trash default rules.
        /// </summary>
        /// <value>Keys of trash default rules.</value>
        [DataMember(Name="trash", EmitDefaultValue=false)]
        public List<string> Trash { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationsDefaultRulesRecord {\n");
            sb.Append("  Important: ").Append(Important).Append("\n");
            sb.Append("  Favorites: ").Append(Favorites).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("  Drafts: ").Append(Drafts).Append("\n");
            sb.Append("  Trash: ").Append(Trash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LocationsDefaultRulesRecord);
        }

        /// <summary>
        /// Returns true if LocationsDefaultRulesRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of LocationsDefaultRulesRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationsDefaultRulesRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Important == other.Important ||
                    this.Important != null &&
                    this.Important.SequenceEqual(other.Important)
                ) && 
                (
                    this.Favorites == other.Favorites ||
                    this.Favorites != null &&
                    this.Favorites.SequenceEqual(other.Favorites)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.SequenceEqual(other.Template)
                ) && 
                (
                    this.Archived == other.Archived ||
                    this.Archived != null &&
                    this.Archived.SequenceEqual(other.Archived)
                ) && 
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.SequenceEqual(other._Default)
                ) && 
                (
                    this.Custom == other.Custom ||
                    this.Custom != null &&
                    this.Custom.SequenceEqual(other.Custom)
                ) && 
                (
                    this.Personal == other.Personal ||
                    this.Personal != null &&
                    this.Personal.SequenceEqual(other.Personal)
                ) && 
                (
                    this.Drafts == other.Drafts ||
                    this.Drafts != null &&
                    this.Drafts.SequenceEqual(other.Drafts)
                ) && 
                (
                    this.Trash == other.Trash ||
                    this.Trash != null &&
                    this.Trash.SequenceEqual(other.Trash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Important != null)
                    hash = hash * 59 + this.Important.GetHashCode();
                if (this.Favorites != null)
                    hash = hash * 59 + this.Favorites.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.Archived != null)
                    hash = hash * 59 + this.Archived.GetHashCode();
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                if (this.Custom != null)
                    hash = hash * 59 + this.Custom.GetHashCode();
                if (this.Personal != null)
                    hash = hash * 59 + this.Personal.GetHashCode();
                if (this.Drafts != null)
                    hash = hash * 59 + this.Drafts.GetHashCode();
                if (this.Trash != null)
                    hash = hash * 59 + this.Trash.GetHashCode();
                return hash;
            }
        }
    }

}
