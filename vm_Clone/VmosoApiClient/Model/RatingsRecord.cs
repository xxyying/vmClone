/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// RatingsRecord
    /// </summary>
    [DataContract]
    public partial class RatingsRecord :  IEquatable<RatingsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingsRecord" /> class.
        /// </summary>
        /// <param name="Subid">Sub id.</param>
        /// <param name="_False">Number of no ratings.</param>
        /// <param name="_True">Number of yes ratings.</param>
        /// <param name="UserRating">Current user&#39;s rating.</param>
        /// <param name="Key">Rating key.</param>
        /// <param name="HasRated">Whether user has rated.</param>
        public RatingsRecord(string Subid = null, int? _False = null, int? _True = null, string UserRating = null, string Key = null, bool? HasRated = null)
        {
            this.Subid = Subid;
            this._False = _False;
            this._True = _True;
            this.UserRating = UserRating;
            this.Key = Key;
            this.HasRated = HasRated;
        }
        
        /// <summary>
        /// Sub id
        /// </summary>
        /// <value>Sub id</value>
        [DataMember(Name="subid", EmitDefaultValue=false)]
        public string Subid { get; set; }
        /// <summary>
        /// Number of no ratings
        /// </summary>
        /// <value>Number of no ratings</value>
        [DataMember(Name="false", EmitDefaultValue=false)]
        public int? _False { get; set; }
        /// <summary>
        /// Number of yes ratings
        /// </summary>
        /// <value>Number of yes ratings</value>
        [DataMember(Name="true", EmitDefaultValue=false)]
        public int? _True { get; set; }
        /// <summary>
        /// Current user&#39;s rating
        /// </summary>
        /// <value>Current user&#39;s rating</value>
        [DataMember(Name="userRating", EmitDefaultValue=false)]
        public string UserRating { get; set; }
        /// <summary>
        /// Rating key
        /// </summary>
        /// <value>Rating key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Whether user has rated
        /// </summary>
        /// <value>Whether user has rated</value>
        [DataMember(Name="hasRated", EmitDefaultValue=false)]
        public bool? HasRated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RatingsRecord {\n");
            sb.Append("  Subid: ").Append(Subid).Append("\n");
            sb.Append("  _False: ").Append(_False).Append("\n");
            sb.Append("  _True: ").Append(_True).Append("\n");
            sb.Append("  UserRating: ").Append(UserRating).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  HasRated: ").Append(HasRated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RatingsRecord);
        }

        /// <summary>
        /// Returns true if RatingsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of RatingsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Subid == other.Subid ||
                    this.Subid != null &&
                    this.Subid.Equals(other.Subid)
                ) && 
                (
                    this._False == other._False ||
                    this._False != null &&
                    this._False.Equals(other._False)
                ) && 
                (
                    this._True == other._True ||
                    this._True != null &&
                    this._True.Equals(other._True)
                ) && 
                (
                    this.UserRating == other.UserRating ||
                    this.UserRating != null &&
                    this.UserRating.Equals(other.UserRating)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.SequenceEqual(other.Key)
                ) && 
                (
                    this.HasRated == other.HasRated ||
                    this.HasRated != null &&
                    this.HasRated.Equals(other.HasRated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Subid != null)
                    hash = hash * 59 + this.Subid.GetHashCode();
                if (this._False != null)
                    hash = hash * 59 + this._False.GetHashCode();
                if (this._True != null)
                    hash = hash * 59 + this._True.GetHashCode();
                if (this.UserRating != null)
                    hash = hash * 59 + this.UserRating.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.HasRated != null)
                    hash = hash * 59 + this.HasRated.GetHashCode();
                return hash;
            }
        }
    }

}
