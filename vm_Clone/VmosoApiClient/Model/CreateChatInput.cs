/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// CreateChatInput
    /// </summary>
    [DataContract]
    public partial class CreateChatInput :  IEquatable<CreateChatInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateChatInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatInput" /> class.
        /// </summary>
        /// <param name="Emails">.</param>
        /// <param name="TaskKey"> (required).</param>
        /// <param name="Keys">.</param>
        /// <param name="Name"> (required).</param>
        /// <param name="Groups">.</param>
        /// <param name="AddByEmail"> (required).</param>
        public CreateChatInput(List<string> Emails = null, string TaskKey = null, List<string> Keys = null, string Name = null, List<string> Groups = null, bool? AddByEmail = null)
        {
            // to ensure "TaskKey" is required (not null)
            if (TaskKey == null)
            {
                throw new InvalidDataException("TaskKey is a required property for CreateChatInput and cannot be null");
            }
            else
            {
                this.TaskKey = TaskKey;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateChatInput and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "AddByEmail" is required (not null)
            if (AddByEmail == null)
            {
                throw new InvalidDataException("AddByEmail is a required property for CreateChatInput and cannot be null");
            }
            else
            {
                this.AddByEmail = AddByEmail;
            }
            this.Emails = Emails;
            this.Keys = Keys;
            this.Groups = Groups;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<string> Emails { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="taskKey", EmitDefaultValue=false)]
        public string TaskKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="keys", EmitDefaultValue=false)]
        public List<string> Keys { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="addByEmail", EmitDefaultValue=false)]
        public bool? AddByEmail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateChatInput {\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  TaskKey: ").Append(TaskKey).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  AddByEmail: ").Append(AddByEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateChatInput);
        }

        /// <summary>
        /// Returns true if CreateChatInput instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateChatInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChatInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Emails == other.Emails ||
                    this.Emails != null &&
                    this.Emails.SequenceEqual(other.Emails)
                ) && 
                (
                    this.TaskKey == other.TaskKey ||
                    this.TaskKey != null &&
                    this.TaskKey.Equals(other.TaskKey)
                ) && 
                (
                    this.Keys == other.Keys ||
                    this.Keys != null &&
                    this.Keys.SequenceEqual(other.Keys)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.AddByEmail == other.AddByEmail ||
                    this.AddByEmail != null &&
                    this.AddByEmail.Equals(other.AddByEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Emails != null)
                    hash = hash * 59 + this.Emails.GetHashCode();
                if (this.TaskKey != null)
                    hash = hash * 59 + this.TaskKey.GetHashCode();
                if (this.Keys != null)
                    hash = hash * 59 + this.Keys.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                if (this.AddByEmail != null)
                    hash = hash * 59 + this.AddByEmail.GetHashCode();
                return hash;
            }
        }
    }

}
