/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// FileRecord
    /// </summary>
    [DataContract]
    public partial class FileRecord : ContentRecord,  IEquatable<FileRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileRecord" /> class.
        /// </summary>
        /// <param name="Editor">Editor.</param>
        /// <param name="FavoriteFlag">.</param>
        /// <param name="Type">Type of content record..</param>
        /// <param name="Userrecord">Userrecord.</param>
        /// <param name="Timeupdated">Last update time for content record..</param>
        /// <param name="Tags">Array of tag labels for this content..</param>
        /// <param name="ImportantFlag">.</param>
        /// <param name="Aclrecord">Aclrecord.</param>
        /// <param name="Timecreated">Time created for content record..</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Subtype of content record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">.</param>
        /// <param name="NaviKey">Navigation Key ; store navigation group letter.</param>
        /// <param name="SyncToLocalFlag">.</param>
        /// <param name="Key">Key of content record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status of content record..</param>
        /// <param name="FilestoreFilestore">File filestore_filestore..</param>
        /// <param name="BvrevVersion">File bvrev_version..</param>
        /// <param name="Folders">The folders the file is in.</param>
        /// <param name="ViewHistoryFlag">File viewHistoryFlag..</param>
        /// <param name="LastUpdater">LastUpdater.</param>
        /// <param name="ExternalFilePath">External file path, Dropbox uses file path to uniquely identify a file..</param>
        /// <param name="TaskKeys">File branching, task keys.</param>
        /// <param name="CanRemove">can remove from task.</param>
        /// <param name="ThumbnailIndex">Thumbnail index for video..</param>
        /// <param name="Rel">rel.</param>
        /// <param name="PostCount">post Count..</param>
        /// <param name="ExternalFileURL">External file URL, url to access a file. Google Drive uses this feature..</param>
        /// <param name="ExternalFileCreatorEmail">External file creator email address.</param>
        /// <param name="Tasks">Array of tasks associated with the file.</param>
        /// <param name="Filesizestring">File size string.</param>
        /// <param name="BvrevLastUpdater">File bvrev_last_updater..</param>
        /// <param name="Destinations">Destinations where this file has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="SiteSelected">File site_selected..</param>
        /// <param name="Version">Version number.</param>
        /// <param name="FileOrigin">When a user uploads a file we need to specify where it came from. This field, fileOrigin, describe where a file originated from. Valid values are &#39;google&#39;, &#39;dropbox&#39;, &#39;vmoso&#39;. The default is &#39;vmoso&#39;, which means user upload  file from their computer or mobile device. Not from a cloud storage..</param>
        /// <param name="Commentcount">Comment count for file..</param>
        /// <param name="Filename">File filename..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="Name">File name..</param>
        /// <param name="ContainerKey">Container key.</param>
        /// <param name="UpdaterName">Name of last person who updated file.</param>
        /// <param name="Files">This is for References in sparc, file points to itself..</param>
        /// <param name="Trashed">in trash.</param>
        /// <param name="Note">File note. Used when editing a file, it is optional data..</param>
        /// <param name="Downloadable">File downloadable..</param>
        /// <param name="Description">File description..</param>
        /// <param name="Filesize">File size.</param>
        /// <param name="RefmeFlag">Refme flag.</param>
        /// <param name="Locale">.</param>
        /// <param name="DvaultItemStatus">File dvault_item_status..</param>
        /// <param name="Duration">If audio file, specify duration.</param>
        /// <param name="DvaultItemFlag">File dvault_item_flag..</param>
        /// <param name="Simpletype">File simpletype..</param>
        /// <param name="Ratings">Ratings.</param>
        /// <param name="UpdateHiddenContainers">Flag to determine if vmoso should update the file version in all hidden containers..</param>
        /// <param name="UpdateAllVisibleContainers">Flag to determine if vmoso should update the file version in all visible containers..</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="PreviewPageCount">File previewPageCount..</param>
        /// <param name="ExternalFileID">External file ID, Google Drive uses file ID to uniquely identify a file..</param>
        /// <param name="SharedTasksCount">Shared Tasks Count..</param>
        /// <param name="TransferFileVersions">Transfer File Versions.</param>
        /// <param name="UiVersion">User interface version number, should be used to display on file detail page.</param>
        /// <param name="FilestoreDirRoot">File filestore_dir_root..</param>
        /// <param name="Url">url.</param>
        /// <param name="AttachedContainerIDs">Comma separated list of container IDs that should be updated with lastest file version.</param>
        /// <param name="ExternalFilePushToken">External file push token.</param>
        /// <param name="Originalfilename">File originalfilename..</param>
        /// <param name="PreviewStatus">File previewStatus..</param>
        /// <param name="Mimetype">File mimetype..</param>
        public FileRecord(DisplayRecord Editor = null, string FavoriteFlag = null, string Type = null, DisplayRecord Userrecord = null, int? Timeupdated = null, Object Tags = null, string ImportantFlag = null, ACLRecord Aclrecord = null, int? Timecreated = null, string HideFlag = null, string Subtype = null, string PinFlag = null, bool? FollowFlag = null, string NaviKey = null, bool? SyncToLocalFlag = null, string Key = null, int? PinTime = null, string Status = null, string FilestoreFilestore = null, int? BvrevVersion = null, Object Folders = null, int? ViewHistoryFlag = null, DisplayRecord LastUpdater = null, string ExternalFilePath = null, List<string> TaskKeys = null, bool? CanRemove = null, int? ThumbnailIndex = null, string Rel = null, int? PostCount = null, string ExternalFileURL = null, string ExternalFileCreatorEmail = null, List<TaskRecord> Tasks = null, string Filesizestring = null, int? BvrevLastUpdater = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, string SiteSelected = null, string Version = null, string FileOrigin = null, int? Commentcount = null, string Filename = null, int? DominantTime = null, string Name = null, string ContainerKey = null, string UpdaterName = null, Object Files = null, string Trashed = null, string Note = null, string Downloadable = null, string Description = null, int? Filesize = null, bool? RefmeFlag = null, string Locale = null, string DvaultItemStatus = null, string Duration = null, string DvaultItemFlag = null, string Simpletype = null, RatingsRecord Ratings = null, bool? UpdateHiddenContainers = null, bool? UpdateAllVisibleContainers = null, DisplayRecord Creator = null, int? PreviewPageCount = null, string ExternalFileID = null, int? SharedTasksCount = null, List<FileRecord> TransferFileVersions = null, string UiVersion = null, string FilestoreDirRoot = null, string Url = null, string AttachedContainerIDs = null, string ExternalFilePushToken = null, string Originalfilename = null, int? PreviewStatus = null, string Mimetype = null)
        {
            this.Editor = Editor;
            this.FavoriteFlag = FavoriteFlag;
            this.Type = Type;
            this.Userrecord = Userrecord;
            this.Timeupdated = Timeupdated;
            this.Tags = Tags;
            this.ImportantFlag = ImportantFlag;
            this.Aclrecord = Aclrecord;
            this.Timecreated = Timecreated;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.NaviKey = NaviKey;
            this.SyncToLocalFlag = SyncToLocalFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.FilestoreFilestore = FilestoreFilestore;
            this.BvrevVersion = BvrevVersion;
            this.Folders = Folders;
            this.ViewHistoryFlag = ViewHistoryFlag;
            this.LastUpdater = LastUpdater;
            this.ExternalFilePath = ExternalFilePath;
            this.TaskKeys = TaskKeys;
            this.CanRemove = CanRemove;
            this.ThumbnailIndex = ThumbnailIndex;
            this.Rel = Rel;
            this.PostCount = PostCount;
            this.ExternalFileURL = ExternalFileURL;
            this.ExternalFileCreatorEmail = ExternalFileCreatorEmail;
            this.Tasks = Tasks;
            this.Filesizestring = Filesizestring;
            this.BvrevLastUpdater = BvrevLastUpdater;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.SiteSelected = SiteSelected;
            this.Version = Version;
            this.FileOrigin = FileOrigin;
            this.Commentcount = Commentcount;
            this.Filename = Filename;
            this.DominantTime = DominantTime;
            this.Name = Name;
            this.ContainerKey = ContainerKey;
            this.UpdaterName = UpdaterName;
            this.Files = Files;
            this.Trashed = Trashed;
            this.Note = Note;
            this.Downloadable = Downloadable;
            this.Description = Description;
            this.Filesize = Filesize;
            this.RefmeFlag = RefmeFlag;
            this.Locale = Locale;
            this.DvaultItemStatus = DvaultItemStatus;
            this.Duration = Duration;
            this.DvaultItemFlag = DvaultItemFlag;
            this.Simpletype = Simpletype;
            this.Ratings = Ratings;
            this.UpdateHiddenContainers = UpdateHiddenContainers;
            this.UpdateAllVisibleContainers = UpdateAllVisibleContainers;
            this.Creator = Creator;
            this.PreviewPageCount = PreviewPageCount;
            this.ExternalFileID = ExternalFileID;
            this.SharedTasksCount = SharedTasksCount;
            this.TransferFileVersions = TransferFileVersions;
            this.UiVersion = UiVersion;
            this.FilestoreDirRoot = FilestoreDirRoot;
            this.Url = Url;
            this.AttachedContainerIDs = AttachedContainerIDs;
            this.ExternalFilePushToken = ExternalFilePushToken;
            this.Originalfilename = Originalfilename;
            this.PreviewStatus = PreviewStatus;
            this.Mimetype = Mimetype;
        }
        
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public string FavoriteFlag { get; set; }
        /// <summary>
        /// Type of content record.
        /// </summary>
        /// <value>Type of content record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Userrecord
        /// </summary>
        [DataMember(Name="userrecord", EmitDefaultValue=false)]
        public DisplayRecord Userrecord { get; set; }
        /// <summary>
        /// Last update time for content record.
        /// </summary>
        /// <value>Last update time for content record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// Array of tag labels for this content.
        /// </summary>
        /// <value>Array of tag labels for this content.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public Object Tags { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public string ImportantFlag { get; set; }
        /// <summary>
        /// Gets or Sets Aclrecord
        /// </summary>
        [DataMember(Name="aclrecord", EmitDefaultValue=false)]
        public ACLRecord Aclrecord { get; set; }
        /// <summary>
        /// Time created for content record.
        /// </summary>
        /// <value>Time created for content record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public string HideFlag { get; set; }
        /// <summary>
        /// Subtype of content record.
        /// </summary>
        /// <value>Subtype of content record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public string PinFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Navigation Key ; store navigation group letter
        /// </summary>
        /// <value>Navigation Key ; store navigation group letter</value>
        [DataMember(Name="naviKey", EmitDefaultValue=false)]
        public string NaviKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="syncToLocalFlag", EmitDefaultValue=false)]
        public bool? SyncToLocalFlag { get; set; }
        /// <summary>
        /// Key of content record.
        /// </summary>
        /// <value>Key of content record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status of content record.
        /// </summary>
        /// <value>Status of content record.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// File filestore_filestore.
        /// </summary>
        /// <value>File filestore_filestore.</value>
        [DataMember(Name="filestore_filestore", EmitDefaultValue=false)]
        public string FilestoreFilestore { get; set; }
        /// <summary>
        /// File bvrev_version.
        /// </summary>
        /// <value>File bvrev_version.</value>
        [DataMember(Name="bvrev_version", EmitDefaultValue=false)]
        public int? BvrevVersion { get; set; }
        /// <summary>
        /// The folders the file is in
        /// </summary>
        /// <value>The folders the file is in</value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public Object Folders { get; set; }
        /// <summary>
        /// File viewHistoryFlag.
        /// </summary>
        /// <value>File viewHistoryFlag.</value>
        [DataMember(Name="viewHistoryFlag", EmitDefaultValue=false)]
        public int? ViewHistoryFlag { get; set; }
        /// <summary>
        /// Gets or Sets LastUpdater
        /// </summary>
        [DataMember(Name="lastUpdater", EmitDefaultValue=false)]
        public DisplayRecord LastUpdater { get; set; }
        /// <summary>
        /// External file path, Dropbox uses file path to uniquely identify a file.
        /// </summary>
        /// <value>External file path, Dropbox uses file path to uniquely identify a file.</value>
        [DataMember(Name="externalFilePath", EmitDefaultValue=false)]
        public string ExternalFilePath { get; set; }
        /// <summary>
        /// File branching, task keys
        /// </summary>
        /// <value>File branching, task keys</value>
        [DataMember(Name="taskKeys", EmitDefaultValue=false)]
        public List<string> TaskKeys { get; set; }
        /// <summary>
        /// can remove from task
        /// </summary>
        /// <value>can remove from task</value>
        [DataMember(Name="canRemove", EmitDefaultValue=false)]
        public bool? CanRemove { get; set; }
        /// <summary>
        /// Thumbnail index for video.
        /// </summary>
        /// <value>Thumbnail index for video.</value>
        [DataMember(Name="thumbnail_index", EmitDefaultValue=false)]
        public int? ThumbnailIndex { get; set; }
        /// <summary>
        /// rel
        /// </summary>
        /// <value>rel</value>
        [DataMember(Name="rel", EmitDefaultValue=false)]
        public string Rel { get; set; }
        /// <summary>
        /// post Count.
        /// </summary>
        /// <value>post Count.</value>
        [DataMember(Name="postCount", EmitDefaultValue=false)]
        public int? PostCount { get; set; }
        /// <summary>
        /// External file URL, url to access a file. Google Drive uses this feature.
        /// </summary>
        /// <value>External file URL, url to access a file. Google Drive uses this feature.</value>
        [DataMember(Name="externalFileURL", EmitDefaultValue=false)]
        public string ExternalFileURL { get; set; }
        /// <summary>
        /// External file creator email address
        /// </summary>
        /// <value>External file creator email address</value>
        [DataMember(Name="externalFileCreatorEmail", EmitDefaultValue=false)]
        public string ExternalFileCreatorEmail { get; set; }
        /// <summary>
        /// Array of tasks associated with the file
        /// </summary>
        /// <value>Array of tasks associated with the file</value>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<TaskRecord> Tasks { get; set; }
        /// <summary>
        /// File size string
        /// </summary>
        /// <value>File size string</value>
        [DataMember(Name="filesizestring", EmitDefaultValue=false)]
        public string Filesizestring { get; set; }
        /// <summary>
        /// File bvrev_last_updater.
        /// </summary>
        /// <value>File bvrev_last_updater.</value>
        [DataMember(Name="bvrev_last_updater", EmitDefaultValue=false)]
        public int? BvrevLastUpdater { get; set; }
        /// <summary>
        /// Destinations where this file has been placed.
        /// </summary>
        /// <value>Destinations where this file has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// File site_selected.
        /// </summary>
        /// <value>File site_selected.</value>
        [DataMember(Name="site_selected", EmitDefaultValue=false)]
        public string SiteSelected { get; set; }
        /// <summary>
        /// Version number
        /// </summary>
        /// <value>Version number</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// When a user uploads a file we need to specify where it came from. This field, fileOrigin, describe where a file originated from. Valid values are &#39;google&#39;, &#39;dropbox&#39;, &#39;vmoso&#39;. The default is &#39;vmoso&#39;, which means user upload  file from their computer or mobile device. Not from a cloud storage.
        /// </summary>
        /// <value>When a user uploads a file we need to specify where it came from. This field, fileOrigin, describe where a file originated from. Valid values are &#39;google&#39;, &#39;dropbox&#39;, &#39;vmoso&#39;. The default is &#39;vmoso&#39;, which means user upload  file from their computer or mobile device. Not from a cloud storage.</value>
        [DataMember(Name="fileOrigin", EmitDefaultValue=false)]
        public string FileOrigin { get; set; }
        /// <summary>
        /// Comment count for file.
        /// </summary>
        /// <value>Comment count for file.</value>
        [DataMember(Name="commentcount", EmitDefaultValue=false)]
        public int? Commentcount { get; set; }
        /// <summary>
        /// File filename.
        /// </summary>
        /// <value>File filename.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// File name.
        /// </summary>
        /// <value>File name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Container key
        /// </summary>
        /// <value>Container key</value>
        [DataMember(Name="containerKey", EmitDefaultValue=false)]
        public string ContainerKey { get; set; }
        /// <summary>
        /// Name of last person who updated file
        /// </summary>
        /// <value>Name of last person who updated file</value>
        [DataMember(Name="updaterName", EmitDefaultValue=false)]
        public string UpdaterName { get; set; }
        /// <summary>
        /// This is for References in sparc, file points to itself.
        /// </summary>
        /// <value>This is for References in sparc, file points to itself.</value>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public Object Files { get; set; }
        /// <summary>
        /// in trash
        /// </summary>
        /// <value>in trash</value>
        [DataMember(Name="trashed", EmitDefaultValue=false)]
        public string Trashed { get; set; }
        /// <summary>
        /// File note. Used when editing a file, it is optional data.
        /// </summary>
        /// <value>File note. Used when editing a file, it is optional data.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// File downloadable.
        /// </summary>
        /// <value>File downloadable.</value>
        [DataMember(Name="downloadable", EmitDefaultValue=false)]
        public string Downloadable { get; set; }
        /// <summary>
        /// File description.
        /// </summary>
        /// <value>File description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// File size
        /// </summary>
        /// <value>File size</value>
        [DataMember(Name="filesize", EmitDefaultValue=false)]
        public int? Filesize { get; set; }
        /// <summary>
        /// Refme flag
        /// </summary>
        /// <value>Refme flag</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// File dvault_item_status.
        /// </summary>
        /// <value>File dvault_item_status.</value>
        [DataMember(Name="dvault_item_status", EmitDefaultValue=false)]
        public string DvaultItemStatus { get; set; }
        /// <summary>
        /// If audio file, specify duration
        /// </summary>
        /// <value>If audio file, specify duration</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }
        /// <summary>
        /// File dvault_item_flag.
        /// </summary>
        /// <value>File dvault_item_flag.</value>
        [DataMember(Name="dvault_item_flag", EmitDefaultValue=false)]
        public string DvaultItemFlag { get; set; }
        /// <summary>
        /// File simpletype.
        /// </summary>
        /// <value>File simpletype.</value>
        [DataMember(Name="simpletype", EmitDefaultValue=false)]
        public string Simpletype { get; set; }
        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name="ratings", EmitDefaultValue=false)]
        public RatingsRecord Ratings { get; set; }
        /// <summary>
        /// Flag to determine if vmoso should update the file version in all hidden containers.
        /// </summary>
        /// <value>Flag to determine if vmoso should update the file version in all hidden containers.</value>
        [DataMember(Name="updateHiddenContainers", EmitDefaultValue=false)]
        public bool? UpdateHiddenContainers { get; set; }
        /// <summary>
        /// Flag to determine if vmoso should update the file version in all visible containers.
        /// </summary>
        /// <value>Flag to determine if vmoso should update the file version in all visible containers.</value>
        [DataMember(Name="updateAllVisibleContainers", EmitDefaultValue=false)]
        public bool? UpdateAllVisibleContainers { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// File previewPageCount.
        /// </summary>
        /// <value>File previewPageCount.</value>
        [DataMember(Name="previewPageCount", EmitDefaultValue=false)]
        public int? PreviewPageCount { get; set; }
        /// <summary>
        /// External file ID, Google Drive uses file ID to uniquely identify a file.
        /// </summary>
        /// <value>External file ID, Google Drive uses file ID to uniquely identify a file.</value>
        [DataMember(Name="externalFileID", EmitDefaultValue=false)]
        public string ExternalFileID { get; set; }
        /// <summary>
        /// Shared Tasks Count.
        /// </summary>
        /// <value>Shared Tasks Count.</value>
        [DataMember(Name="sharedTasksCount", EmitDefaultValue=false)]
        public int? SharedTasksCount { get; set; }
        /// <summary>
        /// Transfer File Versions
        /// </summary>
        /// <value>Transfer File Versions</value>
        [DataMember(Name="transferFileVersions", EmitDefaultValue=false)]
        public List<FileRecord> TransferFileVersions { get; set; }
        /// <summary>
        /// User interface version number, should be used to display on file detail page
        /// </summary>
        /// <value>User interface version number, should be used to display on file detail page</value>
        [DataMember(Name="uiVersion", EmitDefaultValue=false)]
        public string UiVersion { get; set; }
        /// <summary>
        /// File filestore_dir_root.
        /// </summary>
        /// <value>File filestore_dir_root.</value>
        [DataMember(Name="filestore_dir_root", EmitDefaultValue=false)]
        public string FilestoreDirRoot { get; set; }
        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Comma separated list of container IDs that should be updated with lastest file version
        /// </summary>
        /// <value>Comma separated list of container IDs that should be updated with lastest file version</value>
        [DataMember(Name="attachedContainerIDs", EmitDefaultValue=false)]
        public string AttachedContainerIDs { get; set; }
        /// <summary>
        /// External file push token
        /// </summary>
        /// <value>External file push token</value>
        [DataMember(Name="externalFilePushToken", EmitDefaultValue=false)]
        public string ExternalFilePushToken { get; set; }
        /// <summary>
        /// File originalfilename.
        /// </summary>
        /// <value>File originalfilename.</value>
        [DataMember(Name="originalfilename", EmitDefaultValue=false)]
        public string Originalfilename { get; set; }
        /// <summary>
        /// File previewStatus.
        /// </summary>
        /// <value>File previewStatus.</value>
        [DataMember(Name="previewStatus", EmitDefaultValue=false)]
        public int? PreviewStatus { get; set; }
        /// <summary>
        /// File mimetype.
        /// </summary>
        /// <value>File mimetype.</value>
        [DataMember(Name="mimetype", EmitDefaultValue=false)]
        public string Mimetype { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileRecord {\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Userrecord: ").Append(Userrecord).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  Aclrecord: ").Append(Aclrecord).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  NaviKey: ").Append(NaviKey).Append("\n");
            sb.Append("  SyncToLocalFlag: ").Append(SyncToLocalFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FilestoreFilestore: ").Append(FilestoreFilestore).Append("\n");
            sb.Append("  BvrevVersion: ").Append(BvrevVersion).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  ViewHistoryFlag: ").Append(ViewHistoryFlag).Append("\n");
            sb.Append("  LastUpdater: ").Append(LastUpdater).Append("\n");
            sb.Append("  ExternalFilePath: ").Append(ExternalFilePath).Append("\n");
            sb.Append("  TaskKeys: ").Append(TaskKeys).Append("\n");
            sb.Append("  CanRemove: ").Append(CanRemove).Append("\n");
            sb.Append("  ThumbnailIndex: ").Append(ThumbnailIndex).Append("\n");
            sb.Append("  Rel: ").Append(Rel).Append("\n");
            sb.Append("  PostCount: ").Append(PostCount).Append("\n");
            sb.Append("  ExternalFileURL: ").Append(ExternalFileURL).Append("\n");
            sb.Append("  ExternalFileCreatorEmail: ").Append(ExternalFileCreatorEmail).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Filesizestring: ").Append(Filesizestring).Append("\n");
            sb.Append("  BvrevLastUpdater: ").Append(BvrevLastUpdater).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  SiteSelected: ").Append(SiteSelected).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  FileOrigin: ").Append(FileOrigin).Append("\n");
            sb.Append("  Commentcount: ").Append(Commentcount).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContainerKey: ").Append(ContainerKey).Append("\n");
            sb.Append("  UpdaterName: ").Append(UpdaterName).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Trashed: ").Append(Trashed).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  DvaultItemStatus: ").Append(DvaultItemStatus).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DvaultItemFlag: ").Append(DvaultItemFlag).Append("\n");
            sb.Append("  Simpletype: ").Append(Simpletype).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  UpdateHiddenContainers: ").Append(UpdateHiddenContainers).Append("\n");
            sb.Append("  UpdateAllVisibleContainers: ").Append(UpdateAllVisibleContainers).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  PreviewPageCount: ").Append(PreviewPageCount).Append("\n");
            sb.Append("  ExternalFileID: ").Append(ExternalFileID).Append("\n");
            sb.Append("  SharedTasksCount: ").Append(SharedTasksCount).Append("\n");
            sb.Append("  TransferFileVersions: ").Append(TransferFileVersions).Append("\n");
            sb.Append("  UiVersion: ").Append(UiVersion).Append("\n");
            sb.Append("  FilestoreDirRoot: ").Append(FilestoreDirRoot).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AttachedContainerIDs: ").Append(AttachedContainerIDs).Append("\n");
            sb.Append("  ExternalFilePushToken: ").Append(ExternalFilePushToken).Append("\n");
            sb.Append("  Originalfilename: ").Append(Originalfilename).Append("\n");
            sb.Append("  PreviewStatus: ").Append(PreviewStatus).Append("\n");
            sb.Append("  Mimetype: ").Append(Mimetype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FileRecord);
        }

        /// <summary>
        /// Returns true if FileRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of FileRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Userrecord == other.Userrecord ||
                    this.Userrecord != null &&
                    this.Userrecord.Equals(other.Userrecord)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.Aclrecord == other.Aclrecord ||
                    this.Aclrecord != null &&
                    this.Aclrecord.Equals(other.Aclrecord)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.NaviKey == other.NaviKey ||
                    this.NaviKey != null &&
                    this.NaviKey.Equals(other.NaviKey)
                ) && 
                (
                    this.SyncToLocalFlag == other.SyncToLocalFlag ||
                    this.SyncToLocalFlag != null &&
                    this.SyncToLocalFlag.Equals(other.SyncToLocalFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.FilestoreFilestore == other.FilestoreFilestore ||
                    this.FilestoreFilestore != null &&
                    this.FilestoreFilestore.Equals(other.FilestoreFilestore)
                ) && 
                (
                    this.BvrevVersion == other.BvrevVersion ||
                    this.BvrevVersion != null &&
                    this.BvrevVersion.Equals(other.BvrevVersion)
                ) && 
                (
                    this.Folders == other.Folders ||
                    this.Folders != null &&
                    this.Folders.Equals(other.Folders)
                ) && 
                (
                    this.ViewHistoryFlag == other.ViewHistoryFlag ||
                    this.ViewHistoryFlag != null &&
                    this.ViewHistoryFlag.Equals(other.ViewHistoryFlag)
                ) && 
                (
                    this.LastUpdater == other.LastUpdater ||
                    this.LastUpdater != null &&
                    this.LastUpdater.Equals(other.LastUpdater)
                ) && 
                (
                    this.ExternalFilePath == other.ExternalFilePath ||
                    this.ExternalFilePath != null &&
                    this.ExternalFilePath.Equals(other.ExternalFilePath)
                ) && 
                (
                    this.TaskKeys == other.TaskKeys ||
                    this.TaskKeys != null &&
                    this.TaskKeys.SequenceEqual(other.TaskKeys)
                ) && 
                (
                    this.CanRemove == other.CanRemove ||
                    this.CanRemove != null &&
                    this.CanRemove.Equals(other.CanRemove)
                ) && 
                (
                    this.ThumbnailIndex == other.ThumbnailIndex ||
                    this.ThumbnailIndex != null &&
                    this.ThumbnailIndex.Equals(other.ThumbnailIndex)
                ) && 
                (
                    this.Rel == other.Rel ||
                    this.Rel != null &&
                    this.Rel.Equals(other.Rel)
                ) && 
                (
                    this.PostCount == other.PostCount ||
                    this.PostCount != null &&
                    this.PostCount.Equals(other.PostCount)
                ) && 
                (
                    this.ExternalFileURL == other.ExternalFileURL ||
                    this.ExternalFileURL != null &&
                    this.ExternalFileURL.Equals(other.ExternalFileURL)
                ) && 
                (
                    this.ExternalFileCreatorEmail == other.ExternalFileCreatorEmail ||
                    this.ExternalFileCreatorEmail != null &&
                    this.ExternalFileCreatorEmail.Equals(other.ExternalFileCreatorEmail)
                ) && 
                (
                    this.Tasks == other.Tasks ||
                    this.Tasks != null &&
                    this.Tasks.SequenceEqual(other.Tasks)
                ) && 
                (
                    this.Filesizestring == other.Filesizestring ||
                    this.Filesizestring != null &&
                    this.Filesizestring.Equals(other.Filesizestring)
                ) && 
                (
                    this.BvrevLastUpdater == other.BvrevLastUpdater ||
                    this.BvrevLastUpdater != null &&
                    this.BvrevLastUpdater.Equals(other.BvrevLastUpdater)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.SiteSelected == other.SiteSelected ||
                    this.SiteSelected != null &&
                    this.SiteSelected.Equals(other.SiteSelected)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.FileOrigin == other.FileOrigin ||
                    this.FileOrigin != null &&
                    this.FileOrigin.Equals(other.FileOrigin)
                ) && 
                (
                    this.Commentcount == other.Commentcount ||
                    this.Commentcount != null &&
                    this.Commentcount.Equals(other.Commentcount)
                ) && 
                (
                    this.Filename == other.Filename ||
                    this.Filename != null &&
                    this.Filename.Equals(other.Filename)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ContainerKey == other.ContainerKey ||
                    this.ContainerKey != null &&
                    this.ContainerKey.Equals(other.ContainerKey)
                ) && 
                (
                    this.UpdaterName == other.UpdaterName ||
                    this.UpdaterName != null &&
                    this.UpdaterName.Equals(other.UpdaterName)
                ) && 
                (
                    this.Files == other.Files ||
                    this.Files != null &&
                    this.Files.Equals(other.Files)
                ) && 
                (
                    this.Trashed == other.Trashed ||
                    this.Trashed != null &&
                    this.Trashed.Equals(other.Trashed)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.Downloadable == other.Downloadable ||
                    this.Downloadable != null &&
                    this.Downloadable.Equals(other.Downloadable)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Filesize == other.Filesize ||
                    this.Filesize != null &&
                    this.Filesize.Equals(other.Filesize)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.DvaultItemStatus == other.DvaultItemStatus ||
                    this.DvaultItemStatus != null &&
                    this.DvaultItemStatus.Equals(other.DvaultItemStatus)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.DvaultItemFlag == other.DvaultItemFlag ||
                    this.DvaultItemFlag != null &&
                    this.DvaultItemFlag.Equals(other.DvaultItemFlag)
                ) && 
                (
                    this.Simpletype == other.Simpletype ||
                    this.Simpletype != null &&
                    this.Simpletype.Equals(other.Simpletype)
                ) && 
                (
                    this.Ratings == other.Ratings ||
                    this.Ratings != null &&
                    this.Ratings.Equals(other.Ratings)
                ) && 
                (
                    this.UpdateHiddenContainers == other.UpdateHiddenContainers ||
                    this.UpdateHiddenContainers != null &&
                    this.UpdateHiddenContainers.Equals(other.UpdateHiddenContainers)
                ) && 
                (
                    this.UpdateAllVisibleContainers == other.UpdateAllVisibleContainers ||
                    this.UpdateAllVisibleContainers != null &&
                    this.UpdateAllVisibleContainers.Equals(other.UpdateAllVisibleContainers)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.PreviewPageCount == other.PreviewPageCount ||
                    this.PreviewPageCount != null &&
                    this.PreviewPageCount.Equals(other.PreviewPageCount)
                ) && 
                (
                    this.ExternalFileID == other.ExternalFileID ||
                    this.ExternalFileID != null &&
                    this.ExternalFileID.Equals(other.ExternalFileID)
                ) && 
                (
                    this.SharedTasksCount == other.SharedTasksCount ||
                    this.SharedTasksCount != null &&
                    this.SharedTasksCount.Equals(other.SharedTasksCount)
                ) && 
                (
                    this.TransferFileVersions == other.TransferFileVersions ||
                    this.TransferFileVersions != null &&
                    this.TransferFileVersions.SequenceEqual(other.TransferFileVersions)
                ) && 
                (
                    this.UiVersion == other.UiVersion ||
                    this.UiVersion != null &&
                    this.UiVersion.Equals(other.UiVersion)
                ) && 
                (
                    this.FilestoreDirRoot == other.FilestoreDirRoot ||
                    this.FilestoreDirRoot != null &&
                    this.FilestoreDirRoot.Equals(other.FilestoreDirRoot)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.AttachedContainerIDs == other.AttachedContainerIDs ||
                    this.AttachedContainerIDs != null &&
                    this.AttachedContainerIDs.Equals(other.AttachedContainerIDs)
                ) && 
                (
                    this.ExternalFilePushToken == other.ExternalFilePushToken ||
                    this.ExternalFilePushToken != null &&
                    this.ExternalFilePushToken.Equals(other.ExternalFilePushToken)
                ) && 
                (
                    this.Originalfilename == other.Originalfilename ||
                    this.Originalfilename != null &&
                    this.Originalfilename.Equals(other.Originalfilename)
                ) && 
                (
                    this.PreviewStatus == other.PreviewStatus ||
                    this.PreviewStatus != null &&
                    this.PreviewStatus.Equals(other.PreviewStatus)
                ) && 
                (
                    this.Mimetype == other.Mimetype ||
                    this.Mimetype != null &&
                    this.Mimetype.Equals(other.Mimetype)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Userrecord != null)
                    hash = hash * 59 + this.Userrecord.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.Aclrecord != null)
                    hash = hash * 59 + this.Aclrecord.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.NaviKey != null)
                    hash = hash * 59 + this.NaviKey.GetHashCode();
                if (this.SyncToLocalFlag != null)
                    hash = hash * 59 + this.SyncToLocalFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.FilestoreFilestore != null)
                    hash = hash * 59 + this.FilestoreFilestore.GetHashCode();
                if (this.BvrevVersion != null)
                    hash = hash * 59 + this.BvrevVersion.GetHashCode();
                if (this.Folders != null)
                    hash = hash * 59 + this.Folders.GetHashCode();
                if (this.ViewHistoryFlag != null)
                    hash = hash * 59 + this.ViewHistoryFlag.GetHashCode();
                if (this.LastUpdater != null)
                    hash = hash * 59 + this.LastUpdater.GetHashCode();
                if (this.ExternalFilePath != null)
                    hash = hash * 59 + this.ExternalFilePath.GetHashCode();
                if (this.TaskKeys != null)
                    hash = hash * 59 + this.TaskKeys.GetHashCode();
                if (this.CanRemove != null)
                    hash = hash * 59 + this.CanRemove.GetHashCode();
                if (this.ThumbnailIndex != null)
                    hash = hash * 59 + this.ThumbnailIndex.GetHashCode();
                if (this.Rel != null)
                    hash = hash * 59 + this.Rel.GetHashCode();
                if (this.PostCount != null)
                    hash = hash * 59 + this.PostCount.GetHashCode();
                if (this.ExternalFileURL != null)
                    hash = hash * 59 + this.ExternalFileURL.GetHashCode();
                if (this.ExternalFileCreatorEmail != null)
                    hash = hash * 59 + this.ExternalFileCreatorEmail.GetHashCode();
                if (this.Tasks != null)
                    hash = hash * 59 + this.Tasks.GetHashCode();
                if (this.Filesizestring != null)
                    hash = hash * 59 + this.Filesizestring.GetHashCode();
                if (this.BvrevLastUpdater != null)
                    hash = hash * 59 + this.BvrevLastUpdater.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.SiteSelected != null)
                    hash = hash * 59 + this.SiteSelected.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.FileOrigin != null)
                    hash = hash * 59 + this.FileOrigin.GetHashCode();
                if (this.Commentcount != null)
                    hash = hash * 59 + this.Commentcount.GetHashCode();
                if (this.Filename != null)
                    hash = hash * 59 + this.Filename.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ContainerKey != null)
                    hash = hash * 59 + this.ContainerKey.GetHashCode();
                if (this.UpdaterName != null)
                    hash = hash * 59 + this.UpdaterName.GetHashCode();
                if (this.Files != null)
                    hash = hash * 59 + this.Files.GetHashCode();
                if (this.Trashed != null)
                    hash = hash * 59 + this.Trashed.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.Downloadable != null)
                    hash = hash * 59 + this.Downloadable.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Filesize != null)
                    hash = hash * 59 + this.Filesize.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.DvaultItemStatus != null)
                    hash = hash * 59 + this.DvaultItemStatus.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.DvaultItemFlag != null)
                    hash = hash * 59 + this.DvaultItemFlag.GetHashCode();
                if (this.Simpletype != null)
                    hash = hash * 59 + this.Simpletype.GetHashCode();
                if (this.Ratings != null)
                    hash = hash * 59 + this.Ratings.GetHashCode();
                if (this.UpdateHiddenContainers != null)
                    hash = hash * 59 + this.UpdateHiddenContainers.GetHashCode();
                if (this.UpdateAllVisibleContainers != null)
                    hash = hash * 59 + this.UpdateAllVisibleContainers.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.PreviewPageCount != null)
                    hash = hash * 59 + this.PreviewPageCount.GetHashCode();
                if (this.ExternalFileID != null)
                    hash = hash * 59 + this.ExternalFileID.GetHashCode();
                if (this.SharedTasksCount != null)
                    hash = hash * 59 + this.SharedTasksCount.GetHashCode();
                if (this.TransferFileVersions != null)
                    hash = hash * 59 + this.TransferFileVersions.GetHashCode();
                if (this.UiVersion != null)
                    hash = hash * 59 + this.UiVersion.GetHashCode();
                if (this.FilestoreDirRoot != null)
                    hash = hash * 59 + this.FilestoreDirRoot.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.AttachedContainerIDs != null)
                    hash = hash * 59 + this.AttachedContainerIDs.GetHashCode();
                if (this.ExternalFilePushToken != null)
                    hash = hash * 59 + this.ExternalFilePushToken.GetHashCode();
                if (this.Originalfilename != null)
                    hash = hash * 59 + this.Originalfilename.GetHashCode();
                if (this.PreviewStatus != null)
                    hash = hash * 59 + this.PreviewStatus.GetHashCode();
                if (this.Mimetype != null)
                    hash = hash * 59 + this.Mimetype.GetHashCode();
                return hash;
            }
        }
    }

}
