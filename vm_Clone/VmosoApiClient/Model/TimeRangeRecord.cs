/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// TimeRangeRecord
    /// </summary>
    [DataContract]
    public partial class TimeRangeRecord :  IEquatable<TimeRangeRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeRangeRecord" /> class.
        /// </summary>
        /// <param name="StartTime">Start time.</param>
        /// <param name="EndTime">End time.</param>
        /// <param name="InRange">Whether to return items inside the range.</param>
        public TimeRangeRecord(int? StartTime = null, int? EndTime = null, bool? InRange = null)
        {
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.InRange = InRange;
        }
        
        /// <summary>
        /// Start time
        /// </summary>
        /// <value>Start time</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public int? StartTime { get; set; }
        /// <summary>
        /// End time
        /// </summary>
        /// <value>End time</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public int? EndTime { get; set; }
        /// <summary>
        /// Whether to return items inside the range
        /// </summary>
        /// <value>Whether to return items inside the range</value>
        [DataMember(Name="in_range", EmitDefaultValue=false)]
        public bool? InRange { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeRangeRecord {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  InRange: ").Append(InRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TimeRangeRecord);
        }

        /// <summary>
        /// Returns true if TimeRangeRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TimeRangeRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeRangeRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.InRange == other.InRange ||
                    this.InRange != null &&
                    this.InRange.Equals(other.InRange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.InRange != null)
                    hash = hash * 59 + this.InRange.GetHashCode();
                return hash;
            }
        }
    }

}
