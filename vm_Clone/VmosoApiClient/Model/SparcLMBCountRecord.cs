/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SparcLMBCountRecord
    /// </summary>
    [DataContract]
    public partial class SparcLMBCountRecord :  IEquatable<SparcLMBCountRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SparcLMBCountRecord" /> class.
        /// </summary>
        /// <param name="SharingCount">total sharing count.</param>
        /// <param name="LogCounts">total unread action count and new unread action count.</param>
        /// <param name="ParticipantCount">total participant count.</param>
        /// <param name="VersionHistoryCount">total vresion history count.</param>
        /// <param name="MemberCount">total member count.  only valid for group..</param>
        /// <param name="AttachmentCount">total attachment count.</param>
        /// <param name="CommentCount">total comment count.</param>
        /// <param name="CommentDraftCount">total comment draft count.</param>
        public SparcLMBCountRecord(int? SharingCount = null, Object LogCounts = null, int? ParticipantCount = null, int? VersionHistoryCount = null, Object MemberCount = null, int? AttachmentCount = null, int? CommentCount = null, int? CommentDraftCount = null)
        {
            this.SharingCount = SharingCount;
            this.LogCounts = LogCounts;
            this.ParticipantCount = ParticipantCount;
            this.VersionHistoryCount = VersionHistoryCount;
            this.MemberCount = MemberCount;
            this.AttachmentCount = AttachmentCount;
            this.CommentCount = CommentCount;
            this.CommentDraftCount = CommentDraftCount;
        }
        
        /// <summary>
        /// total sharing count
        /// </summary>
        /// <value>total sharing count</value>
        [DataMember(Name="sharingCount", EmitDefaultValue=false)]
        public int? SharingCount { get; set; }
        /// <summary>
        /// total unread action count and new unread action count
        /// </summary>
        /// <value>total unread action count and new unread action count</value>
        [DataMember(Name="logCounts", EmitDefaultValue=false)]
        public Object LogCounts { get; set; }
        /// <summary>
        /// total participant count
        /// </summary>
        /// <value>total participant count</value>
        [DataMember(Name="participantCount", EmitDefaultValue=false)]
        public int? ParticipantCount { get; set; }
        /// <summary>
        /// total vresion history count
        /// </summary>
        /// <value>total vresion history count</value>
        [DataMember(Name="versionHistoryCount", EmitDefaultValue=false)]
        public int? VersionHistoryCount { get; set; }
        /// <summary>
        /// total member count.  only valid for group.
        /// </summary>
        /// <value>total member count.  only valid for group.</value>
        [DataMember(Name="memberCount", EmitDefaultValue=false)]
        public Object MemberCount { get; set; }
        /// <summary>
        /// total attachment count
        /// </summary>
        /// <value>total attachment count</value>
        [DataMember(Name="attachmentCount", EmitDefaultValue=false)]
        public int? AttachmentCount { get; set; }
        /// <summary>
        /// total comment count
        /// </summary>
        /// <value>total comment count</value>
        [DataMember(Name="commentCount", EmitDefaultValue=false)]
        public int? CommentCount { get; set; }
        /// <summary>
        /// total comment draft count
        /// </summary>
        /// <value>total comment draft count</value>
        [DataMember(Name="commentDraftCount", EmitDefaultValue=false)]
        public int? CommentDraftCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SparcLMBCountRecord {\n");
            sb.Append("  SharingCount: ").Append(SharingCount).Append("\n");
            sb.Append("  LogCounts: ").Append(LogCounts).Append("\n");
            sb.Append("  ParticipantCount: ").Append(ParticipantCount).Append("\n");
            sb.Append("  VersionHistoryCount: ").Append(VersionHistoryCount).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  CommentDraftCount: ").Append(CommentDraftCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SparcLMBCountRecord);
        }

        /// <summary>
        /// Returns true if SparcLMBCountRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SparcLMBCountRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SparcLMBCountRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SharingCount == other.SharingCount ||
                    this.SharingCount != null &&
                    this.SharingCount.Equals(other.SharingCount)
                ) && 
                (
                    this.LogCounts == other.LogCounts ||
                    this.LogCounts != null &&
                    this.LogCounts.Equals(other.LogCounts)
                ) && 
                (
                    this.ParticipantCount == other.ParticipantCount ||
                    this.ParticipantCount != null &&
                    this.ParticipantCount.Equals(other.ParticipantCount)
                ) && 
                (
                    this.VersionHistoryCount == other.VersionHistoryCount ||
                    this.VersionHistoryCount != null &&
                    this.VersionHistoryCount.Equals(other.VersionHistoryCount)
                ) && 
                (
                    this.MemberCount == other.MemberCount ||
                    this.MemberCount != null &&
                    this.MemberCount.Equals(other.MemberCount)
                ) && 
                (
                    this.AttachmentCount == other.AttachmentCount ||
                    this.AttachmentCount != null &&
                    this.AttachmentCount.Equals(other.AttachmentCount)
                ) && 
                (
                    this.CommentCount == other.CommentCount ||
                    this.CommentCount != null &&
                    this.CommentCount.Equals(other.CommentCount)
                ) && 
                (
                    this.CommentDraftCount == other.CommentDraftCount ||
                    this.CommentDraftCount != null &&
                    this.CommentDraftCount.Equals(other.CommentDraftCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SharingCount != null)
                    hash = hash * 59 + this.SharingCount.GetHashCode();
                if (this.LogCounts != null)
                    hash = hash * 59 + this.LogCounts.GetHashCode();
                if (this.ParticipantCount != null)
                    hash = hash * 59 + this.ParticipantCount.GetHashCode();
                if (this.VersionHistoryCount != null)
                    hash = hash * 59 + this.VersionHistoryCount.GetHashCode();
                if (this.MemberCount != null)
                    hash = hash * 59 + this.MemberCount.GetHashCode();
                if (this.AttachmentCount != null)
                    hash = hash * 59 + this.AttachmentCount.GetHashCode();
                if (this.CommentCount != null)
                    hash = hash * 59 + this.CommentCount.GetHashCode();
                if (this.CommentDraftCount != null)
                    hash = hash * 59 + this.CommentDraftCount.GetHashCode();
                return hash;
            }
        }
    }

}
