/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SearchListOptionsRecord
    /// </summary>
    [DataContract]
    public partial class SearchListOptionsRecord : ListOptionsRecord,  IEquatable<SearchListOptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchListOptionsRecord" /> class.
        /// </summary>
        /// <param name="FolderKey">Type of ListOptions record..</param>
        /// <param name="Format">Format.</param>
        /// <param name="Type">Type of ListOptions record..</param>
        /// <param name="SearchString">retrieve items by the string..</param>
        /// <param name="Search">.</param>
        /// <param name="SortField">.</param>
        public SearchListOptionsRecord(string FolderKey = null, FormatRecord Format = null, string Type = null, string SearchString = null, string Search = null, string SortField = null)
        {
            this.FolderKey = FolderKey;
            this.Format = Format;
            this.Type = Type;
            this.SearchString = SearchString;
            this.Search = Search;
            this.SortField = SortField;
        }
        
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="folderKey", EmitDefaultValue=false)]
        public string FolderKey { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatRecord Format { get; set; }
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// retrieve items by the string.
        /// </summary>
        /// <value>retrieve items by the string.</value>
        [DataMember(Name="search_string", EmitDefaultValue=false)]
        public string SearchString { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="search", EmitDefaultValue=false)]
        public string Search { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="sortField", EmitDefaultValue=false)]
        public string SortField { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchListOptionsRecord {\n");
            sb.Append("  FolderKey: ").Append(FolderKey).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SearchString: ").Append(SearchString).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SearchListOptionsRecord);
        }

        /// <summary>
        /// Returns true if SearchListOptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchListOptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchListOptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FolderKey == other.FolderKey ||
                    this.FolderKey != null &&
                    this.FolderKey.Equals(other.FolderKey)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SearchString == other.SearchString ||
                    this.SearchString != null &&
                    this.SearchString.Equals(other.SearchString)
                ) && 
                (
                    this.Search == other.Search ||
                    this.Search != null &&
                    this.Search.Equals(other.Search)
                ) && 
                (
                    this.SortField == other.SortField ||
                    this.SortField != null &&
                    this.SortField.Equals(other.SortField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FolderKey != null)
                    hash = hash * 59 + this.FolderKey.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SearchString != null)
                    hash = hash * 59 + this.SearchString.GetHashCode();
                if (this.Search != null)
                    hash = hash * 59 + this.Search.GetHashCode();
                if (this.SortField != null)
                    hash = hash * 59 + this.SortField.GetHashCode();
                return hash;
            }
        }
    }

}
