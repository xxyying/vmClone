/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ParticipantCountRecord
    /// </summary>
    [DataContract]
    public partial class ParticipantCountRecord :  IEquatable<ParticipantCountRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticipantCountRecord" /> class.
        /// </summary>
        /// <param name="ContactGroups">.</param>
        /// <param name="Contacts">.</param>
        /// <param name="Viewer">.</param>
        /// <param name="Admins">.</param>
        /// <param name="ContactAndGroups">.</param>
        /// <param name="Members">.</param>
        public ParticipantCountRecord(int? ContactGroups = null, int? Contacts = null, int? Viewer = null, int? Admins = null, int? ContactAndGroups = null, int? Members = null)
        {
            this.ContactGroups = ContactGroups;
            this.Contacts = Contacts;
            this.Viewer = Viewer;
            this.Admins = Admins;
            this.ContactAndGroups = ContactAndGroups;
            this.Members = Members;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ContactGroups", EmitDefaultValue=false)]
        public int? ContactGroups { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Contacts", EmitDefaultValue=false)]
        public int? Contacts { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Viewer", EmitDefaultValue=false)]
        public int? Viewer { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Admins", EmitDefaultValue=false)]
        public int? Admins { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ContactAndGroups", EmitDefaultValue=false)]
        public int? ContactAndGroups { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Members", EmitDefaultValue=false)]
        public int? Members { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParticipantCountRecord {\n");
            sb.Append("  ContactGroups: ").Append(ContactGroups).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  ContactAndGroups: ").Append(ContactAndGroups).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ParticipantCountRecord);
        }

        /// <summary>
        /// Returns true if ParticipantCountRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ParticipantCountRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParticipantCountRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ContactGroups == other.ContactGroups ||
                    this.ContactGroups != null &&
                    this.ContactGroups.Equals(other.ContactGroups)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.Equals(other.Contacts)
                ) && 
                (
                    this.Viewer == other.Viewer ||
                    this.Viewer != null &&
                    this.Viewer.Equals(other.Viewer)
                ) && 
                (
                    this.Admins == other.Admins ||
                    this.Admins != null &&
                    this.Admins.Equals(other.Admins)
                ) && 
                (
                    this.ContactAndGroups == other.ContactAndGroups ||
                    this.ContactAndGroups != null &&
                    this.ContactAndGroups.Equals(other.ContactAndGroups)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.Equals(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ContactGroups != null)
                    hash = hash * 59 + this.ContactGroups.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.Viewer != null)
                    hash = hash * 59 + this.Viewer.GetHashCode();
                if (this.Admins != null)
                    hash = hash * 59 + this.Admins.GetHashCode();
                if (this.ContactAndGroups != null)
                    hash = hash * 59 + this.ContactAndGroups.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                return hash;
            }
        }
    }

}
