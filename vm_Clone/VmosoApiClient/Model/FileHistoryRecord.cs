/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// FileHistoryRecord
    /// </summary>
    [DataContract]
    public partial class FileHistoryRecord :  IEquatable<FileHistoryRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileHistoryRecord" /> class.
        /// </summary>
        /// <param name="Actor">Actor.</param>
        /// <param name="FilestoreFilestore">filestore of file..</param>
        /// <param name="Note">File note.</param>
        /// <param name="Contentkey">Key of file..</param>
        /// <param name="UiVersionNumber">Ui File version number.</param>
        /// <param name="Filename">Display name of file..</param>
        /// <param name="Vsnumber">File version number.</param>
        /// <param name="Index">File index number.</param>
        /// <param name="Action">Action - Will be filled in for file download history..</param>
        /// <param name="Filekey">Key of file..</param>
        /// <param name="Time">.</param>
        public FileHistoryRecord(DisplayRecord Actor = null, string FilestoreFilestore = null, string Note = null, string Contentkey = null, int? UiVersionNumber = null, string Filename = null, int? Vsnumber = null, int? Index = null, string Action = null, string Filekey = null, int? Time = null)
        {
            this.Actor = Actor;
            this.FilestoreFilestore = FilestoreFilestore;
            this.Note = Note;
            this.Contentkey = Contentkey;
            this.UiVersionNumber = UiVersionNumber;
            this.Filename = Filename;
            this.Vsnumber = Vsnumber;
            this.Index = Index;
            this.Action = Action;
            this.Filekey = Filekey;
            this.Time = Time;
        }
        
        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public DisplayRecord Actor { get; set; }
        /// <summary>
        /// filestore of file.
        /// </summary>
        /// <value>filestore of file.</value>
        [DataMember(Name="filestore_filestore", EmitDefaultValue=false)]
        public string FilestoreFilestore { get; set; }
        /// <summary>
        /// File note
        /// </summary>
        /// <value>File note</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// Key of file.
        /// </summary>
        /// <value>Key of file.</value>
        [DataMember(Name="contentkey", EmitDefaultValue=false)]
        public string Contentkey { get; set; }
        /// <summary>
        /// Ui File version number
        /// </summary>
        /// <value>Ui File version number</value>
        [DataMember(Name="uiVersionNumber", EmitDefaultValue=false)]
        public int? UiVersionNumber { get; set; }
        /// <summary>
        /// Display name of file.
        /// </summary>
        /// <value>Display name of file.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }
        /// <summary>
        /// File version number
        /// </summary>
        /// <value>File version number</value>
        [DataMember(Name="vsnumber", EmitDefaultValue=false)]
        public int? Vsnumber { get; set; }
        /// <summary>
        /// File index number
        /// </summary>
        /// <value>File index number</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }
        /// <summary>
        /// Action - Will be filled in for file download history.
        /// </summary>
        /// <value>Action - Will be filled in for file download history.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Key of file.
        /// </summary>
        /// <value>Key of file.</value>
        [DataMember(Name="filekey", EmitDefaultValue=false)]
        public string Filekey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public int? Time { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileHistoryRecord {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  FilestoreFilestore: ").Append(FilestoreFilestore).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Contentkey: ").Append(Contentkey).Append("\n");
            sb.Append("  UiVersionNumber: ").Append(UiVersionNumber).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Vsnumber: ").Append(Vsnumber).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Filekey: ").Append(Filekey).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FileHistoryRecord);
        }

        /// <summary>
        /// Returns true if FileHistoryRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of FileHistoryRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileHistoryRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Actor == other.Actor ||
                    this.Actor != null &&
                    this.Actor.Equals(other.Actor)
                ) && 
                (
                    this.FilestoreFilestore == other.FilestoreFilestore ||
                    this.FilestoreFilestore != null &&
                    this.FilestoreFilestore.Equals(other.FilestoreFilestore)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.Contentkey == other.Contentkey ||
                    this.Contentkey != null &&
                    this.Contentkey.Equals(other.Contentkey)
                ) && 
                (
                    this.UiVersionNumber == other.UiVersionNumber ||
                    this.UiVersionNumber != null &&
                    this.UiVersionNumber.Equals(other.UiVersionNumber)
                ) && 
                (
                    this.Filename == other.Filename ||
                    this.Filename != null &&
                    this.Filename.Equals(other.Filename)
                ) && 
                (
                    this.Vsnumber == other.Vsnumber ||
                    this.Vsnumber != null &&
                    this.Vsnumber.Equals(other.Vsnumber)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Filekey == other.Filekey ||
                    this.Filekey != null &&
                    this.Filekey.Equals(other.Filekey)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Actor != null)
                    hash = hash * 59 + this.Actor.GetHashCode();
                if (this.FilestoreFilestore != null)
                    hash = hash * 59 + this.FilestoreFilestore.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.Contentkey != null)
                    hash = hash * 59 + this.Contentkey.GetHashCode();
                if (this.UiVersionNumber != null)
                    hash = hash * 59 + this.UiVersionNumber.GetHashCode();
                if (this.Filename != null)
                    hash = hash * 59 + this.Filename.GetHashCode();
                if (this.Vsnumber != null)
                    hash = hash * 59 + this.Vsnumber.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Filekey != null)
                    hash = hash * 59 + this.Filekey.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                return hash;
            }
        }
    }

}
