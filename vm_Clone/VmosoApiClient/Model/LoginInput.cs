/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// LoginInput
    /// </summary>
    [DataContract]
    public partial class LoginInput :  IEquatable<LoginInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginInput" /> class.
        /// </summary>
        /// <param name="ZoneOffset">zoneOffset (required).</param>
        /// <param name="ToDSTTime">dst time end (required).</param>
        /// <param name="AutoRegister"> (required).</param>
        /// <param name="Dst"> (required).</param>
        /// <param name="Auth">Auth (required).</param>
        /// <param name="CurOffset">current timezone offset (required).</param>
        /// <param name="FromDSTTime">dst time begin (required).</param>
        /// <param name="Cid"> (required).</param>
        /// <param name="UserTimezone">user timezone using (required).</param>
        /// <param name="Target">Target URL (required).</param>
        public LoginInput(string ZoneOffset = null, string ToDSTTime = null, bool? AutoRegister = null, string Dst = null, AuthnInfoRecord Auth = null, string CurOffset = null, string FromDSTTime = null, string Cid = null, string UserTimezone = null, string Target = null)
        {
            // to ensure "ZoneOffset" is required (not null)
            if (ZoneOffset == null)
            {
                throw new InvalidDataException("ZoneOffset is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.ZoneOffset = ZoneOffset;
            }
            // to ensure "ToDSTTime" is required (not null)
            if (ToDSTTime == null)
            {
                throw new InvalidDataException("ToDSTTime is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.ToDSTTime = ToDSTTime;
            }
            // to ensure "AutoRegister" is required (not null)
            if (AutoRegister == null)
            {
                throw new InvalidDataException("AutoRegister is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.AutoRegister = AutoRegister;
            }
            // to ensure "Dst" is required (not null)
            if (Dst == null)
            {
                throw new InvalidDataException("Dst is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.Dst = Dst;
            }
            // to ensure "Auth" is required (not null)
            if (Auth == null)
            {
                throw new InvalidDataException("Auth is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.Auth = Auth;
            }
            // to ensure "CurOffset" is required (not null)
            if (CurOffset == null)
            {
                throw new InvalidDataException("CurOffset is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.CurOffset = CurOffset;
            }
            // to ensure "FromDSTTime" is required (not null)
            if (FromDSTTime == null)
            {
                throw new InvalidDataException("FromDSTTime is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.FromDSTTime = FromDSTTime;
            }
            // to ensure "Cid" is required (not null)
            if (Cid == null)
            {
                throw new InvalidDataException("Cid is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.Cid = Cid;
            }
            // to ensure "UserTimezone" is required (not null)
            if (UserTimezone == null)
            {
                throw new InvalidDataException("UserTimezone is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.UserTimezone = UserTimezone;
            }
            // to ensure "Target" is required (not null)
            if (Target == null)
            {
                throw new InvalidDataException("Target is a required property for LoginInput and cannot be null");
            }
            else
            {
                this.Target = Target;
            }
        }
        
        /// <summary>
        /// zoneOffset
        /// </summary>
        /// <value>zoneOffset</value>
        [DataMember(Name="zoneOffset", EmitDefaultValue=false)]
        public string ZoneOffset { get; set; }
        /// <summary>
        /// dst time end
        /// </summary>
        /// <value>dst time end</value>
        [DataMember(Name="toDSTTime", EmitDefaultValue=false)]
        public string ToDSTTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="auto_register", EmitDefaultValue=false)]
        public bool? AutoRegister { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="dst", EmitDefaultValue=false)]
        public string Dst { get; set; }
        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name="auth", EmitDefaultValue=false)]
        public AuthnInfoRecord Auth { get; set; }
        /// <summary>
        /// current timezone offset
        /// </summary>
        /// <value>current timezone offset</value>
        [DataMember(Name="cur_offset", EmitDefaultValue=false)]
        public string CurOffset { get; set; }
        /// <summary>
        /// dst time begin
        /// </summary>
        /// <value>dst time begin</value>
        [DataMember(Name="fromDSTTime", EmitDefaultValue=false)]
        public string FromDSTTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public string Cid { get; set; }
        /// <summary>
        /// user timezone using
        /// </summary>
        /// <value>user timezone using</value>
        [DataMember(Name="user_timezone", EmitDefaultValue=false)]
        public string UserTimezone { get; set; }
        /// <summary>
        /// Target URL
        /// </summary>
        /// <value>Target URL</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginInput {\n");
            sb.Append("  ZoneOffset: ").Append(ZoneOffset).Append("\n");
            sb.Append("  ToDSTTime: ").Append(ToDSTTime).Append("\n");
            sb.Append("  AutoRegister: ").Append(AutoRegister).Append("\n");
            sb.Append("  Dst: ").Append(Dst).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  CurOffset: ").Append(CurOffset).Append("\n");
            sb.Append("  FromDSTTime: ").Append(FromDSTTime).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  UserTimezone: ").Append(UserTimezone).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LoginInput);
        }

        /// <summary>
        /// Returns true if LoginInput instances are equal
        /// </summary>
        /// <param name="other">Instance of LoginInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ZoneOffset == other.ZoneOffset ||
                    this.ZoneOffset != null &&
                    this.ZoneOffset.Equals(other.ZoneOffset)
                ) && 
                (
                    this.ToDSTTime == other.ToDSTTime ||
                    this.ToDSTTime != null &&
                    this.ToDSTTime.Equals(other.ToDSTTime)
                ) && 
                (
                    this.AutoRegister == other.AutoRegister ||
                    this.AutoRegister != null &&
                    this.AutoRegister.Equals(other.AutoRegister)
                ) && 
                (
                    this.Dst == other.Dst ||
                    this.Dst != null &&
                    this.Dst.Equals(other.Dst)
                ) && 
                (
                    this.Auth == other.Auth ||
                    this.Auth != null &&
                    this.Auth.Equals(other.Auth)
                ) && 
                (
                    this.CurOffset == other.CurOffset ||
                    this.CurOffset != null &&
                    this.CurOffset.Equals(other.CurOffset)
                ) && 
                (
                    this.FromDSTTime == other.FromDSTTime ||
                    this.FromDSTTime != null &&
                    this.FromDSTTime.Equals(other.FromDSTTime)
                ) && 
                (
                    this.Cid == other.Cid ||
                    this.Cid != null &&
                    this.Cid.Equals(other.Cid)
                ) && 
                (
                    this.UserTimezone == other.UserTimezone ||
                    this.UserTimezone != null &&
                    this.UserTimezone.Equals(other.UserTimezone)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ZoneOffset != null)
                    hash = hash * 59 + this.ZoneOffset.GetHashCode();
                if (this.ToDSTTime != null)
                    hash = hash * 59 + this.ToDSTTime.GetHashCode();
                if (this.AutoRegister != null)
                    hash = hash * 59 + this.AutoRegister.GetHashCode();
                if (this.Dst != null)
                    hash = hash * 59 + this.Dst.GetHashCode();
                if (this.Auth != null)
                    hash = hash * 59 + this.Auth.GetHashCode();
                if (this.CurOffset != null)
                    hash = hash * 59 + this.CurOffset.GetHashCode();
                if (this.FromDSTTime != null)
                    hash = hash * 59 + this.FromDSTTime.GetHashCode();
                if (this.Cid != null)
                    hash = hash * 59 + this.Cid.GetHashCode();
                if (this.UserTimezone != null)
                    hash = hash * 59 + this.UserTimezone.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                return hash;
            }
        }
    }

}
