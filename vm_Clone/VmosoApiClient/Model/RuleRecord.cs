/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// RuleRecord
    /// </summary>
    [DataContract]
    public partial class RuleRecord : ObjectV2Record,  IEquatable<RuleRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRecord" /> class.
        /// </summary>
        /// <param name="HasDraft">the login user has comment drafts in this object..</param>
        /// <param name="Editor">Editor.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="ExplicitReadCount">ExplicitReadCount.</param>
        /// <param name="FavoriteFlag">ImportantFlag..</param>
        /// <param name="Destinations">Destinations where this object has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="RefmeFlag">RefmeFlag..</param>
        /// <param name="Type">Type of document record..</param>
        /// <param name="Locale">Locale language..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="ImportantFlag">ImportantFlag..</param>
        /// <param name="LifecycleState">lifecycle state..</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Type of document record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Key">Key of document record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status..</param>
        /// <param name="HybridFlag">Hybrid Flag..</param>
        /// <param name="LinkedTo">Array of selected spaces.</param>
        /// <param name="RegistrationStatus">Array of selected registration status.</param>
        /// <param name="Modes">Array of selected modes (RefMe/Followed...)..</param>
        /// <param name="Keywords">Rule keywords for search..</param>
        /// <param name="DisplayName">Rule Display Name.</param>
        /// <param name="RefDirection">Array of selected reference direction (inbound/outbound).</param>
        /// <param name="Description">Rule description..</param>
        /// <param name="Owners">Array of selected owners.</param>
        /// <param name="ContactType">Array of selected contact type.</param>
        /// <param name="Viewing">Array of selected viewing.</param>
        /// <param name="Lifecycle">Array of selected lifecycleState.</param>
        /// <param name="ContactPendingRequest">Array of selected contact request type.</param>
        /// <param name="SortDirection">Array of selected sorting direction.</param>
        /// <param name="RuleGroup">Rule Group (Activities/People/Spaces/...).</param>
        /// <param name="SortBy">Array of selected sorting.</param>
        /// <param name="SubFilters">SubFilters.</param>
        /// <param name="DisplayNameKey">Name language key.</param>
        /// <param name="AdvancedUsageMode">Rule advanced usage mode.</param>
        /// <param name="Types">Array of selected object types (Tasks/Posts/Chats...)..</param>
        /// <param name="RefTypes">Array of selected reference types (@/#/&amp;).</param>
        /// <param name="SearchBy">Search By location..</param>
        /// <param name="ContactRequest">Array of selected contact request type.</param>
        /// <param name="Sharing">Array of selected sharing.</param>
        /// <param name="Relevance">Array of selected relevance.</param>
        /// <param name="VmosoSolution">Rule vmoso/enterprise solution attribute.</param>
        /// <param name="IsDefault">Flag indicates if this rule is the default..</param>
        /// <param name="CommentSizing">Selected comment sizing style.</param>
        /// <param name="ChildRules">Array of child rule records.</param>
        /// <param name="IncludeTaskTemplates">Rule include tasktemplates flag.</param>
        /// <param name="DisplaySubFilters">Indicates if Show SubFilters flag to be displayed..</param>
        /// <param name="Organization">Array of selected organization.</param>
        /// <param name="Name">Rule name/title..</param>
        /// <param name="LevelFilter">Array of selected level filter.</param>
        /// <param name="DisplayInfo">Display rule info in UI.</param>
        /// <param name="PresetRule">Preset Rule.</param>
        /// <param name="Style">Array of selected display style.</param>
        public RuleRecord(bool? HasDraft = null, DisplayRecord Editor = null, DisplayRecord Creator = null, ObjectReadInfoRecord ExplicitReadCount = null, bool? FavoriteFlag = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, bool? RefmeFlag = null, string Type = null, string Locale = null, int? Timeupdated = null, bool? ImportantFlag = null, string LifecycleState = null, int? Timecreated = null, int? DominantTime = null, bool? HideFlag = null, string Subtype = null, bool? PinFlag = null, bool? FollowFlag = null, string Key = null, int? PinTime = null, string Status = null, bool? HybridFlag = null, List<string> LinkedTo = null, List<string> RegistrationStatus = null, List<string> Modes = null, string Keywords = null, string DisplayName = null, List<string> RefDirection = null, string Description = null, List<string> Owners = null, List<string> ContactType = null, List<string> Viewing = null, List<string> Lifecycle = null, List<string> ContactPendingRequest = null, List<string> SortDirection = null, string RuleGroup = null, List<string> SortBy = null, SubFilterRecord SubFilters = null, string DisplayNameKey = null, string AdvancedUsageMode = null, List<string> Types = null, List<string> RefTypes = null, string SearchBy = null, List<string> ContactRequest = null, List<string> Sharing = null, List<string> Relevance = null, string VmosoSolution = null, bool? IsDefault = null, List<string> CommentSizing = null, List<RuleRecord> ChildRules = null, string IncludeTaskTemplates = null, bool? DisplaySubFilters = null, List<string> Organization = null, string Name = null, List<string> LevelFilter = null, bool? DisplayInfo = null, bool? PresetRule = null, List<string> Style = null)
        {
            this.HasDraft = HasDraft;
            this.Editor = Editor;
            this.Creator = Creator;
            this.ExplicitReadCount = ExplicitReadCount;
            this.FavoriteFlag = FavoriteFlag;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.RefmeFlag = RefmeFlag;
            this.Type = Type;
            this.Locale = Locale;
            this.Timeupdated = Timeupdated;
            this.ImportantFlag = ImportantFlag;
            this.LifecycleState = LifecycleState;
            this.Timecreated = Timecreated;
            this.DominantTime = DominantTime;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.HybridFlag = HybridFlag;
            this.LinkedTo = LinkedTo;
            this.RegistrationStatus = RegistrationStatus;
            this.Modes = Modes;
            this.Keywords = Keywords;
            this.DisplayName = DisplayName;
            this.RefDirection = RefDirection;
            this.Description = Description;
            this.Owners = Owners;
            this.ContactType = ContactType;
            this.Viewing = Viewing;
            this.Lifecycle = Lifecycle;
            this.ContactPendingRequest = ContactPendingRequest;
            this.SortDirection = SortDirection;
            this.RuleGroup = RuleGroup;
            this.SortBy = SortBy;
            this.SubFilters = SubFilters;
            this.DisplayNameKey = DisplayNameKey;
            this.AdvancedUsageMode = AdvancedUsageMode;
            this.Types = Types;
            this.RefTypes = RefTypes;
            this.SearchBy = SearchBy;
            this.ContactRequest = ContactRequest;
            this.Sharing = Sharing;
            this.Relevance = Relevance;
            this.VmosoSolution = VmosoSolution;
            this.IsDefault = IsDefault;
            this.CommentSizing = CommentSizing;
            this.ChildRules = ChildRules;
            this.IncludeTaskTemplates = IncludeTaskTemplates;
            this.DisplaySubFilters = DisplaySubFilters;
            this.Organization = Organization;
            this.Name = Name;
            this.LevelFilter = LevelFilter;
            this.DisplayInfo = DisplayInfo;
            this.PresetRule = PresetRule;
            this.Style = Style;
        }
        
        /// <summary>
        /// the login user has comment drafts in this object.
        /// </summary>
        /// <value>the login user has comment drafts in this object.</value>
        [DataMember(Name="hasDraft", EmitDefaultValue=false)]
        public bool? HasDraft { get; set; }
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Gets or Sets ExplicitReadCount
        /// </summary>
        [DataMember(Name="explicitReadCount", EmitDefaultValue=false)]
        public ObjectReadInfoRecord ExplicitReadCount { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public bool? FavoriteFlag { get; set; }
        /// <summary>
        /// Destinations where this object has been placed.
        /// </summary>
        /// <value>Destinations where this object has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// RefmeFlag.
        /// </summary>
        /// <value>RefmeFlag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Locale language.
        /// </summary>
        /// <value>Locale language.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public bool? ImportantFlag { get; set; }
        /// <summary>
        /// lifecycle state.
        /// </summary>
        /// <value>lifecycle state.</value>
        [DataMember(Name="lifecycle_state", EmitDefaultValue=false)]
        public string LifecycleState { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public bool? HideFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public bool? PinFlag { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Key of document record.
        /// </summary>
        /// <value>Key of document record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status.
        /// </summary>
        /// <value>Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Hybrid Flag.
        /// </summary>
        /// <value>Hybrid Flag.</value>
        [DataMember(Name="hybridFlag", EmitDefaultValue=false)]
        public bool? HybridFlag { get; set; }
        /// <summary>
        /// Array of selected spaces
        /// </summary>
        /// <value>Array of selected spaces</value>
        [DataMember(Name="linkedTo", EmitDefaultValue=false)]
        public List<string> LinkedTo { get; set; }
        /// <summary>
        /// Array of selected registration status
        /// </summary>
        /// <value>Array of selected registration status</value>
        [DataMember(Name="registrationStatus", EmitDefaultValue=false)]
        public List<string> RegistrationStatus { get; set; }
        /// <summary>
        /// Array of selected modes (RefMe/Followed...).
        /// </summary>
        /// <value>Array of selected modes (RefMe/Followed...).</value>
        [DataMember(Name="modes", EmitDefaultValue=false)]
        public List<string> Modes { get; set; }
        /// <summary>
        /// Rule keywords for search.
        /// </summary>
        /// <value>Rule keywords for search.</value>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public string Keywords { get; set; }
        /// <summary>
        /// Rule Display Name
        /// </summary>
        /// <value>Rule Display Name</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Array of selected reference direction (inbound/outbound)
        /// </summary>
        /// <value>Array of selected reference direction (inbound/outbound)</value>
        [DataMember(Name="refDirection", EmitDefaultValue=false)]
        public List<string> RefDirection { get; set; }
        /// <summary>
        /// Rule description.
        /// </summary>
        /// <value>Rule description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Array of selected owners
        /// </summary>
        /// <value>Array of selected owners</value>
        [DataMember(Name="owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }
        /// <summary>
        /// Array of selected contact type
        /// </summary>
        /// <value>Array of selected contact type</value>
        [DataMember(Name="contactType", EmitDefaultValue=false)]
        public List<string> ContactType { get; set; }
        /// <summary>
        /// Array of selected viewing
        /// </summary>
        /// <value>Array of selected viewing</value>
        [DataMember(Name="viewing", EmitDefaultValue=false)]
        public List<string> Viewing { get; set; }
        /// <summary>
        /// Array of selected lifecycleState
        /// </summary>
        /// <value>Array of selected lifecycleState</value>
        [DataMember(Name="lifecycle", EmitDefaultValue=false)]
        public List<string> Lifecycle { get; set; }
        /// <summary>
        /// Array of selected contact request type
        /// </summary>
        /// <value>Array of selected contact request type</value>
        [DataMember(Name="contactPendingRequest", EmitDefaultValue=false)]
        public List<string> ContactPendingRequest { get; set; }
        /// <summary>
        /// Array of selected sorting direction
        /// </summary>
        /// <value>Array of selected sorting direction</value>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public List<string> SortDirection { get; set; }
        /// <summary>
        /// Rule Group (Activities/People/Spaces/...)
        /// </summary>
        /// <value>Rule Group (Activities/People/Spaces/...)</value>
        [DataMember(Name="ruleGroup", EmitDefaultValue=false)]
        public string RuleGroup { get; set; }
        /// <summary>
        /// Array of selected sorting
        /// </summary>
        /// <value>Array of selected sorting</value>
        [DataMember(Name="sortBy", EmitDefaultValue=false)]
        public List<string> SortBy { get; set; }
        /// <summary>
        /// Gets or Sets SubFilters
        /// </summary>
        [DataMember(Name="subFilters", EmitDefaultValue=false)]
        public SubFilterRecord SubFilters { get; set; }
        /// <summary>
        /// Name language key
        /// </summary>
        /// <value>Name language key</value>
        [DataMember(Name="displayNameKey", EmitDefaultValue=false)]
        public string DisplayNameKey { get; set; }
        /// <summary>
        /// Rule advanced usage mode
        /// </summary>
        /// <value>Rule advanced usage mode</value>
        [DataMember(Name="advancedUsageMode", EmitDefaultValue=false)]
        public string AdvancedUsageMode { get; set; }
        /// <summary>
        /// Array of selected object types (Tasks/Posts/Chats...).
        /// </summary>
        /// <value>Array of selected object types (Tasks/Posts/Chats...).</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }
        /// <summary>
        /// Array of selected reference types (@/#/&amp;)
        /// </summary>
        /// <value>Array of selected reference types (@/#/&amp;)</value>
        [DataMember(Name="refTypes", EmitDefaultValue=false)]
        public List<string> RefTypes { get; set; }
        /// <summary>
        /// Search By location.
        /// </summary>
        /// <value>Search By location.</value>
        [DataMember(Name="searchBy", EmitDefaultValue=false)]
        public string SearchBy { get; set; }
        /// <summary>
        /// Array of selected contact request type
        /// </summary>
        /// <value>Array of selected contact request type</value>
        [DataMember(Name="contactRequest", EmitDefaultValue=false)]
        public List<string> ContactRequest { get; set; }
        /// <summary>
        /// Array of selected sharing
        /// </summary>
        /// <value>Array of selected sharing</value>
        [DataMember(Name="sharing", EmitDefaultValue=false)]
        public List<string> Sharing { get; set; }
        /// <summary>
        /// Array of selected relevance
        /// </summary>
        /// <value>Array of selected relevance</value>
        [DataMember(Name="relevance", EmitDefaultValue=false)]
        public List<string> Relevance { get; set; }
        /// <summary>
        /// Rule vmoso/enterprise solution attribute
        /// </summary>
        /// <value>Rule vmoso/enterprise solution attribute</value>
        [DataMember(Name="vmosoSolution", EmitDefaultValue=false)]
        public string VmosoSolution { get; set; }
        /// <summary>
        /// Flag indicates if this rule is the default.
        /// </summary>
        /// <value>Flag indicates if this rule is the default.</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Selected comment sizing style
        /// </summary>
        /// <value>Selected comment sizing style</value>
        [DataMember(Name="commentSizing", EmitDefaultValue=false)]
        public List<string> CommentSizing { get; set; }
        /// <summary>
        /// Array of child rule records
        /// </summary>
        /// <value>Array of child rule records</value>
        [DataMember(Name="childRules", EmitDefaultValue=false)]
        public List<RuleRecord> ChildRules { get; set; }
        /// <summary>
        /// Rule include tasktemplates flag
        /// </summary>
        /// <value>Rule include tasktemplates flag</value>
        [DataMember(Name="includeTaskTemplates", EmitDefaultValue=false)]
        public string IncludeTaskTemplates { get; set; }
        /// <summary>
        /// Indicates if Show SubFilters flag to be displayed.
        /// </summary>
        /// <value>Indicates if Show SubFilters flag to be displayed.</value>
        [DataMember(Name="displaySubFilters", EmitDefaultValue=false)]
        public bool? DisplaySubFilters { get; set; }
        /// <summary>
        /// Array of selected organization
        /// </summary>
        /// <value>Array of selected organization</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public List<string> Organization { get; set; }
        /// <summary>
        /// Rule name/title.
        /// </summary>
        /// <value>Rule name/title.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Array of selected level filter
        /// </summary>
        /// <value>Array of selected level filter</value>
        [DataMember(Name="levelFilter", EmitDefaultValue=false)]
        public List<string> LevelFilter { get; set; }
        /// <summary>
        /// Display rule info in UI
        /// </summary>
        /// <value>Display rule info in UI</value>
        [DataMember(Name="displayInfo", EmitDefaultValue=false)]
        public bool? DisplayInfo { get; set; }
        /// <summary>
        /// Preset Rule
        /// </summary>
        /// <value>Preset Rule</value>
        [DataMember(Name="presetRule", EmitDefaultValue=false)]
        public bool? PresetRule { get; set; }
        /// <summary>
        /// Array of selected display style
        /// </summary>
        /// <value>Array of selected display style</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public List<string> Style { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleRecord {\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExplicitReadCount: ").Append(ExplicitReadCount).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HybridFlag: ").Append(HybridFlag).Append("\n");
            sb.Append("  LinkedTo: ").Append(LinkedTo).Append("\n");
            sb.Append("  RegistrationStatus: ").Append(RegistrationStatus).Append("\n");
            sb.Append("  Modes: ").Append(Modes).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  RefDirection: ").Append(RefDirection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  Viewing: ").Append(Viewing).Append("\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  ContactPendingRequest: ").Append(ContactPendingRequest).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  RuleGroup: ").Append(RuleGroup).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SubFilters: ").Append(SubFilters).Append("\n");
            sb.Append("  DisplayNameKey: ").Append(DisplayNameKey).Append("\n");
            sb.Append("  AdvancedUsageMode: ").Append(AdvancedUsageMode).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  RefTypes: ").Append(RefTypes).Append("\n");
            sb.Append("  SearchBy: ").Append(SearchBy).Append("\n");
            sb.Append("  ContactRequest: ").Append(ContactRequest).Append("\n");
            sb.Append("  Sharing: ").Append(Sharing).Append("\n");
            sb.Append("  Relevance: ").Append(Relevance).Append("\n");
            sb.Append("  VmosoSolution: ").Append(VmosoSolution).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  CommentSizing: ").Append(CommentSizing).Append("\n");
            sb.Append("  ChildRules: ").Append(ChildRules).Append("\n");
            sb.Append("  IncludeTaskTemplates: ").Append(IncludeTaskTemplates).Append("\n");
            sb.Append("  DisplaySubFilters: ").Append(DisplaySubFilters).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LevelFilter: ").Append(LevelFilter).Append("\n");
            sb.Append("  DisplayInfo: ").Append(DisplayInfo).Append("\n");
            sb.Append("  PresetRule: ").Append(PresetRule).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuleRecord);
        }

        /// <summary>
        /// Returns true if RuleRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasDraft == other.HasDraft ||
                    this.HasDraft != null &&
                    this.HasDraft.Equals(other.HasDraft)
                ) && 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.ExplicitReadCount == other.ExplicitReadCount ||
                    this.ExplicitReadCount != null &&
                    this.ExplicitReadCount.Equals(other.ExplicitReadCount)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.LifecycleState == other.LifecycleState ||
                    this.LifecycleState != null &&
                    this.LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HybridFlag == other.HybridFlag ||
                    this.HybridFlag != null &&
                    this.HybridFlag.Equals(other.HybridFlag)
                ) && 
                (
                    this.LinkedTo == other.LinkedTo ||
                    this.LinkedTo != null &&
                    this.LinkedTo.SequenceEqual(other.LinkedTo)
                ) && 
                (
                    this.RegistrationStatus == other.RegistrationStatus ||
                    this.RegistrationStatus != null &&
                    this.RegistrationStatus.SequenceEqual(other.RegistrationStatus)
                ) && 
                (
                    this.Modes == other.Modes ||
                    this.Modes != null &&
                    this.Modes.SequenceEqual(other.Modes)
                ) && 
                (
                    this.Keywords == other.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.Equals(other.Keywords)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.RefDirection == other.RefDirection ||
                    this.RefDirection != null &&
                    this.RefDirection.SequenceEqual(other.RefDirection)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.ContactType == other.ContactType ||
                    this.ContactType != null &&
                    this.ContactType.SequenceEqual(other.ContactType)
                ) && 
                (
                    this.Viewing == other.Viewing ||
                    this.Viewing != null &&
                    this.Viewing.SequenceEqual(other.Viewing)
                ) && 
                (
                    this.Lifecycle == other.Lifecycle ||
                    this.Lifecycle != null &&
                    this.Lifecycle.SequenceEqual(other.Lifecycle)
                ) && 
                (
                    this.ContactPendingRequest == other.ContactPendingRequest ||
                    this.ContactPendingRequest != null &&
                    this.ContactPendingRequest.SequenceEqual(other.ContactPendingRequest)
                ) && 
                (
                    this.SortDirection == other.SortDirection ||
                    this.SortDirection != null &&
                    this.SortDirection.SequenceEqual(other.SortDirection)
                ) && 
                (
                    this.RuleGroup == other.RuleGroup ||
                    this.RuleGroup != null &&
                    this.RuleGroup.Equals(other.RuleGroup)
                ) && 
                (
                    this.SortBy == other.SortBy ||
                    this.SortBy != null &&
                    this.SortBy.SequenceEqual(other.SortBy)
                ) && 
                (
                    this.SubFilters == other.SubFilters ||
                    this.SubFilters != null &&
                    this.SubFilters.Equals(other.SubFilters)
                ) && 
                (
                    this.DisplayNameKey == other.DisplayNameKey ||
                    this.DisplayNameKey != null &&
                    this.DisplayNameKey.Equals(other.DisplayNameKey)
                ) && 
                (
                    this.AdvancedUsageMode == other.AdvancedUsageMode ||
                    this.AdvancedUsageMode != null &&
                    this.AdvancedUsageMode.Equals(other.AdvancedUsageMode)
                ) && 
                (
                    this.Types == other.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(other.Types)
                ) && 
                (
                    this.RefTypes == other.RefTypes ||
                    this.RefTypes != null &&
                    this.RefTypes.SequenceEqual(other.RefTypes)
                ) && 
                (
                    this.SearchBy == other.SearchBy ||
                    this.SearchBy != null &&
                    this.SearchBy.Equals(other.SearchBy)
                ) && 
                (
                    this.ContactRequest == other.ContactRequest ||
                    this.ContactRequest != null &&
                    this.ContactRequest.SequenceEqual(other.ContactRequest)
                ) && 
                (
                    this.Sharing == other.Sharing ||
                    this.Sharing != null &&
                    this.Sharing.SequenceEqual(other.Sharing)
                ) && 
                (
                    this.Relevance == other.Relevance ||
                    this.Relevance != null &&
                    this.Relevance.SequenceEqual(other.Relevance)
                ) && 
                (
                    this.VmosoSolution == other.VmosoSolution ||
                    this.VmosoSolution != null &&
                    this.VmosoSolution.Equals(other.VmosoSolution)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.CommentSizing == other.CommentSizing ||
                    this.CommentSizing != null &&
                    this.CommentSizing.SequenceEqual(other.CommentSizing)
                ) && 
                (
                    this.ChildRules == other.ChildRules ||
                    this.ChildRules != null &&
                    this.ChildRules.SequenceEqual(other.ChildRules)
                ) && 
                (
                    this.IncludeTaskTemplates == other.IncludeTaskTemplates ||
                    this.IncludeTaskTemplates != null &&
                    this.IncludeTaskTemplates.Equals(other.IncludeTaskTemplates)
                ) && 
                (
                    this.DisplaySubFilters == other.DisplaySubFilters ||
                    this.DisplaySubFilters != null &&
                    this.DisplaySubFilters.Equals(other.DisplaySubFilters)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.SequenceEqual(other.Organization)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.LevelFilter == other.LevelFilter ||
                    this.LevelFilter != null &&
                    this.LevelFilter.SequenceEqual(other.LevelFilter)
                ) && 
                (
                    this.DisplayInfo == other.DisplayInfo ||
                    this.DisplayInfo != null &&
                    this.DisplayInfo.Equals(other.DisplayInfo)
                ) && 
                (
                    this.PresetRule == other.PresetRule ||
                    this.PresetRule != null &&
                    this.PresetRule.Equals(other.PresetRule)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.SequenceEqual(other.Style)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasDraft != null)
                    hash = hash * 59 + this.HasDraft.GetHashCode();
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.ExplicitReadCount != null)
                    hash = hash * 59 + this.ExplicitReadCount.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.LifecycleState != null)
                    hash = hash * 59 + this.LifecycleState.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HybridFlag != null)
                    hash = hash * 59 + this.HybridFlag.GetHashCode();
                if (this.LinkedTo != null)
                    hash = hash * 59 + this.LinkedTo.GetHashCode();
                if (this.RegistrationStatus != null)
                    hash = hash * 59 + this.RegistrationStatus.GetHashCode();
                if (this.Modes != null)
                    hash = hash * 59 + this.Modes.GetHashCode();
                if (this.Keywords != null)
                    hash = hash * 59 + this.Keywords.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.RefDirection != null)
                    hash = hash * 59 + this.RefDirection.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.ContactType != null)
                    hash = hash * 59 + this.ContactType.GetHashCode();
                if (this.Viewing != null)
                    hash = hash * 59 + this.Viewing.GetHashCode();
                if (this.Lifecycle != null)
                    hash = hash * 59 + this.Lifecycle.GetHashCode();
                if (this.ContactPendingRequest != null)
                    hash = hash * 59 + this.ContactPendingRequest.GetHashCode();
                if (this.SortDirection != null)
                    hash = hash * 59 + this.SortDirection.GetHashCode();
                if (this.RuleGroup != null)
                    hash = hash * 59 + this.RuleGroup.GetHashCode();
                if (this.SortBy != null)
                    hash = hash * 59 + this.SortBy.GetHashCode();
                if (this.SubFilters != null)
                    hash = hash * 59 + this.SubFilters.GetHashCode();
                if (this.DisplayNameKey != null)
                    hash = hash * 59 + this.DisplayNameKey.GetHashCode();
                if (this.AdvancedUsageMode != null)
                    hash = hash * 59 + this.AdvancedUsageMode.GetHashCode();
                if (this.Types != null)
                    hash = hash * 59 + this.Types.GetHashCode();
                if (this.RefTypes != null)
                    hash = hash * 59 + this.RefTypes.GetHashCode();
                if (this.SearchBy != null)
                    hash = hash * 59 + this.SearchBy.GetHashCode();
                if (this.ContactRequest != null)
                    hash = hash * 59 + this.ContactRequest.GetHashCode();
                if (this.Sharing != null)
                    hash = hash * 59 + this.Sharing.GetHashCode();
                if (this.Relevance != null)
                    hash = hash * 59 + this.Relevance.GetHashCode();
                if (this.VmosoSolution != null)
                    hash = hash * 59 + this.VmosoSolution.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.CommentSizing != null)
                    hash = hash * 59 + this.CommentSizing.GetHashCode();
                if (this.ChildRules != null)
                    hash = hash * 59 + this.ChildRules.GetHashCode();
                if (this.IncludeTaskTemplates != null)
                    hash = hash * 59 + this.IncludeTaskTemplates.GetHashCode();
                if (this.DisplaySubFilters != null)
                    hash = hash * 59 + this.DisplaySubFilters.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.LevelFilter != null)
                    hash = hash * 59 + this.LevelFilter.GetHashCode();
                if (this.DisplayInfo != null)
                    hash = hash * 59 + this.DisplayInfo.GetHashCode();
                if (this.PresetRule != null)
                    hash = hash * 59 + this.PresetRule.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                return hash;
            }
        }
    }

}
