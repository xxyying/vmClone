/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// InvitationRecordV2
    /// </summary>
    [DataContract]
    public partial class InvitationRecordV2 :  IEquatable<InvitationRecordV2>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationRecordV2" /> class.
        /// </summary>
        /// <param name="Request">Invitation Request.</param>
        /// <param name="AcceptTime">Accept time.</param>
        /// <param name="Registered">registered.</param>
        /// <param name="Inviter">Inviter.</param>
        /// <param name="State">Invitation state.</param>
        /// <param name="Invitee">Invitee.</param>
        /// <param name="InviteTime">Invite time.</param>
        public InvitationRecordV2(string Request = null, int? AcceptTime = null, bool? Registered = null, UserDisplayRecord Inviter = null, string State = null, UserDisplayRecord Invitee = null, int? InviteTime = null)
        {
            this.Request = Request;
            this.AcceptTime = AcceptTime;
            this.Registered = Registered;
            this.Inviter = Inviter;
            this.State = State;
            this.Invitee = Invitee;
            this.InviteTime = InviteTime;
        }
        
        /// <summary>
        /// Invitation Request
        /// </summary>
        /// <value>Invitation Request</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public string Request { get; set; }
        /// <summary>
        /// Accept time
        /// </summary>
        /// <value>Accept time</value>
        [DataMember(Name="acceptTime", EmitDefaultValue=false)]
        public int? AcceptTime { get; set; }
        /// <summary>
        /// registered
        /// </summary>
        /// <value>registered</value>
        [DataMember(Name="registered", EmitDefaultValue=false)]
        public bool? Registered { get; set; }
        /// <summary>
        /// Gets or Sets Inviter
        /// </summary>
        [DataMember(Name="inviter", EmitDefaultValue=false)]
        public UserDisplayRecord Inviter { get; set; }
        /// <summary>
        /// Invitation state
        /// </summary>
        /// <value>Invitation state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets Invitee
        /// </summary>
        [DataMember(Name="invitee", EmitDefaultValue=false)]
        public UserDisplayRecord Invitee { get; set; }
        /// <summary>
        /// Invite time
        /// </summary>
        /// <value>Invite time</value>
        [DataMember(Name="inviteTime", EmitDefaultValue=false)]
        public int? InviteTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvitationRecordV2 {\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  AcceptTime: ").Append(AcceptTime).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  Inviter: ").Append(Inviter).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Invitee: ").Append(Invitee).Append("\n");
            sb.Append("  InviteTime: ").Append(InviteTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InvitationRecordV2);
        }

        /// <summary>
        /// Returns true if InvitationRecordV2 instances are equal
        /// </summary>
        /// <param name="other">Instance of InvitationRecordV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvitationRecordV2 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Request == other.Request ||
                    this.Request != null &&
                    this.Request.Equals(other.Request)
                ) && 
                (
                    this.AcceptTime == other.AcceptTime ||
                    this.AcceptTime != null &&
                    this.AcceptTime.Equals(other.AcceptTime)
                ) && 
                (
                    this.Registered == other.Registered ||
                    this.Registered != null &&
                    this.Registered.Equals(other.Registered)
                ) && 
                (
                    this.Inviter == other.Inviter ||
                    this.Inviter != null &&
                    this.Inviter.Equals(other.Inviter)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Invitee == other.Invitee ||
                    this.Invitee != null &&
                    this.Invitee.Equals(other.Invitee)
                ) && 
                (
                    this.InviteTime == other.InviteTime ||
                    this.InviteTime != null &&
                    this.InviteTime.Equals(other.InviteTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Request != null)
                    hash = hash * 59 + this.Request.GetHashCode();
                if (this.AcceptTime != null)
                    hash = hash * 59 + this.AcceptTime.GetHashCode();
                if (this.Registered != null)
                    hash = hash * 59 + this.Registered.GetHashCode();
                if (this.Inviter != null)
                    hash = hash * 59 + this.Inviter.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Invitee != null)
                    hash = hash * 59 + this.Invitee.GetHashCode();
                if (this.InviteTime != null)
                    hash = hash * 59 + this.InviteTime.GetHashCode();
                return hash;
            }
        }
    }

}
