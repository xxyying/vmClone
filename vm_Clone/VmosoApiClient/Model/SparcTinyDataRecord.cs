/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SparcTinyDataRecord
    /// </summary>
    [DataContract]
    public partial class SparcTinyDataRecord :  IEquatable<SparcTinyDataRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SparcTinyDataRecord" /> class.
        /// </summary>
        /// <param name="Pager">Pager.</param>
        /// <param name="SharedTasks">array of shared tasks.</param>
        /// <param name="Stream">array of record.</param>
        /// <param name="Counts">.</param>
        /// <param name="Record">Record.</param>
        /// <param name="Steps">array of steps.</param>
        public SparcTinyDataRecord(ListPageRecord Pager = null, List<Record> SharedTasks = null, List<StreamRecordWrapper> Stream = null, Object Counts = null, Record Record = null, Object Steps = null)
        {
            this.Pager = Pager;
            this.SharedTasks = SharedTasks;
            this.Stream = Stream;
            this.Counts = Counts;
            this.Record = Record;
            this.Steps = Steps;
        }
        
        /// <summary>
        /// Gets or Sets Pager
        /// </summary>
        [DataMember(Name="pager", EmitDefaultValue=false)]
        public ListPageRecord Pager { get; set; }
        /// <summary>
        /// array of shared tasks
        /// </summary>
        /// <value>array of shared tasks</value>
        [DataMember(Name="sharedTasks", EmitDefaultValue=false)]
        public List<Record> SharedTasks { get; set; }
        /// <summary>
        /// array of record
        /// </summary>
        /// <value>array of record</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public List<StreamRecordWrapper> Stream { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="counts", EmitDefaultValue=false)]
        public Object Counts { get; set; }
        /// <summary>
        /// Gets or Sets Record
        /// </summary>
        [DataMember(Name="record", EmitDefaultValue=false)]
        public Record Record { get; set; }
        /// <summary>
        /// array of steps
        /// </summary>
        /// <value>array of steps</value>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public Object Steps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SparcTinyDataRecord {\n");
            sb.Append("  Pager: ").Append(Pager).Append("\n");
            sb.Append("  SharedTasks: ").Append(SharedTasks).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SparcTinyDataRecord);
        }

        /// <summary>
        /// Returns true if SparcTinyDataRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SparcTinyDataRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SparcTinyDataRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pager == other.Pager ||
                    this.Pager != null &&
                    this.Pager.Equals(other.Pager)
                ) && 
                (
                    this.SharedTasks == other.SharedTasks ||
                    this.SharedTasks != null &&
                    this.SharedTasks.SequenceEqual(other.SharedTasks)
                ) && 
                (
                    this.Stream == other.Stream ||
                    this.Stream != null &&
                    this.Stream.SequenceEqual(other.Stream)
                ) && 
                (
                    this.Counts == other.Counts ||
                    this.Counts != null &&
                    this.Counts.Equals(other.Counts)
                ) && 
                (
                    this.Record == other.Record ||
                    this.Record != null &&
                    this.Record.Equals(other.Record)
                ) && 
                (
                    this.Steps == other.Steps ||
                    this.Steps != null &&
                    this.Steps.Equals(other.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pager != null)
                    hash = hash * 59 + this.Pager.GetHashCode();
                if (this.SharedTasks != null)
                    hash = hash * 59 + this.SharedTasks.GetHashCode();
                if (this.Stream != null)
                    hash = hash * 59 + this.Stream.GetHashCode();
                if (this.Counts != null)
                    hash = hash * 59 + this.Counts.GetHashCode();
                if (this.Record != null)
                    hash = hash * 59 + this.Record.GetHashCode();
                if (this.Steps != null)
                    hash = hash * 59 + this.Steps.GetHashCode();
                return hash;
            }
        }
    }

}
