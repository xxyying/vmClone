/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// CreateSpaceInput
    /// </summary>
    [DataContract]
    public partial class CreateSpaceInput :  IEquatable<CreateSpaceInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSpaceInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSpaceInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSpaceInput" /> class.
        /// </summary>
        /// <param name="SpaceId"> (required).</param>
        /// <param name="ParentKey"> (required).</param>
        /// <param name="SpaceOptions">.</param>
        /// <param name="Members">.</param>
        /// <param name="Name"> (required).</param>
        /// <param name="Blacklist">.</param>
        /// <param name="Whitelist">.</param>
        /// <param name="ContactMembers">.</param>
        /// <param name="Administrators">.</param>
        /// <param name="Desc"> (required).</param>
        public CreateSpaceInput(string SpaceId = null, string ParentKey = null, List<string> SpaceOptions = null, List<string> Members = null, string Name = null, List<string> Blacklist = null, List<string> Whitelist = null, List<string> ContactMembers = null, List<string> Administrators = null, string Desc = null)
        {
            // to ensure "SpaceId" is required (not null)
            if (SpaceId == null)
            {
                throw new InvalidDataException("SpaceId is a required property for CreateSpaceInput and cannot be null");
            }
            else
            {
                this.SpaceId = SpaceId;
            }
            // to ensure "ParentKey" is required (not null)
            if (ParentKey == null)
            {
                throw new InvalidDataException("ParentKey is a required property for CreateSpaceInput and cannot be null");
            }
            else
            {
                this.ParentKey = ParentKey;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateSpaceInput and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Desc" is required (not null)
            if (Desc == null)
            {
                throw new InvalidDataException("Desc is a required property for CreateSpaceInput and cannot be null");
            }
            else
            {
                this.Desc = Desc;
            }
            this.SpaceOptions = SpaceOptions;
            this.Members = Members;
            this.Blacklist = Blacklist;
            this.Whitelist = Whitelist;
            this.ContactMembers = ContactMembers;
            this.Administrators = Administrators;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="spaceId", EmitDefaultValue=false)]
        public string SpaceId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="parentKey", EmitDefaultValue=false)]
        public string ParentKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="spaceOptions", EmitDefaultValue=false)]
        public List<string> SpaceOptions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<string> Members { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="blacklist", EmitDefaultValue=false)]
        public List<string> Blacklist { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="whitelist", EmitDefaultValue=false)]
        public List<string> Whitelist { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="contactMembers", EmitDefaultValue=false)]
        public List<string> ContactMembers { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="administrators", EmitDefaultValue=false)]
        public List<string> Administrators { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSpaceInput {\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  ParentKey: ").Append(ParentKey).Append("\n");
            sb.Append("  SpaceOptions: ").Append(SpaceOptions).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("  ContactMembers: ").Append(ContactMembers).Append("\n");
            sb.Append("  Administrators: ").Append(Administrators).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateSpaceInput);
        }

        /// <summary>
        /// Returns true if CreateSpaceInput instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateSpaceInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSpaceInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SpaceId == other.SpaceId ||
                    this.SpaceId != null &&
                    this.SpaceId.Equals(other.SpaceId)
                ) && 
                (
                    this.ParentKey == other.ParentKey ||
                    this.ParentKey != null &&
                    this.ParentKey.Equals(other.ParentKey)
                ) && 
                (
                    this.SpaceOptions == other.SpaceOptions ||
                    this.SpaceOptions != null &&
                    this.SpaceOptions.SequenceEqual(other.SpaceOptions)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Blacklist == other.Blacklist ||
                    this.Blacklist != null &&
                    this.Blacklist.SequenceEqual(other.Blacklist)
                ) && 
                (
                    this.Whitelist == other.Whitelist ||
                    this.Whitelist != null &&
                    this.Whitelist.SequenceEqual(other.Whitelist)
                ) && 
                (
                    this.ContactMembers == other.ContactMembers ||
                    this.ContactMembers != null &&
                    this.ContactMembers.SequenceEqual(other.ContactMembers)
                ) && 
                (
                    this.Administrators == other.Administrators ||
                    this.Administrators != null &&
                    this.Administrators.SequenceEqual(other.Administrators)
                ) && 
                (
                    this.Desc == other.Desc ||
                    this.Desc != null &&
                    this.Desc.Equals(other.Desc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SpaceId != null)
                    hash = hash * 59 + this.SpaceId.GetHashCode();
                if (this.ParentKey != null)
                    hash = hash * 59 + this.ParentKey.GetHashCode();
                if (this.SpaceOptions != null)
                    hash = hash * 59 + this.SpaceOptions.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Blacklist != null)
                    hash = hash * 59 + this.Blacklist.GetHashCode();
                if (this.Whitelist != null)
                    hash = hash * 59 + this.Whitelist.GetHashCode();
                if (this.ContactMembers != null)
                    hash = hash * 59 + this.ContactMembers.GetHashCode();
                if (this.Administrators != null)
                    hash = hash * 59 + this.Administrators.GetHashCode();
                if (this.Desc != null)
                    hash = hash * 59 + this.Desc.GetHashCode();
                return hash;
            }
        }
    }

}
