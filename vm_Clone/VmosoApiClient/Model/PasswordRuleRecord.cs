/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// PasswordRuleRecord
    /// </summary>
    [DataContract]
    public partial class PasswordRuleRecord :  IEquatable<PasswordRuleRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordRuleRecord" /> class.
        /// </summary>
        /// <param name="MinLettersLength">Minimum letter length.</param>
        /// <param name="MinPasswordLength">Minimum password length.</param>
        /// <param name="MinDigitsLength">Minimum digit length.</param>
        /// <param name="DisallowReuseMonths">Disallow reuse password in last xx months.</param>
        /// <param name="MaxPasswordLength">Maximum password length.</param>
        /// <param name="MinSpecialCharLength">Minimum special chars length.</param>
        public PasswordRuleRecord(int? MinLettersLength = null, int? MinPasswordLength = null, int? MinDigitsLength = null, int? DisallowReuseMonths = null, int? MaxPasswordLength = null, int? MinSpecialCharLength = null)
        {
            this.MinLettersLength = MinLettersLength;
            this.MinPasswordLength = MinPasswordLength;
            this.MinDigitsLength = MinDigitsLength;
            this.DisallowReuseMonths = DisallowReuseMonths;
            this.MaxPasswordLength = MaxPasswordLength;
            this.MinSpecialCharLength = MinSpecialCharLength;
        }
        
        /// <summary>
        /// Minimum letter length
        /// </summary>
        /// <value>Minimum letter length</value>
        [DataMember(Name="minLettersLength", EmitDefaultValue=false)]
        public int? MinLettersLength { get; set; }
        /// <summary>
        /// Minimum password length
        /// </summary>
        /// <value>Minimum password length</value>
        [DataMember(Name="minPasswordLength", EmitDefaultValue=false)]
        public int? MinPasswordLength { get; set; }
        /// <summary>
        /// Minimum digit length
        /// </summary>
        /// <value>Minimum digit length</value>
        [DataMember(Name="minDigitsLength", EmitDefaultValue=false)]
        public int? MinDigitsLength { get; set; }
        /// <summary>
        /// Disallow reuse password in last xx months
        /// </summary>
        /// <value>Disallow reuse password in last xx months</value>
        [DataMember(Name="disallowReuseMonths", EmitDefaultValue=false)]
        public int? DisallowReuseMonths { get; set; }
        /// <summary>
        /// Maximum password length
        /// </summary>
        /// <value>Maximum password length</value>
        [DataMember(Name="maxPasswordLength", EmitDefaultValue=false)]
        public int? MaxPasswordLength { get; set; }
        /// <summary>
        /// Minimum special chars length
        /// </summary>
        /// <value>Minimum special chars length</value>
        [DataMember(Name="minSpecialCharLength", EmitDefaultValue=false)]
        public int? MinSpecialCharLength { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordRuleRecord {\n");
            sb.Append("  MinLettersLength: ").Append(MinLettersLength).Append("\n");
            sb.Append("  MinPasswordLength: ").Append(MinPasswordLength).Append("\n");
            sb.Append("  MinDigitsLength: ").Append(MinDigitsLength).Append("\n");
            sb.Append("  DisallowReuseMonths: ").Append(DisallowReuseMonths).Append("\n");
            sb.Append("  MaxPasswordLength: ").Append(MaxPasswordLength).Append("\n");
            sb.Append("  MinSpecialCharLength: ").Append(MinSpecialCharLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PasswordRuleRecord);
        }

        /// <summary>
        /// Returns true if PasswordRuleRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of PasswordRuleRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordRuleRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MinLettersLength == other.MinLettersLength ||
                    this.MinLettersLength != null &&
                    this.MinLettersLength.Equals(other.MinLettersLength)
                ) && 
                (
                    this.MinPasswordLength == other.MinPasswordLength ||
                    this.MinPasswordLength != null &&
                    this.MinPasswordLength.Equals(other.MinPasswordLength)
                ) && 
                (
                    this.MinDigitsLength == other.MinDigitsLength ||
                    this.MinDigitsLength != null &&
                    this.MinDigitsLength.Equals(other.MinDigitsLength)
                ) && 
                (
                    this.DisallowReuseMonths == other.DisallowReuseMonths ||
                    this.DisallowReuseMonths != null &&
                    this.DisallowReuseMonths.Equals(other.DisallowReuseMonths)
                ) && 
                (
                    this.MaxPasswordLength == other.MaxPasswordLength ||
                    this.MaxPasswordLength != null &&
                    this.MaxPasswordLength.Equals(other.MaxPasswordLength)
                ) && 
                (
                    this.MinSpecialCharLength == other.MinSpecialCharLength ||
                    this.MinSpecialCharLength != null &&
                    this.MinSpecialCharLength.Equals(other.MinSpecialCharLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MinLettersLength != null)
                    hash = hash * 59 + this.MinLettersLength.GetHashCode();
                if (this.MinPasswordLength != null)
                    hash = hash * 59 + this.MinPasswordLength.GetHashCode();
                if (this.MinDigitsLength != null)
                    hash = hash * 59 + this.MinDigitsLength.GetHashCode();
                if (this.DisallowReuseMonths != null)
                    hash = hash * 59 + this.DisallowReuseMonths.GetHashCode();
                if (this.MaxPasswordLength != null)
                    hash = hash * 59 + this.MaxPasswordLength.GetHashCode();
                if (this.MinSpecialCharLength != null)
                    hash = hash * 59 + this.MinSpecialCharLength.GetHashCode();
                return hash;
            }
        }
    }

}
