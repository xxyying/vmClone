/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// RemoteFileDownloadRecord
    /// </summary>
    [DataContract]
    public partial class RemoteFileDownloadRecord :  IEquatable<RemoteFileDownloadRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteFileDownloadRecord" /> class.
        /// </summary>
        /// <param name="Filekey">Key of file..</param>
        /// <param name="InstallId">.</param>
        /// <param name="UserKey">user key.</param>
        /// <param name="Token">token to download file on remote installation.</param>
        public RemoteFileDownloadRecord(string Filekey = null, int? InstallId = null, string UserKey = null, string Token = null)
        {
            this.Filekey = Filekey;
            this.InstallId = InstallId;
            this.UserKey = UserKey;
            this.Token = Token;
        }
        
        /// <summary>
        /// Key of file.
        /// </summary>
        /// <value>Key of file.</value>
        [DataMember(Name="filekey", EmitDefaultValue=false)]
        public string Filekey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="installId", EmitDefaultValue=false)]
        public int? InstallId { get; set; }
        /// <summary>
        /// user key
        /// </summary>
        /// <value>user key</value>
        [DataMember(Name="userKey", EmitDefaultValue=false)]
        public string UserKey { get; set; }
        /// <summary>
        /// token to download file on remote installation
        /// </summary>
        /// <value>token to download file on remote installation</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteFileDownloadRecord {\n");
            sb.Append("  Filekey: ").Append(Filekey).Append("\n");
            sb.Append("  InstallId: ").Append(InstallId).Append("\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RemoteFileDownloadRecord);
        }

        /// <summary>
        /// Returns true if RemoteFileDownloadRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteFileDownloadRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteFileDownloadRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Filekey == other.Filekey ||
                    this.Filekey != null &&
                    this.Filekey.Equals(other.Filekey)
                ) && 
                (
                    this.InstallId == other.InstallId ||
                    this.InstallId != null &&
                    this.InstallId.Equals(other.InstallId)
                ) && 
                (
                    this.UserKey == other.UserKey ||
                    this.UserKey != null &&
                    this.UserKey.Equals(other.UserKey)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Filekey != null)
                    hash = hash * 59 + this.Filekey.GetHashCode();
                if (this.InstallId != null)
                    hash = hash * 59 + this.InstallId.GetHashCode();
                if (this.UserKey != null)
                    hash = hash * 59 + this.UserKey.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                return hash;
            }
        }
    }

}
