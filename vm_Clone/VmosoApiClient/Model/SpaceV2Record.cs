/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SpaceV2Record
    /// </summary>
    [DataContract]
    public partial class SpaceV2Record : SpaceRecord,  IEquatable<SpaceV2Record>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceV2Record" /> class.
        /// </summary>
        /// <param name="Name">Name of space record..</param>
        /// <param name="NaviKey">Navigation Key ; store navigation group letter.</param>
        /// <param name="Key">Key of Space record..</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="Destinations">Destinations where this space has been placed..</param>
        /// <param name="Description">Description of space record..</param>
        /// <param name="Type">Type of Space record..</param>
        /// <param name="SpaceACL">SpaceACL.</param>
        /// <param name="Status">Status of space record..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="CanUnlink">Check if user can unlink this object Rule: 1.  Owner/Admin of space where the link is added. 2.  User who create the link 3.  Owner/Admin of the space which the link is pointing at..</param>
        /// <param name="AllowToLeave">Allow users to leave.</param>
        /// <param name="Pathkeys">Folder full path keys.</param>
        /// <param name="Counts">Counts.</param>
        /// <param name="LastUpdater">LastUpdater.</param>
        /// <param name="AllowAccessListModification">Space admin can update WL/BL regardless of parent space WL/BL. default: true.</param>
        /// <param name="CreateSubSpaceProtected">Property is protected default: true.</param>
        /// <param name="ImportantFlag">.</param>
        /// <param name="Path">Folder full path.</param>
        /// <param name="ParticipantStatusFlag">possible value:  locked , unlocked.</param>
        /// <param name="Members">Hot spot members.</param>
        /// <param name="EnforceSubSpacePolicy">Sub space need to follow parent policy on $memberCanCreateSubSpace. default: false.</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Administrators">Hot spot administrators.</param>
        /// <param name="ParticipantFlag">possible value:  Green, Yellow, Red.</param>
        /// <param name="AsShareSource">Can be shared to other spaces..</param>
        /// <param name="PublicNameFlag">.</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="Whitelist">whiteList.</param>
        /// <param name="ParentKey">Parent key.</param>
        /// <param name="Usergroups">User Groups.</param>
        /// <param name="FolderSubtype">Folder subtype: public ..</param>
        /// <param name="SpaceType">Type of space:  PersonalSpace, SharedSpace, PersonalLink, SharedLink.</param>
        /// <param name="DisplayName">Display name.</param>
        /// <param name="CanEdit">Can edit folder..</param>
        /// <param name="Privacy">Privacy flag.</param>
        /// <param name="RefmeFlag">Refme flag..</param>
        /// <param name="ExcludeFromMutual">excude fron creating a link in mutual space.</param>
        /// <param name="AllowAnonymousPost">Anonymous flag set true to allow anonymous posted from users..</param>
        /// <param name="Subtype">FOlder subtypes.</param>
        /// <param name="IconType">Icon type: indicates what icon need to be display for the current space. Current value:  &#39;contact&#39;, &#39;space&#39;.</param>
        /// <param name="RootHotspotType">Root Space Type.</param>
        /// <param name="HideOnEmpty">Hide the space on empty.</param>
        /// <param name="MemberGroups">Member Groups..</param>
        /// <param name="IsLink">Check if this is a link object.</param>
        /// <param name="EnforceAccessPolicy">Sub space need to follow parent policy on $allowAccessListModification. default: false.</param>
        /// <param name="SpaceACLType">ACLType of space: open, closed, self-join, request, fly-by.</param>
        /// <param name="HasSubcategories">If the category has subcategory.</param>
        /// <param name="AsShareTarget">Can contain shared spaces..</param>
        /// <param name="FavoriteFlag">.</param>
        /// <param name="RootHotspotKey">Root Space Key.</param>
        /// <param name="IsEmpty">Indicates space is empty.</param>
        /// <param name="Blacklist">blacklist.</param>
        /// <param name="AnchorKey">Anchor key.</param>
        /// <param name="RestrictedFlag">.</param>
        /// <param name="CanCreate">Can create sub folder..</param>
        /// <param name="FolderType">Folder type: custom/system/contact..</param>
        /// <param name="AllowOutsideParentWL">Allow users outside of parent white list.</param>
        /// <param name="AccessListProtected">Property is protected default: true.</param>
        /// <param name="MemberCanCreateSubSpace">Space member can create sub space. default: true.</param>
        /// <param name="LinkId">Link ID.</param>
        /// <param name="CanChangeContents">Can add/remove sub spaces and items..</param>
        /// <param name="NameKey">I18N name key when the name need to be translated..</param>
        /// <param name="IsShared">Check if there is 2 or more distinct member of the space.</param>
        public SpaceV2Record(string Name = null, string NaviKey = null, string Key = null, DisplayRecord Creator = null, int? Timecreated = null, List<DisplayRecord> Destinations = null, string Description = null, string Type = null, SpaceACLRecord SpaceACL = null, string Status = null, int? Timeupdated = null, bool? CanUnlink = null, bool? AllowToLeave = null, string Pathkeys = null, SpaceCountRecord Counts = null, DisplayRecord LastUpdater = null, bool? AllowAccessListModification = null, string CreateSubSpaceProtected = null, string ImportantFlag = null, string Path = null, string ParticipantStatusFlag = null, List<DisplayRecord> Members = null, bool? EnforceSubSpacePolicy = null, bool? FollowFlag = null, List<DisplayRecord> Administrators = null, string ParticipantFlag = null, bool? AsShareSource = null, bool? PublicNameFlag = null, string CopyDestination = null, List<DisplayRecord> Whitelist = null, string ParentKey = null, List<DisplayRecord> Usergroups = null, string FolderSubtype = null, string SpaceType = null, string DisplayName = null, bool? CanEdit = null, string Privacy = null, bool? RefmeFlag = null, bool? ExcludeFromMutual = null, bool? AllowAnonymousPost = null, string Subtype = null, string IconType = null, string RootHotspotType = null, bool? HideOnEmpty = null, List<string> MemberGroups = null, bool? IsLink = null, bool? EnforceAccessPolicy = null, string SpaceACLType = null, string HasSubcategories = null, bool? AsShareTarget = null, string FavoriteFlag = null, string RootHotspotKey = null, bool? IsEmpty = null, List<DisplayRecord> Blacklist = null, string AnchorKey = null, int? RestrictedFlag = null, string CanCreate = null, string FolderType = null, bool? AllowOutsideParentWL = null, string AccessListProtected = null, string MemberCanCreateSubSpace = null, string LinkId = null, bool? CanChangeContents = null, string NameKey = null, bool? IsShared = null)
        {
            this.Name = Name;
            this.NaviKey = NaviKey;
            this.Key = Key;
            this.Creator = Creator;
            this.Timecreated = Timecreated;
            this.Destinations = Destinations;
            this.Description = Description;
            this.Type = Type;
            this.SpaceACL = SpaceACL;
            this.Status = Status;
            this.Timeupdated = Timeupdated;
            this.CanUnlink = CanUnlink;
            this.AllowToLeave = AllowToLeave;
            this.Pathkeys = Pathkeys;
            this.Counts = Counts;
            this.LastUpdater = LastUpdater;
            this.AllowAccessListModification = AllowAccessListModification;
            this.CreateSubSpaceProtected = CreateSubSpaceProtected;
            this.ImportantFlag = ImportantFlag;
            this.Path = Path;
            this.ParticipantStatusFlag = ParticipantStatusFlag;
            this.Members = Members;
            this.EnforceSubSpacePolicy = EnforceSubSpacePolicy;
            this.FollowFlag = FollowFlag;
            this.Administrators = Administrators;
            this.ParticipantFlag = ParticipantFlag;
            this.AsShareSource = AsShareSource;
            this.PublicNameFlag = PublicNameFlag;
            this.CopyDestination = CopyDestination;
            this.Whitelist = Whitelist;
            this.ParentKey = ParentKey;
            this.Usergroups = Usergroups;
            this.FolderSubtype = FolderSubtype;
            this.SpaceType = SpaceType;
            this.DisplayName = DisplayName;
            this.CanEdit = CanEdit;
            this.Privacy = Privacy;
            this.RefmeFlag = RefmeFlag;
            this.ExcludeFromMutual = ExcludeFromMutual;
            this.AllowAnonymousPost = AllowAnonymousPost;
            this.Subtype = Subtype;
            this.IconType = IconType;
            this.RootHotspotType = RootHotspotType;
            this.HideOnEmpty = HideOnEmpty;
            this.MemberGroups = MemberGroups;
            this.IsLink = IsLink;
            this.EnforceAccessPolicy = EnforceAccessPolicy;
            this.SpaceACLType = SpaceACLType;
            this.HasSubcategories = HasSubcategories;
            this.AsShareTarget = AsShareTarget;
            this.FavoriteFlag = FavoriteFlag;
            this.RootHotspotKey = RootHotspotKey;
            this.IsEmpty = IsEmpty;
            this.Blacklist = Blacklist;
            this.AnchorKey = AnchorKey;
            this.RestrictedFlag = RestrictedFlag;
            this.CanCreate = CanCreate;
            this.FolderType = FolderType;
            this.AllowOutsideParentWL = AllowOutsideParentWL;
            this.AccessListProtected = AccessListProtected;
            this.MemberCanCreateSubSpace = MemberCanCreateSubSpace;
            this.LinkId = LinkId;
            this.CanChangeContents = CanChangeContents;
            this.NameKey = NameKey;
            this.IsShared = IsShared;
        }
        
        /// <summary>
        /// Name of space record.
        /// </summary>
        /// <value>Name of space record.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Navigation Key ; store navigation group letter
        /// </summary>
        /// <value>Navigation Key ; store navigation group letter</value>
        [DataMember(Name="naviKey", EmitDefaultValue=false)]
        public string NaviKey { get; set; }
        /// <summary>
        /// Key of Space record.
        /// </summary>
        /// <value>Key of Space record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Destinations where this space has been placed.
        /// </summary>
        /// <value>Destinations where this space has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// Description of space record.
        /// </summary>
        /// <value>Description of space record.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Type of Space record.
        /// </summary>
        /// <value>Type of Space record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets SpaceACL
        /// </summary>
        [DataMember(Name="spaceACL", EmitDefaultValue=false)]
        public SpaceACLRecord SpaceACL { get; set; }
        /// <summary>
        /// Status of space record.
        /// </summary>
        /// <value>Status of space record.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// Check if user can unlink this object Rule: 1.  Owner/Admin of space where the link is added. 2.  User who create the link 3.  Owner/Admin of the space which the link is pointing at.
        /// </summary>
        /// <value>Check if user can unlink this object Rule: 1.  Owner/Admin of space where the link is added. 2.  User who create the link 3.  Owner/Admin of the space which the link is pointing at.</value>
        [DataMember(Name="canUnlink", EmitDefaultValue=false)]
        public bool? CanUnlink { get; set; }
        /// <summary>
        /// Allow users to leave
        /// </summary>
        /// <value>Allow users to leave</value>
        [DataMember(Name="allowToLeave", EmitDefaultValue=false)]
        public bool? AllowToLeave { get; set; }
        /// <summary>
        /// Folder full path keys
        /// </summary>
        /// <value>Folder full path keys</value>
        [DataMember(Name="pathkeys", EmitDefaultValue=false)]
        public string Pathkeys { get; set; }
        /// <summary>
        /// Gets or Sets Counts
        /// </summary>
        [DataMember(Name="counts", EmitDefaultValue=false)]
        public SpaceCountRecord Counts { get; set; }
        /// <summary>
        /// Gets or Sets LastUpdater
        /// </summary>
        [DataMember(Name="lastUpdater", EmitDefaultValue=false)]
        public DisplayRecord LastUpdater { get; set; }
        /// <summary>
        /// Space admin can update WL/BL regardless of parent space WL/BL. default: true
        /// </summary>
        /// <value>Space admin can update WL/BL regardless of parent space WL/BL. default: true</value>
        [DataMember(Name="allowAccessListModification", EmitDefaultValue=false)]
        public bool? AllowAccessListModification { get; set; }
        /// <summary>
        /// Property is protected default: true
        /// </summary>
        /// <value>Property is protected default: true</value>
        [DataMember(Name="createSubSpaceProtected", EmitDefaultValue=false)]
        public string CreateSubSpaceProtected { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public string ImportantFlag { get; set; }
        /// <summary>
        /// Folder full path
        /// </summary>
        /// <value>Folder full path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }
        /// <summary>
        /// possible value:  locked , unlocked
        /// </summary>
        /// <value>possible value:  locked , unlocked</value>
        [DataMember(Name="participantStatusFlag", EmitDefaultValue=false)]
        public string ParticipantStatusFlag { get; set; }
        /// <summary>
        /// Hot spot members
        /// </summary>
        /// <value>Hot spot members</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<DisplayRecord> Members { get; set; }
        /// <summary>
        /// Sub space need to follow parent policy on $memberCanCreateSubSpace. default: false
        /// </summary>
        /// <value>Sub space need to follow parent policy on $memberCanCreateSubSpace. default: false</value>
        [DataMember(Name="enforceSubSpacePolicy", EmitDefaultValue=false)]
        public bool? EnforceSubSpacePolicy { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Hot spot administrators
        /// </summary>
        /// <value>Hot spot administrators</value>
        [DataMember(Name="administrators", EmitDefaultValue=false)]
        public List<DisplayRecord> Administrators { get; set; }
        /// <summary>
        /// possible value:  Green, Yellow, Red
        /// </summary>
        /// <value>possible value:  Green, Yellow, Red</value>
        [DataMember(Name="participantFlag", EmitDefaultValue=false)]
        public string ParticipantFlag { get; set; }
        /// <summary>
        /// Can be shared to other spaces.
        /// </summary>
        /// <value>Can be shared to other spaces.</value>
        [DataMember(Name="asShareSource", EmitDefaultValue=false)]
        public bool? AsShareSource { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="publicNameFlag", EmitDefaultValue=false)]
        public bool? PublicNameFlag { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// whiteList
        /// </summary>
        /// <value>whiteList</value>
        [DataMember(Name="whitelist", EmitDefaultValue=false)]
        public List<DisplayRecord> Whitelist { get; set; }
        /// <summary>
        /// Parent key
        /// </summary>
        /// <value>Parent key</value>
        [DataMember(Name="parentKey", EmitDefaultValue=false)]
        public string ParentKey { get; set; }
        /// <summary>
        /// User Groups
        /// </summary>
        /// <value>User Groups</value>
        [DataMember(Name="usergroups", EmitDefaultValue=false)]
        public List<DisplayRecord> Usergroups { get; set; }
        /// <summary>
        /// Folder subtype: public .
        /// </summary>
        /// <value>Folder subtype: public .</value>
        [DataMember(Name="folderSubtype", EmitDefaultValue=false)]
        public string FolderSubtype { get; set; }
        /// <summary>
        /// Type of space:  PersonalSpace, SharedSpace, PersonalLink, SharedLink
        /// </summary>
        /// <value>Type of space:  PersonalSpace, SharedSpace, PersonalLink, SharedLink</value>
        [DataMember(Name="spaceType", EmitDefaultValue=false)]
        public string SpaceType { get; set; }
        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Can edit folder.
        /// </summary>
        /// <value>Can edit folder.</value>
        [DataMember(Name="canEdit", EmitDefaultValue=false)]
        public bool? CanEdit { get; set; }
        /// <summary>
        /// Privacy flag
        /// </summary>
        /// <value>Privacy flag</value>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public string Privacy { get; set; }
        /// <summary>
        /// Refme flag.
        /// </summary>
        /// <value>Refme flag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// excude fron creating a link in mutual space
        /// </summary>
        /// <value>excude fron creating a link in mutual space</value>
        [DataMember(Name="excludeFromMutual", EmitDefaultValue=false)]
        public bool? ExcludeFromMutual { get; set; }
        /// <summary>
        /// Anonymous flag set true to allow anonymous posted from users.
        /// </summary>
        /// <value>Anonymous flag set true to allow anonymous posted from users.</value>
        [DataMember(Name="allowAnonymousPost", EmitDefaultValue=false)]
        public bool? AllowAnonymousPost { get; set; }
        /// <summary>
        /// FOlder subtypes
        /// </summary>
        /// <value>FOlder subtypes</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// Icon type: indicates what icon need to be display for the current space. Current value:  &#39;contact&#39;, &#39;space&#39;
        /// </summary>
        /// <value>Icon type: indicates what icon need to be display for the current space. Current value:  &#39;contact&#39;, &#39;space&#39;</value>
        [DataMember(Name="iconType", EmitDefaultValue=false)]
        public string IconType { get; set; }
        /// <summary>
        /// Root Space Type
        /// </summary>
        /// <value>Root Space Type</value>
        [DataMember(Name="rootHotspotType", EmitDefaultValue=false)]
        public string RootHotspotType { get; set; }
        /// <summary>
        /// Hide the space on empty
        /// </summary>
        /// <value>Hide the space on empty</value>
        [DataMember(Name="hideOnEmpty", EmitDefaultValue=false)]
        public bool? HideOnEmpty { get; set; }
        /// <summary>
        /// Member Groups.
        /// </summary>
        /// <value>Member Groups.</value>
        [DataMember(Name="memberGroups", EmitDefaultValue=false)]
        public List<string> MemberGroups { get; set; }
        /// <summary>
        /// Check if this is a link object
        /// </summary>
        /// <value>Check if this is a link object</value>
        [DataMember(Name="isLink", EmitDefaultValue=false)]
        public bool? IsLink { get; set; }
        /// <summary>
        /// Sub space need to follow parent policy on $allowAccessListModification. default: false
        /// </summary>
        /// <value>Sub space need to follow parent policy on $allowAccessListModification. default: false</value>
        [DataMember(Name="enforceAccessPolicy", EmitDefaultValue=false)]
        public bool? EnforceAccessPolicy { get; set; }
        /// <summary>
        /// ACLType of space: open, closed, self-join, request, fly-by
        /// </summary>
        /// <value>ACLType of space: open, closed, self-join, request, fly-by</value>
        [DataMember(Name="spaceACLType", EmitDefaultValue=false)]
        public string SpaceACLType { get; set; }
        /// <summary>
        /// If the category has subcategory
        /// </summary>
        /// <value>If the category has subcategory</value>
        [DataMember(Name="hasSubcategories", EmitDefaultValue=false)]
        public string HasSubcategories { get; set; }
        /// <summary>
        /// Can contain shared spaces.
        /// </summary>
        /// <value>Can contain shared spaces.</value>
        [DataMember(Name="asShareTarget", EmitDefaultValue=false)]
        public bool? AsShareTarget { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public string FavoriteFlag { get; set; }
        /// <summary>
        /// Root Space Key
        /// </summary>
        /// <value>Root Space Key</value>
        [DataMember(Name="rootHotspotKey", EmitDefaultValue=false)]
        public string RootHotspotKey { get; set; }
        /// <summary>
        /// Indicates space is empty
        /// </summary>
        /// <value>Indicates space is empty</value>
        [DataMember(Name="isEmpty", EmitDefaultValue=false)]
        public bool? IsEmpty { get; set; }
        /// <summary>
        /// blacklist
        /// </summary>
        /// <value>blacklist</value>
        [DataMember(Name="blacklist", EmitDefaultValue=false)]
        public List<DisplayRecord> Blacklist { get; set; }
        /// <summary>
        /// Anchor key
        /// </summary>
        /// <value>Anchor key</value>
        [DataMember(Name="anchorKey", EmitDefaultValue=false)]
        public string AnchorKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="restrictedFlag", EmitDefaultValue=false)]
        public int? RestrictedFlag { get; set; }
        /// <summary>
        /// Can create sub folder.
        /// </summary>
        /// <value>Can create sub folder.</value>
        [DataMember(Name="canCreate", EmitDefaultValue=false)]
        public string CanCreate { get; set; }
        /// <summary>
        /// Folder type: custom/system/contact.
        /// </summary>
        /// <value>Folder type: custom/system/contact.</value>
        [DataMember(Name="folderType", EmitDefaultValue=false)]
        public string FolderType { get; set; }
        /// <summary>
        /// Allow users outside of parent white list
        /// </summary>
        /// <value>Allow users outside of parent white list</value>
        [DataMember(Name="allowOutsideParentWL", EmitDefaultValue=false)]
        public bool? AllowOutsideParentWL { get; set; }
        /// <summary>
        /// Property is protected default: true
        /// </summary>
        /// <value>Property is protected default: true</value>
        [DataMember(Name="accessListProtected", EmitDefaultValue=false)]
        public string AccessListProtected { get; set; }
        /// <summary>
        /// Space member can create sub space. default: true
        /// </summary>
        /// <value>Space member can create sub space. default: true</value>
        [DataMember(Name="memberCanCreateSubSpace", EmitDefaultValue=false)]
        public string MemberCanCreateSubSpace { get; set; }
        /// <summary>
        /// Link ID
        /// </summary>
        /// <value>Link ID</value>
        [DataMember(Name="linkId", EmitDefaultValue=false)]
        public string LinkId { get; set; }
        /// <summary>
        /// Can add/remove sub spaces and items.
        /// </summary>
        /// <value>Can add/remove sub spaces and items.</value>
        [DataMember(Name="canChangeContents", EmitDefaultValue=false)]
        public bool? CanChangeContents { get; set; }
        /// <summary>
        /// I18N name key when the name need to be translated.
        /// </summary>
        /// <value>I18N name key when the name need to be translated.</value>
        [DataMember(Name="nameKey", EmitDefaultValue=false)]
        public string NameKey { get; set; }
        /// <summary>
        /// Check if there is 2 or more distinct member of the space
        /// </summary>
        /// <value>Check if there is 2 or more distinct member of the space</value>
        [DataMember(Name="isShared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceV2Record {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NaviKey: ").Append(NaviKey).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SpaceACL: ").Append(SpaceACL).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  CanUnlink: ").Append(CanUnlink).Append("\n");
            sb.Append("  AllowToLeave: ").Append(AllowToLeave).Append("\n");
            sb.Append("  Pathkeys: ").Append(Pathkeys).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  LastUpdater: ").Append(LastUpdater).Append("\n");
            sb.Append("  AllowAccessListModification: ").Append(AllowAccessListModification).Append("\n");
            sb.Append("  CreateSubSpaceProtected: ").Append(CreateSubSpaceProtected).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ParticipantStatusFlag: ").Append(ParticipantStatusFlag).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  EnforceSubSpacePolicy: ").Append(EnforceSubSpacePolicy).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Administrators: ").Append(Administrators).Append("\n");
            sb.Append("  ParticipantFlag: ").Append(ParticipantFlag).Append("\n");
            sb.Append("  AsShareSource: ").Append(AsShareSource).Append("\n");
            sb.Append("  PublicNameFlag: ").Append(PublicNameFlag).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("  ParentKey: ").Append(ParentKey).Append("\n");
            sb.Append("  Usergroups: ").Append(Usergroups).Append("\n");
            sb.Append("  FolderSubtype: ").Append(FolderSubtype).Append("\n");
            sb.Append("  SpaceType: ").Append(SpaceType).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  ExcludeFromMutual: ").Append(ExcludeFromMutual).Append("\n");
            sb.Append("  AllowAnonymousPost: ").Append(AllowAnonymousPost).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  IconType: ").Append(IconType).Append("\n");
            sb.Append("  RootHotspotType: ").Append(RootHotspotType).Append("\n");
            sb.Append("  HideOnEmpty: ").Append(HideOnEmpty).Append("\n");
            sb.Append("  MemberGroups: ").Append(MemberGroups).Append("\n");
            sb.Append("  IsLink: ").Append(IsLink).Append("\n");
            sb.Append("  EnforceAccessPolicy: ").Append(EnforceAccessPolicy).Append("\n");
            sb.Append("  SpaceACLType: ").Append(SpaceACLType).Append("\n");
            sb.Append("  HasSubcategories: ").Append(HasSubcategories).Append("\n");
            sb.Append("  AsShareTarget: ").Append(AsShareTarget).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  RootHotspotKey: ").Append(RootHotspotKey).Append("\n");
            sb.Append("  IsEmpty: ").Append(IsEmpty).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  AnchorKey: ").Append(AnchorKey).Append("\n");
            sb.Append("  RestrictedFlag: ").Append(RestrictedFlag).Append("\n");
            sb.Append("  CanCreate: ").Append(CanCreate).Append("\n");
            sb.Append("  FolderType: ").Append(FolderType).Append("\n");
            sb.Append("  AllowOutsideParentWL: ").Append(AllowOutsideParentWL).Append("\n");
            sb.Append("  AccessListProtected: ").Append(AccessListProtected).Append("\n");
            sb.Append("  MemberCanCreateSubSpace: ").Append(MemberCanCreateSubSpace).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  CanChangeContents: ").Append(CanChangeContents).Append("\n");
            sb.Append("  NameKey: ").Append(NameKey).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpaceV2Record);
        }

        /// <summary>
        /// Returns true if SpaceV2Record instances are equal
        /// </summary>
        /// <param name="other">Instance of SpaceV2Record to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceV2Record other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NaviKey == other.NaviKey ||
                    this.NaviKey != null &&
                    this.NaviKey.Equals(other.NaviKey)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SpaceACL == other.SpaceACL ||
                    this.SpaceACL != null &&
                    this.SpaceACL.Equals(other.SpaceACL)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.CanUnlink == other.CanUnlink ||
                    this.CanUnlink != null &&
                    this.CanUnlink.Equals(other.CanUnlink)
                ) && 
                (
                    this.AllowToLeave == other.AllowToLeave ||
                    this.AllowToLeave != null &&
                    this.AllowToLeave.Equals(other.AllowToLeave)
                ) && 
                (
                    this.Pathkeys == other.Pathkeys ||
                    this.Pathkeys != null &&
                    this.Pathkeys.Equals(other.Pathkeys)
                ) && 
                (
                    this.Counts == other.Counts ||
                    this.Counts != null &&
                    this.Counts.Equals(other.Counts)
                ) && 
                (
                    this.LastUpdater == other.LastUpdater ||
                    this.LastUpdater != null &&
                    this.LastUpdater.Equals(other.LastUpdater)
                ) && 
                (
                    this.AllowAccessListModification == other.AllowAccessListModification ||
                    this.AllowAccessListModification != null &&
                    this.AllowAccessListModification.Equals(other.AllowAccessListModification)
                ) && 
                (
                    this.CreateSubSpaceProtected == other.CreateSubSpaceProtected ||
                    this.CreateSubSpaceProtected != null &&
                    this.CreateSubSpaceProtected.Equals(other.CreateSubSpaceProtected)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.ParticipantStatusFlag == other.ParticipantStatusFlag ||
                    this.ParticipantStatusFlag != null &&
                    this.ParticipantStatusFlag.Equals(other.ParticipantStatusFlag)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.EnforceSubSpacePolicy == other.EnforceSubSpacePolicy ||
                    this.EnforceSubSpacePolicy != null &&
                    this.EnforceSubSpacePolicy.Equals(other.EnforceSubSpacePolicy)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Administrators == other.Administrators ||
                    this.Administrators != null &&
                    this.Administrators.SequenceEqual(other.Administrators)
                ) && 
                (
                    this.ParticipantFlag == other.ParticipantFlag ||
                    this.ParticipantFlag != null &&
                    this.ParticipantFlag.Equals(other.ParticipantFlag)
                ) && 
                (
                    this.AsShareSource == other.AsShareSource ||
                    this.AsShareSource != null &&
                    this.AsShareSource.Equals(other.AsShareSource)
                ) && 
                (
                    this.PublicNameFlag == other.PublicNameFlag ||
                    this.PublicNameFlag != null &&
                    this.PublicNameFlag.Equals(other.PublicNameFlag)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.Whitelist == other.Whitelist ||
                    this.Whitelist != null &&
                    this.Whitelist.SequenceEqual(other.Whitelist)
                ) && 
                (
                    this.ParentKey == other.ParentKey ||
                    this.ParentKey != null &&
                    this.ParentKey.Equals(other.ParentKey)
                ) && 
                (
                    this.Usergroups == other.Usergroups ||
                    this.Usergroups != null &&
                    this.Usergroups.SequenceEqual(other.Usergroups)
                ) && 
                (
                    this.FolderSubtype == other.FolderSubtype ||
                    this.FolderSubtype != null &&
                    this.FolderSubtype.Equals(other.FolderSubtype)
                ) && 
                (
                    this.SpaceType == other.SpaceType ||
                    this.SpaceType != null &&
                    this.SpaceType.Equals(other.SpaceType)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.CanEdit == other.CanEdit ||
                    this.CanEdit != null &&
                    this.CanEdit.Equals(other.CanEdit)
                ) && 
                (
                    this.Privacy == other.Privacy ||
                    this.Privacy != null &&
                    this.Privacy.Equals(other.Privacy)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.ExcludeFromMutual == other.ExcludeFromMutual ||
                    this.ExcludeFromMutual != null &&
                    this.ExcludeFromMutual.Equals(other.ExcludeFromMutual)
                ) && 
                (
                    this.AllowAnonymousPost == other.AllowAnonymousPost ||
                    this.AllowAnonymousPost != null &&
                    this.AllowAnonymousPost.Equals(other.AllowAnonymousPost)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.IconType == other.IconType ||
                    this.IconType != null &&
                    this.IconType.Equals(other.IconType)
                ) && 
                (
                    this.RootHotspotType == other.RootHotspotType ||
                    this.RootHotspotType != null &&
                    this.RootHotspotType.Equals(other.RootHotspotType)
                ) && 
                (
                    this.HideOnEmpty == other.HideOnEmpty ||
                    this.HideOnEmpty != null &&
                    this.HideOnEmpty.Equals(other.HideOnEmpty)
                ) && 
                (
                    this.MemberGroups == other.MemberGroups ||
                    this.MemberGroups != null &&
                    this.MemberGroups.SequenceEqual(other.MemberGroups)
                ) && 
                (
                    this.IsLink == other.IsLink ||
                    this.IsLink != null &&
                    this.IsLink.Equals(other.IsLink)
                ) && 
                (
                    this.EnforceAccessPolicy == other.EnforceAccessPolicy ||
                    this.EnforceAccessPolicy != null &&
                    this.EnforceAccessPolicy.Equals(other.EnforceAccessPolicy)
                ) && 
                (
                    this.SpaceACLType == other.SpaceACLType ||
                    this.SpaceACLType != null &&
                    this.SpaceACLType.Equals(other.SpaceACLType)
                ) && 
                (
                    this.HasSubcategories == other.HasSubcategories ||
                    this.HasSubcategories != null &&
                    this.HasSubcategories.Equals(other.HasSubcategories)
                ) && 
                (
                    this.AsShareTarget == other.AsShareTarget ||
                    this.AsShareTarget != null &&
                    this.AsShareTarget.Equals(other.AsShareTarget)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.RootHotspotKey == other.RootHotspotKey ||
                    this.RootHotspotKey != null &&
                    this.RootHotspotKey.Equals(other.RootHotspotKey)
                ) && 
                (
                    this.IsEmpty == other.IsEmpty ||
                    this.IsEmpty != null &&
                    this.IsEmpty.Equals(other.IsEmpty)
                ) && 
                (
                    this.Blacklist == other.Blacklist ||
                    this.Blacklist != null &&
                    this.Blacklist.SequenceEqual(other.Blacklist)
                ) && 
                (
                    this.AnchorKey == other.AnchorKey ||
                    this.AnchorKey != null &&
                    this.AnchorKey.Equals(other.AnchorKey)
                ) && 
                (
                    this.RestrictedFlag == other.RestrictedFlag ||
                    this.RestrictedFlag != null &&
                    this.RestrictedFlag.Equals(other.RestrictedFlag)
                ) && 
                (
                    this.CanCreate == other.CanCreate ||
                    this.CanCreate != null &&
                    this.CanCreate.Equals(other.CanCreate)
                ) && 
                (
                    this.FolderType == other.FolderType ||
                    this.FolderType != null &&
                    this.FolderType.Equals(other.FolderType)
                ) && 
                (
                    this.AllowOutsideParentWL == other.AllowOutsideParentWL ||
                    this.AllowOutsideParentWL != null &&
                    this.AllowOutsideParentWL.Equals(other.AllowOutsideParentWL)
                ) && 
                (
                    this.AccessListProtected == other.AccessListProtected ||
                    this.AccessListProtected != null &&
                    this.AccessListProtected.Equals(other.AccessListProtected)
                ) && 
                (
                    this.MemberCanCreateSubSpace == other.MemberCanCreateSubSpace ||
                    this.MemberCanCreateSubSpace != null &&
                    this.MemberCanCreateSubSpace.Equals(other.MemberCanCreateSubSpace)
                ) && 
                (
                    this.LinkId == other.LinkId ||
                    this.LinkId != null &&
                    this.LinkId.Equals(other.LinkId)
                ) && 
                (
                    this.CanChangeContents == other.CanChangeContents ||
                    this.CanChangeContents != null &&
                    this.CanChangeContents.Equals(other.CanChangeContents)
                ) && 
                (
                    this.NameKey == other.NameKey ||
                    this.NameKey != null &&
                    this.NameKey.Equals(other.NameKey)
                ) && 
                (
                    this.IsShared == other.IsShared ||
                    this.IsShared != null &&
                    this.IsShared.Equals(other.IsShared)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NaviKey != null)
                    hash = hash * 59 + this.NaviKey.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SpaceACL != null)
                    hash = hash * 59 + this.SpaceACL.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.CanUnlink != null)
                    hash = hash * 59 + this.CanUnlink.GetHashCode();
                if (this.AllowToLeave != null)
                    hash = hash * 59 + this.AllowToLeave.GetHashCode();
                if (this.Pathkeys != null)
                    hash = hash * 59 + this.Pathkeys.GetHashCode();
                if (this.Counts != null)
                    hash = hash * 59 + this.Counts.GetHashCode();
                if (this.LastUpdater != null)
                    hash = hash * 59 + this.LastUpdater.GetHashCode();
                if (this.AllowAccessListModification != null)
                    hash = hash * 59 + this.AllowAccessListModification.GetHashCode();
                if (this.CreateSubSpaceProtected != null)
                    hash = hash * 59 + this.CreateSubSpaceProtected.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.ParticipantStatusFlag != null)
                    hash = hash * 59 + this.ParticipantStatusFlag.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.EnforceSubSpacePolicy != null)
                    hash = hash * 59 + this.EnforceSubSpacePolicy.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Administrators != null)
                    hash = hash * 59 + this.Administrators.GetHashCode();
                if (this.ParticipantFlag != null)
                    hash = hash * 59 + this.ParticipantFlag.GetHashCode();
                if (this.AsShareSource != null)
                    hash = hash * 59 + this.AsShareSource.GetHashCode();
                if (this.PublicNameFlag != null)
                    hash = hash * 59 + this.PublicNameFlag.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.Whitelist != null)
                    hash = hash * 59 + this.Whitelist.GetHashCode();
                if (this.ParentKey != null)
                    hash = hash * 59 + this.ParentKey.GetHashCode();
                if (this.Usergroups != null)
                    hash = hash * 59 + this.Usergroups.GetHashCode();
                if (this.FolderSubtype != null)
                    hash = hash * 59 + this.FolderSubtype.GetHashCode();
                if (this.SpaceType != null)
                    hash = hash * 59 + this.SpaceType.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.CanEdit != null)
                    hash = hash * 59 + this.CanEdit.GetHashCode();
                if (this.Privacy != null)
                    hash = hash * 59 + this.Privacy.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.ExcludeFromMutual != null)
                    hash = hash * 59 + this.ExcludeFromMutual.GetHashCode();
                if (this.AllowAnonymousPost != null)
                    hash = hash * 59 + this.AllowAnonymousPost.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.IconType != null)
                    hash = hash * 59 + this.IconType.GetHashCode();
                if (this.RootHotspotType != null)
                    hash = hash * 59 + this.RootHotspotType.GetHashCode();
                if (this.HideOnEmpty != null)
                    hash = hash * 59 + this.HideOnEmpty.GetHashCode();
                if (this.MemberGroups != null)
                    hash = hash * 59 + this.MemberGroups.GetHashCode();
                if (this.IsLink != null)
                    hash = hash * 59 + this.IsLink.GetHashCode();
                if (this.EnforceAccessPolicy != null)
                    hash = hash * 59 + this.EnforceAccessPolicy.GetHashCode();
                if (this.SpaceACLType != null)
                    hash = hash * 59 + this.SpaceACLType.GetHashCode();
                if (this.HasSubcategories != null)
                    hash = hash * 59 + this.HasSubcategories.GetHashCode();
                if (this.AsShareTarget != null)
                    hash = hash * 59 + this.AsShareTarget.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.RootHotspotKey != null)
                    hash = hash * 59 + this.RootHotspotKey.GetHashCode();
                if (this.IsEmpty != null)
                    hash = hash * 59 + this.IsEmpty.GetHashCode();
                if (this.Blacklist != null)
                    hash = hash * 59 + this.Blacklist.GetHashCode();
                if (this.AnchorKey != null)
                    hash = hash * 59 + this.AnchorKey.GetHashCode();
                if (this.RestrictedFlag != null)
                    hash = hash * 59 + this.RestrictedFlag.GetHashCode();
                if (this.CanCreate != null)
                    hash = hash * 59 + this.CanCreate.GetHashCode();
                if (this.FolderType != null)
                    hash = hash * 59 + this.FolderType.GetHashCode();
                if (this.AllowOutsideParentWL != null)
                    hash = hash * 59 + this.AllowOutsideParentWL.GetHashCode();
                if (this.AccessListProtected != null)
                    hash = hash * 59 + this.AccessListProtected.GetHashCode();
                if (this.MemberCanCreateSubSpace != null)
                    hash = hash * 59 + this.MemberCanCreateSubSpace.GetHashCode();
                if (this.LinkId != null)
                    hash = hash * 59 + this.LinkId.GetHashCode();
                if (this.CanChangeContents != null)
                    hash = hash * 59 + this.CanChangeContents.GetHashCode();
                if (this.NameKey != null)
                    hash = hash * 59 + this.NameKey.GetHashCode();
                if (this.IsShared != null)
                    hash = hash * 59 + this.IsShared.GetHashCode();
                return hash;
            }
        }
    }

}
