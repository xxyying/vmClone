/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SettingOptionsRecordV2
    /// </summary>
    [DataContract]
    public partial class SettingOptionsRecordV2 :  IEquatable<SettingOptionsRecordV2>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingOptionsRecordV2" /> class.
        /// </summary>
        /// <param name="Attributes">Setting attribute.</param>
        /// <param name="ShowVisibilityLabel">Whether need show visibility label.</param>
        /// <param name="Namespaces">Setting namespace.</param>
        public SettingOptionsRecordV2(Object Attributes = null, bool? ShowVisibilityLabel = null, Object Namespaces = null)
        {
            this.Attributes = Attributes;
            this.ShowVisibilityLabel = ShowVisibilityLabel;
            this.Namespaces = Namespaces;
        }
        
        /// <summary>
        /// Setting attribute
        /// </summary>
        /// <value>Setting attribute</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }
        /// <summary>
        /// Whether need show visibility label
        /// </summary>
        /// <value>Whether need show visibility label</value>
        [DataMember(Name="showVisibilityLabel", EmitDefaultValue=false)]
        public bool? ShowVisibilityLabel { get; set; }
        /// <summary>
        /// Setting namespace
        /// </summary>
        /// <value>Setting namespace</value>
        [DataMember(Name="namespaces", EmitDefaultValue=false)]
        public Object Namespaces { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingOptionsRecordV2 {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ShowVisibilityLabel: ").Append(ShowVisibilityLabel).Append("\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SettingOptionsRecordV2);
        }

        /// <summary>
        /// Returns true if SettingOptionsRecordV2 instances are equal
        /// </summary>
        /// <param name="other">Instance of SettingOptionsRecordV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingOptionsRecordV2 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.ShowVisibilityLabel == other.ShowVisibilityLabel ||
                    this.ShowVisibilityLabel != null &&
                    this.ShowVisibilityLabel.Equals(other.ShowVisibilityLabel)
                ) && 
                (
                    this.Namespaces == other.Namespaces ||
                    this.Namespaces != null &&
                    this.Namespaces.Equals(other.Namespaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.ShowVisibilityLabel != null)
                    hash = hash * 59 + this.ShowVisibilityLabel.GetHashCode();
                if (this.Namespaces != null)
                    hash = hash * 59 + this.Namespaces.GetHashCode();
                return hash;
            }
        }
    }

}
