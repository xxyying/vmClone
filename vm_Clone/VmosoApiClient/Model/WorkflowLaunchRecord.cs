/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// WorkflowLaunchRecord
    /// </summary>
    [DataContract]
    public partial class WorkflowLaunchRecord :  IEquatable<WorkflowLaunchRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowLaunchRecord" /> class.
        /// </summary>
        /// <param name="Data">Launch data. This would include items from {@link WorkflowLaunchableRecord::$data}..</param>
        /// <param name="Roles">Role assignments..</param>
        /// <param name="Name">Name of workflow..</param>
        /// <param name="Description">Description of workflow..</param>
        /// <param name="DefKey">Workflow definition key (from {@link WorkflowLaunchableRecord::$defKey})..</param>
        public WorkflowLaunchRecord(List<WorkflowDataRecord> Data = null, List<WorkflowRolesRecord> Roles = null, string Name = null, string Description = null, string DefKey = null)
        {
            this.Data = Data;
            this.Roles = Roles;
            this.Name = Name;
            this.Description = Description;
            this.DefKey = DefKey;
        }
        
        /// <summary>
        /// Launch data. This would include items from {@link WorkflowLaunchableRecord::$data}.
        /// </summary>
        /// <value>Launch data. This would include items from {@link WorkflowLaunchableRecord::$data}.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<WorkflowDataRecord> Data { get; set; }
        /// <summary>
        /// Role assignments.
        /// </summary>
        /// <value>Role assignments.</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<WorkflowRolesRecord> Roles { get; set; }
        /// <summary>
        /// Name of workflow.
        /// </summary>
        /// <value>Name of workflow.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Description of workflow.
        /// </summary>
        /// <value>Description of workflow.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Workflow definition key (from {@link WorkflowLaunchableRecord::$defKey}).
        /// </summary>
        /// <value>Workflow definition key (from {@link WorkflowLaunchableRecord::$defKey}).</value>
        [DataMember(Name="defKey", EmitDefaultValue=false)]
        public string DefKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowLaunchRecord {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DefKey: ").Append(DefKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowLaunchRecord);
        }

        /// <summary>
        /// Returns true if WorkflowLaunchRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowLaunchRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowLaunchRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(other.Data)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DefKey == other.DefKey ||
                    this.DefKey != null &&
                    this.DefKey.Equals(other.DefKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DefKey != null)
                    hash = hash * 59 + this.DefKey.GetHashCode();
                return hash;
            }
        }
    }

}
