/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// VUTFormatRecord
    /// </summary>
    [DataContract]
    public partial class VUTFormatRecord : FormatRecordV2,  IEquatable<VUTFormatRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VUTFormatRecord" /> class.
        /// </summary>
        /// <param name="ObjectFormat">Record return format: s m l.</param>
        /// <param name="ActivityCount">Wehther to return activity count.</param>
        /// <param name="CountLevel">VUT count specification: none immediate-children all-children.</param>
        /// <param name="Permissions">Whether to return permissions.</param>
        /// <param name="Sort">Sort attribute.. Common usages include: OBJECT_LANG_SORT_KEY LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME.</param>
        /// <param name="SortDir">Sort direction: ASC DESC.</param>
        /// <param name="Recursive">Recursively retrieve everything.</param>
        public VUTFormatRecord(string ObjectFormat = null, bool? ActivityCount = null, string CountLevel = null, bool? Permissions = null, string Sort = null, string SortDir = null, bool? Recursive = null)
        {
            this.ObjectFormat = ObjectFormat;
            this.ActivityCount = ActivityCount;
            this.CountLevel = CountLevel;
            this.Permissions = Permissions;
            this.Sort = Sort;
            this.SortDir = SortDir;
            this.Recursive = Recursive;
        }
        
        /// <summary>
        /// Record return format: s m l
        /// </summary>
        /// <value>Record return format: s m l</value>
        [DataMember(Name="object_format", EmitDefaultValue=false)]
        public string ObjectFormat { get; set; }
        /// <summary>
        /// Wehther to return activity count
        /// </summary>
        /// <value>Wehther to return activity count</value>
        [DataMember(Name="activity_count", EmitDefaultValue=false)]
        public bool? ActivityCount { get; set; }
        /// <summary>
        /// VUT count specification: none immediate-children all-children
        /// </summary>
        /// <value>VUT count specification: none immediate-children all-children</value>
        [DataMember(Name="count_level", EmitDefaultValue=false)]
        public string CountLevel { get; set; }
        /// <summary>
        /// Whether to return permissions
        /// </summary>
        /// <value>Whether to return permissions</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public bool? Permissions { get; set; }
        /// <summary>
        /// Sort attribute.. Common usages include: OBJECT_LANG_SORT_KEY LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME
        /// </summary>
        /// <value>Sort attribute.. Common usages include: OBJECT_LANG_SORT_KEY LAST_ACTIVITY_TIME DOMINANT_ACTIVITY_TIME</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }
        /// <summary>
        /// Sort direction: ASC DESC
        /// </summary>
        /// <value>Sort direction: ASC DESC</value>
        [DataMember(Name="sort_dir", EmitDefaultValue=false)]
        public string SortDir { get; set; }
        /// <summary>
        /// Recursively retrieve everything
        /// </summary>
        /// <value>Recursively retrieve everything</value>
        [DataMember(Name="recursive", EmitDefaultValue=false)]
        public bool? Recursive { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VUTFormatRecord {\n");
            sb.Append("  ObjectFormat: ").Append(ObjectFormat).Append("\n");
            sb.Append("  ActivityCount: ").Append(ActivityCount).Append("\n");
            sb.Append("  CountLevel: ").Append(CountLevel).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  SortDir: ").Append(SortDir).Append("\n");
            sb.Append("  Recursive: ").Append(Recursive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VUTFormatRecord);
        }

        /// <summary>
        /// Returns true if VUTFormatRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of VUTFormatRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VUTFormatRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ObjectFormat == other.ObjectFormat ||
                    this.ObjectFormat != null &&
                    this.ObjectFormat.Equals(other.ObjectFormat)
                ) && 
                (
                    this.ActivityCount == other.ActivityCount ||
                    this.ActivityCount != null &&
                    this.ActivityCount.Equals(other.ActivityCount)
                ) && 
                (
                    this.CountLevel == other.CountLevel ||
                    this.CountLevel != null &&
                    this.CountLevel.Equals(other.CountLevel)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.Equals(other.Permissions)
                ) && 
                (
                    this.Sort == other.Sort ||
                    this.Sort != null &&
                    this.Sort.Equals(other.Sort)
                ) && 
                (
                    this.SortDir == other.SortDir ||
                    this.SortDir != null &&
                    this.SortDir.Equals(other.SortDir)
                ) && 
                (
                    this.Recursive == other.Recursive ||
                    this.Recursive != null &&
                    this.Recursive.Equals(other.Recursive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ObjectFormat != null)
                    hash = hash * 59 + this.ObjectFormat.GetHashCode();
                if (this.ActivityCount != null)
                    hash = hash * 59 + this.ActivityCount.GetHashCode();
                if (this.CountLevel != null)
                    hash = hash * 59 + this.CountLevel.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.Sort != null)
                    hash = hash * 59 + this.Sort.GetHashCode();
                if (this.SortDir != null)
                    hash = hash * 59 + this.SortDir.GetHashCode();
                if (this.Recursive != null)
                    hash = hash * 59 + this.Recursive.GetHashCode();
                return hash;
            }
        }
    }

}
