/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// PaginationRecord
    /// </summary>
    [DataContract]
    public partial class PaginationRecord :  IEquatable<PaginationRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationRecord" /> class.
        /// </summary>
        /// <param name="CPrev">Cursor for the prev page..</param>
        /// <param name="CNext">Cursor for the next page..</param>
        /// <param name="Offset">Offset into the whole list of the first item on the page. @deprecate This is being replaced by page designation..</param>
        /// <param name="CHere">Cursor to come back to this page. This is the &#39;here&#39; cursor..</param>
        /// <param name="Limit">Maximum number of items on a page, i.e. page size..</param>
        /// <param name="Page">Page requested. @todo The default would change to say PG_HERE once legacy offset is gone..</param>
        /// <param name="CMore">Cursor for more items beyond end of list. This is set for the last page, i.e. if {@link c_next} is unavailable..</param>
        /// <param name="Markers">Pagination markers. Markers are opaque values prepared and used by the server for more efficient pagination. @deprecate This is replaced by explicit cursor..</param>
        /// <param name="Jump">Jump.</param>
        public PaginationRecord(string CPrev = null, string CNext = null, int? Offset = null, string CHere = null, int? Limit = null, string Page = null, string CMore = null, List<string> Markers = null, PageJumpRecord Jump = null)
        {
            this.CPrev = CPrev;
            this.CNext = CNext;
            this.Offset = Offset;
            this.CHere = CHere;
            this.Limit = Limit;
            this.Page = Page;
            this.CMore = CMore;
            this.Markers = Markers;
            this.Jump = Jump;
        }
        
        /// <summary>
        /// Cursor for the prev page.
        /// </summary>
        /// <value>Cursor for the prev page.</value>
        [DataMember(Name="c_prev", EmitDefaultValue=false)]
        public string CPrev { get; set; }
        /// <summary>
        /// Cursor for the next page.
        /// </summary>
        /// <value>Cursor for the next page.</value>
        [DataMember(Name="c_next", EmitDefaultValue=false)]
        public string CNext { get; set; }
        /// <summary>
        /// Offset into the whole list of the first item on the page. @deprecate This is being replaced by page designation.
        /// </summary>
        /// <value>Offset into the whole list of the first item on the page. @deprecate This is being replaced by page designation.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }
        /// <summary>
        /// Cursor to come back to this page. This is the &#39;here&#39; cursor.
        /// </summary>
        /// <value>Cursor to come back to this page. This is the &#39;here&#39; cursor.</value>
        [DataMember(Name="c_here", EmitDefaultValue=false)]
        public string CHere { get; set; }
        /// <summary>
        /// Maximum number of items on a page, i.e. page size.
        /// </summary>
        /// <value>Maximum number of items on a page, i.e. page size.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }
        /// <summary>
        /// Page requested. @todo The default would change to say PG_HERE once legacy offset is gone.
        /// </summary>
        /// <value>Page requested. @todo The default would change to say PG_HERE once legacy offset is gone.</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public string Page { get; set; }
        /// <summary>
        /// Cursor for more items beyond end of list. This is set for the last page, i.e. if {@link c_next} is unavailable.
        /// </summary>
        /// <value>Cursor for more items beyond end of list. This is set for the last page, i.e. if {@link c_next} is unavailable.</value>
        [DataMember(Name="c_more", EmitDefaultValue=false)]
        public string CMore { get; set; }
        /// <summary>
        /// Pagination markers. Markers are opaque values prepared and used by the server for more efficient pagination. @deprecate This is replaced by explicit cursor.
        /// </summary>
        /// <value>Pagination markers. Markers are opaque values prepared and used by the server for more efficient pagination. @deprecate This is replaced by explicit cursor.</value>
        [DataMember(Name="markers", EmitDefaultValue=false)]
        public List<string> Markers { get; set; }
        /// <summary>
        /// Gets or Sets Jump
        /// </summary>
        [DataMember(Name="jump", EmitDefaultValue=false)]
        public PageJumpRecord Jump { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaginationRecord {\n");
            sb.Append("  CPrev: ").Append(CPrev).Append("\n");
            sb.Append("  CNext: ").Append(CNext).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  CHere: ").Append(CHere).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  CMore: ").Append(CMore).Append("\n");
            sb.Append("  Markers: ").Append(Markers).Append("\n");
            sb.Append("  Jump: ").Append(Jump).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaginationRecord);
        }

        /// <summary>
        /// Returns true if PaginationRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of PaginationRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CPrev == other.CPrev ||
                    this.CPrev != null &&
                    this.CPrev.Equals(other.CPrev)
                ) && 
                (
                    this.CNext == other.CNext ||
                    this.CNext != null &&
                    this.CNext.Equals(other.CNext)
                ) && 
                (
                    this.Offset == other.Offset ||
                    this.Offset != null &&
                    this.Offset.Equals(other.Offset)
                ) && 
                (
                    this.CHere == other.CHere ||
                    this.CHere != null &&
                    this.CHere.Equals(other.CHere)
                ) && 
                (
                    this.Limit == other.Limit ||
                    this.Limit != null &&
                    this.Limit.Equals(other.Limit)
                ) && 
                (
                    this.Page == other.Page ||
                    this.Page != null &&
                    this.Page.Equals(other.Page)
                ) && 
                (
                    this.CMore == other.CMore ||
                    this.CMore != null &&
                    this.CMore.Equals(other.CMore)
                ) && 
                (
                    this.Markers == other.Markers ||
                    this.Markers != null &&
                    this.Markers.SequenceEqual(other.Markers)
                ) && 
                (
                    this.Jump == other.Jump ||
                    this.Jump != null &&
                    this.Jump.Equals(other.Jump)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CPrev != null)
                    hash = hash * 59 + this.CPrev.GetHashCode();
                if (this.CNext != null)
                    hash = hash * 59 + this.CNext.GetHashCode();
                if (this.Offset != null)
                    hash = hash * 59 + this.Offset.GetHashCode();
                if (this.CHere != null)
                    hash = hash * 59 + this.CHere.GetHashCode();
                if (this.Limit != null)
                    hash = hash * 59 + this.Limit.GetHashCode();
                if (this.Page != null)
                    hash = hash * 59 + this.Page.GetHashCode();
                if (this.CMore != null)
                    hash = hash * 59 + this.CMore.GetHashCode();
                if (this.Markers != null)
                    hash = hash * 59 + this.Markers.GetHashCode();
                if (this.Jump != null)
                    hash = hash * 59 + this.Jump.GetHashCode();
                return hash;
            }
        }
    }

}
