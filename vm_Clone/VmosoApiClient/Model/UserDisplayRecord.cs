/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// UserDisplayRecord
    /// </summary>
    [DataContract]
    public partial class UserDisplayRecord : DisplayRecord,  IEquatable<UserDisplayRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDisplayRecord" /> class.
        /// </summary>
        /// <param name="AnonymousIconTiny">Anonymous icon path for tiny size..</param>
        /// <param name="AnonymousIconLarge">Anonymous icon path for large size..</param>
        /// <param name="DisplayName">Display Name..</param>
        /// <param name="AnonymousName">Anonymous Name..</param>
        /// <param name="IconMedium">Icon path for medium size..</param>
        /// <param name="IconLarge">Icon path for large size..</param>
        /// <param name="AnonymousIconEdit">Anonymous icon path for edit purpose..</param>
        /// <param name="Type">Type of Display Record.</param>
        /// <param name="AnonymousIconMedium">Anonymous icon path for medium size..</param>
        /// <param name="Solution">User solution.</param>
        /// <param name="AnonymousIconSmall">Anonymous icon path for small size..</param>
        /// <param name="NaviKey">Navigation Key ; store navigation group letter.</param>
        /// <param name="IsRegistered">Whether can login the network..</param>
        /// <param name="IsDisabled">Check user disabled.</param>
        /// <param name="IconTiny">Icon path for tiny size..</param>
        /// <param name="IconSmall">Icon path for small size..</param>
        /// <param name="Key">Key of Display record..</param>
        /// <param name="IconEdit">Icon path for edit purpose..</param>
        /// <param name="IsProvisioned">Determines if the user is a provisioned user or not..</param>
        /// <param name="Status">User Status..</param>
        /// <param name="FirstName">User First Name..</param>
        /// <param name="LastName">User Last Name..</param>
        /// <param name="LastNameRomanized">User&#39;s English Last Name&#39;..</param>
        /// <param name="FirstNameRomanized">User&#39;s English First Name&#39;..</param>
        /// <param name="Language">User&#39;s preferred language&#39;..</param>
        /// <param name="LastNameForDisplay">User Last Name for display according to language..</param>
        /// <param name="FirstNameForDisplay">User First Name for display according to language..</param>
        public UserDisplayRecord(string AnonymousIconTiny = null, string AnonymousIconLarge = null, string DisplayName = null, string AnonymousName = null, string IconMedium = null, string IconLarge = null, string AnonymousIconEdit = null, string Type = null, string AnonymousIconMedium = null, string Solution = null, string AnonymousIconSmall = null, string NaviKey = null, bool? IsRegistered = null, bool? IsDisabled = null, string IconTiny = null, string IconSmall = null, string Key = null, string IconEdit = null, bool? IsProvisioned = null, string Status = null, string FirstName = null, string LastName = null, string LastNameRomanized = null, string FirstNameRomanized = null, string Language = null, string LastNameForDisplay = null, string FirstNameForDisplay = null)
        {
            this.AnonymousIconTiny = AnonymousIconTiny;
            this.AnonymousIconLarge = AnonymousIconLarge;
            this.DisplayName = DisplayName;
            this.AnonymousName = AnonymousName;
            this.IconMedium = IconMedium;
            this.IconLarge = IconLarge;
            this.AnonymousIconEdit = AnonymousIconEdit;
            this.Type = Type;
            this.AnonymousIconMedium = AnonymousIconMedium;
            this.Solution = Solution;
            this.AnonymousIconSmall = AnonymousIconSmall;
            this.NaviKey = NaviKey;
            this.IsRegistered = IsRegistered;
            this.IsDisabled = IsDisabled;
            this.IconTiny = IconTiny;
            this.IconSmall = IconSmall;
            this.Key = Key;
            this.IconEdit = IconEdit;
            this.IsProvisioned = IsProvisioned;
            this.Status = Status;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.LastNameRomanized = LastNameRomanized;
            this.FirstNameRomanized = FirstNameRomanized;
            this.Language = Language;
            this.LastNameForDisplay = LastNameForDisplay;
            this.FirstNameForDisplay = FirstNameForDisplay;
        }
        
        /// <summary>
        /// Anonymous icon path for tiny size.
        /// </summary>
        /// <value>Anonymous icon path for tiny size.</value>
        [DataMember(Name="anonymousIconTiny", EmitDefaultValue=false)]
        public string AnonymousIconTiny { get; set; }
        /// <summary>
        /// Anonymous icon path for large size.
        /// </summary>
        /// <value>Anonymous icon path for large size.</value>
        [DataMember(Name="anonymousIconLarge", EmitDefaultValue=false)]
        public string AnonymousIconLarge { get; set; }
        /// <summary>
        /// Display Name.
        /// </summary>
        /// <value>Display Name.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Anonymous Name.
        /// </summary>
        /// <value>Anonymous Name.</value>
        [DataMember(Name="anonymousName", EmitDefaultValue=false)]
        public string AnonymousName { get; set; }
        /// <summary>
        /// Icon path for medium size.
        /// </summary>
        /// <value>Icon path for medium size.</value>
        [DataMember(Name="iconMedium", EmitDefaultValue=false)]
        public string IconMedium { get; set; }
        /// <summary>
        /// Icon path for large size.
        /// </summary>
        /// <value>Icon path for large size.</value>
        [DataMember(Name="iconLarge", EmitDefaultValue=false)]
        public string IconLarge { get; set; }
        /// <summary>
        /// Anonymous icon path for edit purpose.
        /// </summary>
        /// <value>Anonymous icon path for edit purpose.</value>
        [DataMember(Name="anonymousIconEdit", EmitDefaultValue=false)]
        public string AnonymousIconEdit { get; set; }
        /// <summary>
        /// Type of Display Record
        /// </summary>
        /// <value>Type of Display Record</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Anonymous icon path for medium size.
        /// </summary>
        /// <value>Anonymous icon path for medium size.</value>
        [DataMember(Name="anonymousIconMedium", EmitDefaultValue=false)]
        public string AnonymousIconMedium { get; set; }
        /// <summary>
        /// User solution
        /// </summary>
        /// <value>User solution</value>
        [DataMember(Name="solution", EmitDefaultValue=false)]
        public string Solution { get; set; }
        /// <summary>
        /// Anonymous icon path for small size.
        /// </summary>
        /// <value>Anonymous icon path for small size.</value>
        [DataMember(Name="anonymousIconSmall", EmitDefaultValue=false)]
        public string AnonymousIconSmall { get; set; }
        /// <summary>
        /// Navigation Key ; store navigation group letter
        /// </summary>
        /// <value>Navigation Key ; store navigation group letter</value>
        [DataMember(Name="naviKey", EmitDefaultValue=false)]
        public string NaviKey { get; set; }
        /// <summary>
        /// Whether can login the network.
        /// </summary>
        /// <value>Whether can login the network.</value>
        [DataMember(Name="isRegistered", EmitDefaultValue=false)]
        public bool? IsRegistered { get; set; }
        /// <summary>
        /// Check user disabled
        /// </summary>
        /// <value>Check user disabled</value>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }
        /// <summary>
        /// Icon path for tiny size.
        /// </summary>
        /// <value>Icon path for tiny size.</value>
        [DataMember(Name="iconTiny", EmitDefaultValue=false)]
        public string IconTiny { get; set; }
        /// <summary>
        /// Icon path for small size.
        /// </summary>
        /// <value>Icon path for small size.</value>
        [DataMember(Name="iconSmall", EmitDefaultValue=false)]
        public string IconSmall { get; set; }
        /// <summary>
        /// Key of Display record.
        /// </summary>
        /// <value>Key of Display record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Icon path for edit purpose.
        /// </summary>
        /// <value>Icon path for edit purpose.</value>
        [DataMember(Name="iconEdit", EmitDefaultValue=false)]
        public string IconEdit { get; set; }
        /// <summary>
        /// Determines if the user is a provisioned user or not.
        /// </summary>
        /// <value>Determines if the user is a provisioned user or not.</value>
        [DataMember(Name="isProvisioned", EmitDefaultValue=false)]
        public bool? IsProvisioned { get; set; }
        /// <summary>
        /// User Status.
        /// </summary>
        /// <value>User Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// User First Name.
        /// </summary>
        /// <value>User First Name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// User Last Name.
        /// </summary>
        /// <value>User Last Name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// User&#39;s English Last Name&#39;.
        /// </summary>
        /// <value>User&#39;s English Last Name&#39;.</value>
        [DataMember(Name="lastNameRomanized", EmitDefaultValue=false)]
        public string LastNameRomanized { get; set; }
        /// <summary>
        /// User&#39;s English First Name&#39;.
        /// </summary>
        /// <value>User&#39;s English First Name&#39;.</value>
        [DataMember(Name="firstNameRomanized", EmitDefaultValue=false)]
        public string FirstNameRomanized { get; set; }
        /// <summary>
        /// User&#39;s preferred language&#39;.
        /// </summary>
        /// <value>User&#39;s preferred language&#39;.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }
        /// <summary>
        /// User Last Name for display according to language.
        /// </summary>
        /// <value>User Last Name for display according to language.</value>
        [DataMember(Name="lastNameForDisplay", EmitDefaultValue=false)]
        public string LastNameForDisplay { get; set; }
        /// <summary>
        /// User First Name for display according to language.
        /// </summary>
        /// <value>User First Name for display according to language.</value>
        [DataMember(Name="firstNameForDisplay", EmitDefaultValue=false)]
        public string FirstNameForDisplay { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDisplayRecord {\n");
            sb.Append("  AnonymousIconTiny: ").Append(AnonymousIconTiny).Append("\n");
            sb.Append("  AnonymousIconLarge: ").Append(AnonymousIconLarge).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  AnonymousName: ").Append(AnonymousName).Append("\n");
            sb.Append("  IconMedium: ").Append(IconMedium).Append("\n");
            sb.Append("  IconLarge: ").Append(IconLarge).Append("\n");
            sb.Append("  AnonymousIconEdit: ").Append(AnonymousIconEdit).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AnonymousIconMedium: ").Append(AnonymousIconMedium).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  AnonymousIconSmall: ").Append(AnonymousIconSmall).Append("\n");
            sb.Append("  NaviKey: ").Append(NaviKey).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IconTiny: ").Append(IconTiny).Append("\n");
            sb.Append("  IconSmall: ").Append(IconSmall).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  IconEdit: ").Append(IconEdit).Append("\n");
            sb.Append("  IsProvisioned: ").Append(IsProvisioned).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastNameRomanized: ").Append(LastNameRomanized).Append("\n");
            sb.Append("  FirstNameRomanized: ").Append(FirstNameRomanized).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastNameForDisplay: ").Append(LastNameForDisplay).Append("\n");
            sb.Append("  FirstNameForDisplay: ").Append(FirstNameForDisplay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserDisplayRecord);
        }

        /// <summary>
        /// Returns true if UserDisplayRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDisplayRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDisplayRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnonymousIconTiny == other.AnonymousIconTiny ||
                    this.AnonymousIconTiny != null &&
                    this.AnonymousIconTiny.Equals(other.AnonymousIconTiny)
                ) && 
                (
                    this.AnonymousIconLarge == other.AnonymousIconLarge ||
                    this.AnonymousIconLarge != null &&
                    this.AnonymousIconLarge.Equals(other.AnonymousIconLarge)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.AnonymousName == other.AnonymousName ||
                    this.AnonymousName != null &&
                    this.AnonymousName.Equals(other.AnonymousName)
                ) && 
                (
                    this.IconMedium == other.IconMedium ||
                    this.IconMedium != null &&
                    this.IconMedium.Equals(other.IconMedium)
                ) && 
                (
                    this.IconLarge == other.IconLarge ||
                    this.IconLarge != null &&
                    this.IconLarge.Equals(other.IconLarge)
                ) && 
                (
                    this.AnonymousIconEdit == other.AnonymousIconEdit ||
                    this.AnonymousIconEdit != null &&
                    this.AnonymousIconEdit.Equals(other.AnonymousIconEdit)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.AnonymousIconMedium == other.AnonymousIconMedium ||
                    this.AnonymousIconMedium != null &&
                    this.AnonymousIconMedium.Equals(other.AnonymousIconMedium)
                ) && 
                (
                    this.Solution == other.Solution ||
                    this.Solution != null &&
                    this.Solution.Equals(other.Solution)
                ) && 
                (
                    this.AnonymousIconSmall == other.AnonymousIconSmall ||
                    this.AnonymousIconSmall != null &&
                    this.AnonymousIconSmall.Equals(other.AnonymousIconSmall)
                ) && 
                (
                    this.NaviKey == other.NaviKey ||
                    this.NaviKey != null &&
                    this.NaviKey.Equals(other.NaviKey)
                ) && 
                (
                    this.IsRegistered == other.IsRegistered ||
                    this.IsRegistered != null &&
                    this.IsRegistered.Equals(other.IsRegistered)
                ) && 
                (
                    this.IsDisabled == other.IsDisabled ||
                    this.IsDisabled != null &&
                    this.IsDisabled.Equals(other.IsDisabled)
                ) && 
                (
                    this.IconTiny == other.IconTiny ||
                    this.IconTiny != null &&
                    this.IconTiny.Equals(other.IconTiny)
                ) && 
                (
                    this.IconSmall == other.IconSmall ||
                    this.IconSmall != null &&
                    this.IconSmall.Equals(other.IconSmall)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.IconEdit == other.IconEdit ||
                    this.IconEdit != null &&
                    this.IconEdit.Equals(other.IconEdit)
                ) && 
                (
                    this.IsProvisioned == other.IsProvisioned ||
                    this.IsProvisioned != null &&
                    this.IsProvisioned.Equals(other.IsProvisioned)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.LastNameRomanized == other.LastNameRomanized ||
                    this.LastNameRomanized != null &&
                    this.LastNameRomanized.Equals(other.LastNameRomanized)
                ) && 
                (
                    this.FirstNameRomanized == other.FirstNameRomanized ||
                    this.FirstNameRomanized != null &&
                    this.FirstNameRomanized.Equals(other.FirstNameRomanized)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.LastNameForDisplay == other.LastNameForDisplay ||
                    this.LastNameForDisplay != null &&
                    this.LastNameForDisplay.Equals(other.LastNameForDisplay)
                ) && 
                (
                    this.FirstNameForDisplay == other.FirstNameForDisplay ||
                    this.FirstNameForDisplay != null &&
                    this.FirstNameForDisplay.Equals(other.FirstNameForDisplay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnonymousIconTiny != null)
                    hash = hash * 59 + this.AnonymousIconTiny.GetHashCode();
                if (this.AnonymousIconLarge != null)
                    hash = hash * 59 + this.AnonymousIconLarge.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.AnonymousName != null)
                    hash = hash * 59 + this.AnonymousName.GetHashCode();
                if (this.IconMedium != null)
                    hash = hash * 59 + this.IconMedium.GetHashCode();
                if (this.IconLarge != null)
                    hash = hash * 59 + this.IconLarge.GetHashCode();
                if (this.AnonymousIconEdit != null)
                    hash = hash * 59 + this.AnonymousIconEdit.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.AnonymousIconMedium != null)
                    hash = hash * 59 + this.AnonymousIconMedium.GetHashCode();
                if (this.Solution != null)
                    hash = hash * 59 + this.Solution.GetHashCode();
                if (this.AnonymousIconSmall != null)
                    hash = hash * 59 + this.AnonymousIconSmall.GetHashCode();
                if (this.NaviKey != null)
                    hash = hash * 59 + this.NaviKey.GetHashCode();
                if (this.IsRegistered != null)
                    hash = hash * 59 + this.IsRegistered.GetHashCode();
                if (this.IsDisabled != null)
                    hash = hash * 59 + this.IsDisabled.GetHashCode();
                if (this.IconTiny != null)
                    hash = hash * 59 + this.IconTiny.GetHashCode();
                if (this.IconSmall != null)
                    hash = hash * 59 + this.IconSmall.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.IconEdit != null)
                    hash = hash * 59 + this.IconEdit.GetHashCode();
                if (this.IsProvisioned != null)
                    hash = hash * 59 + this.IsProvisioned.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.LastNameRomanized != null)
                    hash = hash * 59 + this.LastNameRomanized.GetHashCode();
                if (this.FirstNameRomanized != null)
                    hash = hash * 59 + this.FirstNameRomanized.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.LastNameForDisplay != null)
                    hash = hash * 59 + this.LastNameForDisplay.GetHashCode();
                if (this.FirstNameForDisplay != null)
                    hash = hash * 59 + this.FirstNameForDisplay.GetHashCode();
                return hash;
            }
        }
    }

}
