/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ContactCardRecord
    /// </summary>
    [DataContract]
    public partial class ContactCardRecord : ObjectV2Record,  IEquatable<ContactCardRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCardRecord" /> class.
        /// </summary>
        /// <param name="HasDraft">the login user has comment drafts in this object..</param>
        /// <param name="Editor">Editor.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="ExplicitReadCount">ExplicitReadCount.</param>
        /// <param name="FavoriteFlag">ImportantFlag..</param>
        /// <param name="Destinations">Destinations where this object has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="RefmeFlag">RefmeFlag..</param>
        /// <param name="Type">Type of document record..</param>
        /// <param name="Locale">Locale language..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="ImportantFlag">ImportantFlag..</param>
        /// <param name="LifecycleState">lifecycle state..</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Type of document record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Key">Key of document record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status..</param>
        /// <param name="HybridFlag">Hybrid Flag..</param>
        /// <param name="LastName">Contact card last name..</param>
        /// <param name="Country">Contact card country.</param>
        /// <param name="SecondaryEmail">Contact card secondary email.</param>
        /// <param name="Notes">Contact card notes.</param>
        /// <param name="JobTitle">Contact card job.</param>
        /// <param name="IconMedium">Contact card medium icon.</param>
        /// <param name="Linkedin">Contact card linkedin.</param>
        /// <param name="PersonalEmail">Contact card personal email.</param>
        /// <param name="Skype">Contact card first name..</param>
        /// <param name="Twitter">Contact card twitter.</param>
        /// <param name="Weibo">Sina WEIBO.</param>
        /// <param name="Enable">Contact card delete flag.</param>
        /// <param name="UploadedIconFid">Contact card icon id.</param>
        /// <param name="Company">Contact card company.</param>
        /// <param name="Department">Contact card deparment.</param>
        /// <param name="IconTiny">Contact card tiny icon.</param>
        /// <param name="IconEdit">Contact card edit icon.</param>
        /// <param name="Qq">qq.</param>
        /// <param name="Website">Contact card website.</param>
        /// <param name="HomePhone">Contact card home phone.</param>
        /// <param name="Wechat">wechat.</param>
        /// <param name="UserKey">Contact card reference user key..</param>
        /// <param name="CustomThumbnailSize">Contact card custom icon size.</param>
        /// <param name="FirstName">Contact card first name..</param>
        /// <param name="HomeEmail">Contact card home email.</param>
        /// <param name="MobilePhone">Contact card mobile phone.</param>
        /// <param name="BusinessPhone">Contact card business phone.</param>
        /// <param name="IconSmall">Contact card small icon.</param>
        public ContactCardRecord(bool? HasDraft = null, DisplayRecord Editor = null, DisplayRecord Creator = null, ObjectReadInfoRecord ExplicitReadCount = null, bool? FavoriteFlag = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, bool? RefmeFlag = null, string Type = null, string Locale = null, int? Timeupdated = null, bool? ImportantFlag = null, string LifecycleState = null, int? Timecreated = null, int? DominantTime = null, bool? HideFlag = null, string Subtype = null, bool? PinFlag = null, bool? FollowFlag = null, string Key = null, int? PinTime = null, string Status = null, bool? HybridFlag = null, string LastName = null, string Country = null, string SecondaryEmail = null, string Notes = null, string JobTitle = null, string IconMedium = null, string Linkedin = null, string PersonalEmail = null, string Skype = null, string Twitter = null, string Weibo = null, string Enable = null, string UploadedIconFid = null, string Company = null, string Department = null, string IconTiny = null, string IconEdit = null, string Qq = null, string Website = null, string HomePhone = null, string Wechat = null, string UserKey = null, string CustomThumbnailSize = null, string FirstName = null, string HomeEmail = null, string MobilePhone = null, string BusinessPhone = null, string IconSmall = null)
        {
            this.HasDraft = HasDraft;
            this.Editor = Editor;
            this.Creator = Creator;
            this.ExplicitReadCount = ExplicitReadCount;
            this.FavoriteFlag = FavoriteFlag;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.RefmeFlag = RefmeFlag;
            this.Type = Type;
            this.Locale = Locale;
            this.Timeupdated = Timeupdated;
            this.ImportantFlag = ImportantFlag;
            this.LifecycleState = LifecycleState;
            this.Timecreated = Timecreated;
            this.DominantTime = DominantTime;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.HybridFlag = HybridFlag;
            this.LastName = LastName;
            this.Country = Country;
            this.SecondaryEmail = SecondaryEmail;
            this.Notes = Notes;
            this.JobTitle = JobTitle;
            this.IconMedium = IconMedium;
            this.Linkedin = Linkedin;
            this.PersonalEmail = PersonalEmail;
            this.Skype = Skype;
            this.Twitter = Twitter;
            this.Weibo = Weibo;
            this.Enable = Enable;
            this.UploadedIconFid = UploadedIconFid;
            this.Company = Company;
            this.Department = Department;
            this.IconTiny = IconTiny;
            this.IconEdit = IconEdit;
            this.Qq = Qq;
            this.Website = Website;
            this.HomePhone = HomePhone;
            this.Wechat = Wechat;
            this.UserKey = UserKey;
            this.CustomThumbnailSize = CustomThumbnailSize;
            this.FirstName = FirstName;
            this.HomeEmail = HomeEmail;
            this.MobilePhone = MobilePhone;
            this.BusinessPhone = BusinessPhone;
            this.IconSmall = IconSmall;
        }
        
        /// <summary>
        /// the login user has comment drafts in this object.
        /// </summary>
        /// <value>the login user has comment drafts in this object.</value>
        [DataMember(Name="hasDraft", EmitDefaultValue=false)]
        public bool? HasDraft { get; set; }
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Gets or Sets ExplicitReadCount
        /// </summary>
        [DataMember(Name="explicitReadCount", EmitDefaultValue=false)]
        public ObjectReadInfoRecord ExplicitReadCount { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public bool? FavoriteFlag { get; set; }
        /// <summary>
        /// Destinations where this object has been placed.
        /// </summary>
        /// <value>Destinations where this object has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// RefmeFlag.
        /// </summary>
        /// <value>RefmeFlag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Locale language.
        /// </summary>
        /// <value>Locale language.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public bool? ImportantFlag { get; set; }
        /// <summary>
        /// lifecycle state.
        /// </summary>
        /// <value>lifecycle state.</value>
        [DataMember(Name="lifecycle_state", EmitDefaultValue=false)]
        public string LifecycleState { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public bool? HideFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public bool? PinFlag { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Key of document record.
        /// </summary>
        /// <value>Key of document record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status.
        /// </summary>
        /// <value>Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Hybrid Flag.
        /// </summary>
        /// <value>Hybrid Flag.</value>
        [DataMember(Name="hybridFlag", EmitDefaultValue=false)]
        public bool? HybridFlag { get; set; }
        /// <summary>
        /// Contact card last name.
        /// </summary>
        /// <value>Contact card last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Contact card country
        /// </summary>
        /// <value>Contact card country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Contact card secondary email
        /// </summary>
        /// <value>Contact card secondary email</value>
        [DataMember(Name="secondaryEmail", EmitDefaultValue=false)]
        public string SecondaryEmail { get; set; }
        /// <summary>
        /// Contact card notes
        /// </summary>
        /// <value>Contact card notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Contact card job
        /// </summary>
        /// <value>Contact card job</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }
        /// <summary>
        /// Contact card medium icon
        /// </summary>
        /// <value>Contact card medium icon</value>
        [DataMember(Name="iconMedium", EmitDefaultValue=false)]
        public string IconMedium { get; set; }
        /// <summary>
        /// Contact card linkedin
        /// </summary>
        /// <value>Contact card linkedin</value>
        [DataMember(Name="linkedin", EmitDefaultValue=false)]
        public string Linkedin { get; set; }
        /// <summary>
        /// Contact card personal email
        /// </summary>
        /// <value>Contact card personal email</value>
        [DataMember(Name="personalEmail", EmitDefaultValue=false)]
        public string PersonalEmail { get; set; }
        /// <summary>
        /// Contact card first name.
        /// </summary>
        /// <value>Contact card first name.</value>
        [DataMember(Name="skype", EmitDefaultValue=false)]
        public string Skype { get; set; }
        /// <summary>
        /// Contact card twitter
        /// </summary>
        /// <value>Contact card twitter</value>
        [DataMember(Name="twitter", EmitDefaultValue=false)]
        public string Twitter { get; set; }
        /// <summary>
        /// Sina WEIBO
        /// </summary>
        /// <value>Sina WEIBO</value>
        [DataMember(Name="weibo", EmitDefaultValue=false)]
        public string Weibo { get; set; }
        /// <summary>
        /// Contact card delete flag
        /// </summary>
        /// <value>Contact card delete flag</value>
        [DataMember(Name="enable", EmitDefaultValue=false)]
        public string Enable { get; set; }
        /// <summary>
        /// Contact card icon id
        /// </summary>
        /// <value>Contact card icon id</value>
        [DataMember(Name="uploadedIconFid", EmitDefaultValue=false)]
        public string UploadedIconFid { get; set; }
        /// <summary>
        /// Contact card company
        /// </summary>
        /// <value>Contact card company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Contact card deparment
        /// </summary>
        /// <value>Contact card deparment</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public string Department { get; set; }
        /// <summary>
        /// Contact card tiny icon
        /// </summary>
        /// <value>Contact card tiny icon</value>
        [DataMember(Name="iconTiny", EmitDefaultValue=false)]
        public string IconTiny { get; set; }
        /// <summary>
        /// Contact card edit icon
        /// </summary>
        /// <value>Contact card edit icon</value>
        [DataMember(Name="iconEdit", EmitDefaultValue=false)]
        public string IconEdit { get; set; }
        /// <summary>
        /// qq
        /// </summary>
        /// <value>qq</value>
        [DataMember(Name="qq", EmitDefaultValue=false)]
        public string Qq { get; set; }
        /// <summary>
        /// Contact card website
        /// </summary>
        /// <value>Contact card website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }
        /// <summary>
        /// Contact card home phone
        /// </summary>
        /// <value>Contact card home phone</value>
        [DataMember(Name="homePhone", EmitDefaultValue=false)]
        public string HomePhone { get; set; }
        /// <summary>
        /// wechat
        /// </summary>
        /// <value>wechat</value>
        [DataMember(Name="wechat", EmitDefaultValue=false)]
        public string Wechat { get; set; }
        /// <summary>
        /// Contact card reference user key.
        /// </summary>
        /// <value>Contact card reference user key.</value>
        [DataMember(Name="userKey", EmitDefaultValue=false)]
        public string UserKey { get; set; }
        /// <summary>
        /// Contact card custom icon size
        /// </summary>
        /// <value>Contact card custom icon size</value>
        [DataMember(Name="customThumbnailSize", EmitDefaultValue=false)]
        public string CustomThumbnailSize { get; set; }
        /// <summary>
        /// Contact card first name.
        /// </summary>
        /// <value>Contact card first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Contact card home email
        /// </summary>
        /// <value>Contact card home email</value>
        [DataMember(Name="homeEmail", EmitDefaultValue=false)]
        public string HomeEmail { get; set; }
        /// <summary>
        /// Contact card mobile phone
        /// </summary>
        /// <value>Contact card mobile phone</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }
        /// <summary>
        /// Contact card business phone
        /// </summary>
        /// <value>Contact card business phone</value>
        [DataMember(Name="businessPhone", EmitDefaultValue=false)]
        public string BusinessPhone { get; set; }
        /// <summary>
        /// Contact card small icon
        /// </summary>
        /// <value>Contact card small icon</value>
        [DataMember(Name="iconSmall", EmitDefaultValue=false)]
        public string IconSmall { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactCardRecord {\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExplicitReadCount: ").Append(ExplicitReadCount).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HybridFlag: ").Append(HybridFlag).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  SecondaryEmail: ").Append(SecondaryEmail).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  IconMedium: ").Append(IconMedium).Append("\n");
            sb.Append("  Linkedin: ").Append(Linkedin).Append("\n");
            sb.Append("  PersonalEmail: ").Append(PersonalEmail).Append("\n");
            sb.Append("  Skype: ").Append(Skype).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Weibo: ").Append(Weibo).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  UploadedIconFid: ").Append(UploadedIconFid).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  IconTiny: ").Append(IconTiny).Append("\n");
            sb.Append("  IconEdit: ").Append(IconEdit).Append("\n");
            sb.Append("  Qq: ").Append(Qq).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Wechat: ").Append(Wechat).Append("\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("  CustomThumbnailSize: ").Append(CustomThumbnailSize).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  HomeEmail: ").Append(HomeEmail).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  BusinessPhone: ").Append(BusinessPhone).Append("\n");
            sb.Append("  IconSmall: ").Append(IconSmall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactCardRecord);
        }

        /// <summary>
        /// Returns true if ContactCardRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactCardRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactCardRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasDraft == other.HasDraft ||
                    this.HasDraft != null &&
                    this.HasDraft.Equals(other.HasDraft)
                ) && 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.ExplicitReadCount == other.ExplicitReadCount ||
                    this.ExplicitReadCount != null &&
                    this.ExplicitReadCount.Equals(other.ExplicitReadCount)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.LifecycleState == other.LifecycleState ||
                    this.LifecycleState != null &&
                    this.LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HybridFlag == other.HybridFlag ||
                    this.HybridFlag != null &&
                    this.HybridFlag.Equals(other.HybridFlag)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.SecondaryEmail == other.SecondaryEmail ||
                    this.SecondaryEmail != null &&
                    this.SecondaryEmail.Equals(other.SecondaryEmail)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.JobTitle == other.JobTitle ||
                    this.JobTitle != null &&
                    this.JobTitle.Equals(other.JobTitle)
                ) && 
                (
                    this.IconMedium == other.IconMedium ||
                    this.IconMedium != null &&
                    this.IconMedium.Equals(other.IconMedium)
                ) && 
                (
                    this.Linkedin == other.Linkedin ||
                    this.Linkedin != null &&
                    this.Linkedin.Equals(other.Linkedin)
                ) && 
                (
                    this.PersonalEmail == other.PersonalEmail ||
                    this.PersonalEmail != null &&
                    this.PersonalEmail.Equals(other.PersonalEmail)
                ) && 
                (
                    this.Skype == other.Skype ||
                    this.Skype != null &&
                    this.Skype.Equals(other.Skype)
                ) && 
                (
                    this.Twitter == other.Twitter ||
                    this.Twitter != null &&
                    this.Twitter.Equals(other.Twitter)
                ) && 
                (
                    this.Weibo == other.Weibo ||
                    this.Weibo != null &&
                    this.Weibo.Equals(other.Weibo)
                ) && 
                (
                    this.Enable == other.Enable ||
                    this.Enable != null &&
                    this.Enable.Equals(other.Enable)
                ) && 
                (
                    this.UploadedIconFid == other.UploadedIconFid ||
                    this.UploadedIconFid != null &&
                    this.UploadedIconFid.Equals(other.UploadedIconFid)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Department == other.Department ||
                    this.Department != null &&
                    this.Department.Equals(other.Department)
                ) && 
                (
                    this.IconTiny == other.IconTiny ||
                    this.IconTiny != null &&
                    this.IconTiny.Equals(other.IconTiny)
                ) && 
                (
                    this.IconEdit == other.IconEdit ||
                    this.IconEdit != null &&
                    this.IconEdit.Equals(other.IconEdit)
                ) && 
                (
                    this.Qq == other.Qq ||
                    this.Qq != null &&
                    this.Qq.Equals(other.Qq)
                ) && 
                (
                    this.Website == other.Website ||
                    this.Website != null &&
                    this.Website.Equals(other.Website)
                ) && 
                (
                    this.HomePhone == other.HomePhone ||
                    this.HomePhone != null &&
                    this.HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    this.Wechat == other.Wechat ||
                    this.Wechat != null &&
                    this.Wechat.Equals(other.Wechat)
                ) && 
                (
                    this.UserKey == other.UserKey ||
                    this.UserKey != null &&
                    this.UserKey.Equals(other.UserKey)
                ) && 
                (
                    this.CustomThumbnailSize == other.CustomThumbnailSize ||
                    this.CustomThumbnailSize != null &&
                    this.CustomThumbnailSize.Equals(other.CustomThumbnailSize)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.HomeEmail == other.HomeEmail ||
                    this.HomeEmail != null &&
                    this.HomeEmail.Equals(other.HomeEmail)
                ) && 
                (
                    this.MobilePhone == other.MobilePhone ||
                    this.MobilePhone != null &&
                    this.MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    this.BusinessPhone == other.BusinessPhone ||
                    this.BusinessPhone != null &&
                    this.BusinessPhone.Equals(other.BusinessPhone)
                ) && 
                (
                    this.IconSmall == other.IconSmall ||
                    this.IconSmall != null &&
                    this.IconSmall.Equals(other.IconSmall)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasDraft != null)
                    hash = hash * 59 + this.HasDraft.GetHashCode();
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.ExplicitReadCount != null)
                    hash = hash * 59 + this.ExplicitReadCount.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.LifecycleState != null)
                    hash = hash * 59 + this.LifecycleState.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HybridFlag != null)
                    hash = hash * 59 + this.HybridFlag.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.SecondaryEmail != null)
                    hash = hash * 59 + this.SecondaryEmail.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.JobTitle != null)
                    hash = hash * 59 + this.JobTitle.GetHashCode();
                if (this.IconMedium != null)
                    hash = hash * 59 + this.IconMedium.GetHashCode();
                if (this.Linkedin != null)
                    hash = hash * 59 + this.Linkedin.GetHashCode();
                if (this.PersonalEmail != null)
                    hash = hash * 59 + this.PersonalEmail.GetHashCode();
                if (this.Skype != null)
                    hash = hash * 59 + this.Skype.GetHashCode();
                if (this.Twitter != null)
                    hash = hash * 59 + this.Twitter.GetHashCode();
                if (this.Weibo != null)
                    hash = hash * 59 + this.Weibo.GetHashCode();
                if (this.Enable != null)
                    hash = hash * 59 + this.Enable.GetHashCode();
                if (this.UploadedIconFid != null)
                    hash = hash * 59 + this.UploadedIconFid.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Department != null)
                    hash = hash * 59 + this.Department.GetHashCode();
                if (this.IconTiny != null)
                    hash = hash * 59 + this.IconTiny.GetHashCode();
                if (this.IconEdit != null)
                    hash = hash * 59 + this.IconEdit.GetHashCode();
                if (this.Qq != null)
                    hash = hash * 59 + this.Qq.GetHashCode();
                if (this.Website != null)
                    hash = hash * 59 + this.Website.GetHashCode();
                if (this.HomePhone != null)
                    hash = hash * 59 + this.HomePhone.GetHashCode();
                if (this.Wechat != null)
                    hash = hash * 59 + this.Wechat.GetHashCode();
                if (this.UserKey != null)
                    hash = hash * 59 + this.UserKey.GetHashCode();
                if (this.CustomThumbnailSize != null)
                    hash = hash * 59 + this.CustomThumbnailSize.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.HomeEmail != null)
                    hash = hash * 59 + this.HomeEmail.GetHashCode();
                if (this.MobilePhone != null)
                    hash = hash * 59 + this.MobilePhone.GetHashCode();
                if (this.BusinessPhone != null)
                    hash = hash * 59 + this.BusinessPhone.GetHashCode();
                if (this.IconSmall != null)
                    hash = hash * 59 + this.IconSmall.GetHashCode();
                return hash;
            }
        }
    }

}
