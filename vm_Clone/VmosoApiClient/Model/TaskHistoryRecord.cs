/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// TaskHistoryRecord
    /// </summary>
    [DataContract]
    public partial class TaskHistoryRecord :  IEquatable<TaskHistoryRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskHistoryRecord" /> class.
        /// </summary>
        /// <param name="_New">.</param>
        /// <param name="CommentListId">.</param>
        /// <param name="Role">.</param>
        /// <param name="Added">.</param>
        /// <param name="Org">.</param>
        /// <param name="Actor">Actor.</param>
        /// <param name="Download">.</param>
        /// <param name="Removed">.</param>
        /// <param name="CommentKey">.</param>
        /// <param name="Action">.</param>
        /// <param name="CommentID">.</param>
        /// <param name="Comment">.</param>
        /// <param name="Time">.</param>
        public TaskHistoryRecord(string _New = null, string CommentListId = null, List<string> Role = null, Object Added = null, string Org = null, DisplayRecord Actor = null, Object Download = null, Object Removed = null, List<string> CommentKey = null, string Action = null, int? CommentID = null, string Comment = null, int? Time = null)
        {
            this._New = _New;
            this.CommentListId = CommentListId;
            this.Role = Role;
            this.Added = Added;
            this.Org = Org;
            this.Actor = Actor;
            this.Download = Download;
            this.Removed = Removed;
            this.CommentKey = CommentKey;
            this.Action = Action;
            this.CommentID = CommentID;
            this.Comment = Comment;
            this.Time = Time;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="new", EmitDefaultValue=false)]
        public string _New { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="commentListId", EmitDefaultValue=false)]
        public string CommentListId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public List<string> Role { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="added", EmitDefaultValue=false)]
        public Object Added { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }
        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public DisplayRecord Actor { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public Object Download { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="removed", EmitDefaultValue=false)]
        public Object Removed { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="commentKey", EmitDefaultValue=false)]
        public List<string> CommentKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="commentID", EmitDefaultValue=false)]
        public int? CommentID { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public int? Time { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskHistoryRecord {\n");
            sb.Append("  _New: ").Append(_New).Append("\n");
            sb.Append("  CommentListId: ").Append(CommentListId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Removed: ").Append(Removed).Append("\n");
            sb.Append("  CommentKey: ").Append(CommentKey).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CommentID: ").Append(CommentID).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskHistoryRecord);
        }

        /// <summary>
        /// Returns true if TaskHistoryRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskHistoryRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskHistoryRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._New == other._New ||
                    this._New != null &&
                    this._New.Equals(other._New)
                ) && 
                (
                    this.CommentListId == other.CommentListId ||
                    this.CommentListId != null &&
                    this.CommentListId.Equals(other.CommentListId)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.SequenceEqual(other.Role)
                ) && 
                (
                    this.Added == other.Added ||
                    this.Added != null &&
                    this.Added.Equals(other.Added)
                ) && 
                (
                    this.Org == other.Org ||
                    this.Org != null &&
                    this.Org.Equals(other.Org)
                ) && 
                (
                    this.Actor == other.Actor ||
                    this.Actor != null &&
                    this.Actor.Equals(other.Actor)
                ) && 
                (
                    this.Download == other.Download ||
                    this.Download != null &&
                    this.Download.Equals(other.Download)
                ) && 
                (
                    this.Removed == other.Removed ||
                    this.Removed != null &&
                    this.Removed.Equals(other.Removed)
                ) && 
                (
                    this.CommentKey == other.CommentKey ||
                    this.CommentKey != null &&
                    this.CommentKey.SequenceEqual(other.CommentKey)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.CommentID == other.CommentID ||
                    this.CommentID != null &&
                    this.CommentID.Equals(other.CommentID)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._New != null)
                    hash = hash * 59 + this._New.GetHashCode();
                if (this.CommentListId != null)
                    hash = hash * 59 + this.CommentListId.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.Added != null)
                    hash = hash * 59 + this.Added.GetHashCode();
                if (this.Org != null)
                    hash = hash * 59 + this.Org.GetHashCode();
                if (this.Actor != null)
                    hash = hash * 59 + this.Actor.GetHashCode();
                if (this.Download != null)
                    hash = hash * 59 + this.Download.GetHashCode();
                if (this.Removed != null)
                    hash = hash * 59 + this.Removed.GetHashCode();
                if (this.CommentKey != null)
                    hash = hash * 59 + this.CommentKey.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.CommentID != null)
                    hash = hash * 59 + this.CommentID.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                return hash;
            }
        }
    }

}
