/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// SessionClientInfoRecord
    /// </summary>
    [DataContract]
    public partial class SessionClientInfoRecord :  IEquatable<SessionClientInfoRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionClientInfoRecord" /> class.
        /// </summary>
        /// <param name="Ipaddr">IP address of client..</param>
        /// <param name="Login">Login timestamp..</param>
        /// <param name="Device">Device name..</param>
        /// <param name="Uagent">User agent, typically from HTTP User-Agent header..</param>
        public SessionClientInfoRecord(string Ipaddr = null, int? Login = null, string Device = null, string Uagent = null)
        {
            this.Ipaddr = Ipaddr;
            this.Login = Login;
            this.Device = Device;
            this.Uagent = Uagent;
        }
        
        /// <summary>
        /// IP address of client.
        /// </summary>
        /// <value>IP address of client.</value>
        [DataMember(Name="ipaddr", EmitDefaultValue=false)]
        public string Ipaddr { get; set; }
        /// <summary>
        /// Login timestamp.
        /// </summary>
        /// <value>Login timestamp.</value>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public int? Login { get; set; }
        /// <summary>
        /// Device name.
        /// </summary>
        /// <value>Device name.</value>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }
        /// <summary>
        /// User agent, typically from HTTP User-Agent header.
        /// </summary>
        /// <value>User agent, typically from HTTP User-Agent header.</value>
        [DataMember(Name="uagent", EmitDefaultValue=false)]
        public string Uagent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionClientInfoRecord {\n");
            sb.Append("  Ipaddr: ").Append(Ipaddr).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Uagent: ").Append(Uagent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SessionClientInfoRecord);
        }

        /// <summary>
        /// Returns true if SessionClientInfoRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionClientInfoRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionClientInfoRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Ipaddr == other.Ipaddr ||
                    this.Ipaddr != null &&
                    this.Ipaddr.Equals(other.Ipaddr)
                ) && 
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                ) && 
                (
                    this.Device == other.Device ||
                    this.Device != null &&
                    this.Device.Equals(other.Device)
                ) && 
                (
                    this.Uagent == other.Uagent ||
                    this.Uagent != null &&
                    this.Uagent.Equals(other.Uagent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Ipaddr != null)
                    hash = hash * 59 + this.Ipaddr.GetHashCode();
                if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                if (this.Device != null)
                    hash = hash * 59 + this.Device.GetHashCode();
                if (this.Uagent != null)
                    hash = hash * 59 + this.Uagent.GetHashCode();
                return hash;
            }
        }
    }

}
