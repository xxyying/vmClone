/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// MutualActivitiesCountRecord
    /// </summary>
    [DataContract]
    public partial class MutualActivitiesCountRecord :  IEquatable<MutualActivitiesCountRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualActivitiesCountRecord" /> class.
        /// </summary>
        /// <param name="All">Count of &#39;All&#39;.</param>
        /// <param name="Task">Count of &#39;Tasks&#39;.</param>
        /// <param name="Hotspot">Count of &#39;Spaces&#39;.</param>
        /// <param name="Chat">Count of &#39;Chats&#39;.</param>
        /// <param name="PostV2">Count of &#39;Posts&#39;.</param>
        public MutualActivitiesCountRecord(int? All = null, int? Task = null, int? Hotspot = null, int? Chat = null, int? PostV2 = null)
        {
            this.All = All;
            this.Task = Task;
            this.Hotspot = Hotspot;
            this.Chat = Chat;
            this.PostV2 = PostV2;
        }
        
        /// <summary>
        /// Count of &#39;All&#39;
        /// </summary>
        /// <value>Count of &#39;All&#39;</value>
        [DataMember(Name="all", EmitDefaultValue=false)]
        public int? All { get; set; }
        /// <summary>
        /// Count of &#39;Tasks&#39;
        /// </summary>
        /// <value>Count of &#39;Tasks&#39;</value>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public int? Task { get; set; }
        /// <summary>
        /// Count of &#39;Spaces&#39;
        /// </summary>
        /// <value>Count of &#39;Spaces&#39;</value>
        [DataMember(Name="hotspot", EmitDefaultValue=false)]
        public int? Hotspot { get; set; }
        /// <summary>
        /// Count of &#39;Chats&#39;
        /// </summary>
        /// <value>Count of &#39;Chats&#39;</value>
        [DataMember(Name="chat", EmitDefaultValue=false)]
        public int? Chat { get; set; }
        /// <summary>
        /// Count of &#39;Posts&#39;
        /// </summary>
        /// <value>Count of &#39;Posts&#39;</value>
        [DataMember(Name="postV2", EmitDefaultValue=false)]
        public int? PostV2 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MutualActivitiesCountRecord {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Hotspot: ").Append(Hotspot).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  PostV2: ").Append(PostV2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MutualActivitiesCountRecord);
        }

        /// <summary>
        /// Returns true if MutualActivitiesCountRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of MutualActivitiesCountRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutualActivitiesCountRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.All == other.All ||
                    this.All != null &&
                    this.All.Equals(other.All)
                ) && 
                (
                    this.Task == other.Task ||
                    this.Task != null &&
                    this.Task.Equals(other.Task)
                ) && 
                (
                    this.Hotspot == other.Hotspot ||
                    this.Hotspot != null &&
                    this.Hotspot.Equals(other.Hotspot)
                ) && 
                (
                    this.Chat == other.Chat ||
                    this.Chat != null &&
                    this.Chat.Equals(other.Chat)
                ) && 
                (
                    this.PostV2 == other.PostV2 ||
                    this.PostV2 != null &&
                    this.PostV2.Equals(other.PostV2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.All != null)
                    hash = hash * 59 + this.All.GetHashCode();
                if (this.Task != null)
                    hash = hash * 59 + this.Task.GetHashCode();
                if (this.Hotspot != null)
                    hash = hash * 59 + this.Hotspot.GetHashCode();
                if (this.Chat != null)
                    hash = hash * 59 + this.Chat.GetHashCode();
                if (this.PostV2 != null)
                    hash = hash * 59 + this.PostV2.GetHashCode();
                return hash;
            }
        }
    }

}
