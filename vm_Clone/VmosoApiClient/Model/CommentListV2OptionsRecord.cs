/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// CommentListV2OptionsRecord
    /// </summary>
    [DataContract]
    public partial class CommentListV2OptionsRecord : ListOptionsRecord,  IEquatable<CommentListV2OptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentListV2OptionsRecord" /> class.
        /// </summary>
        /// <param name="FolderKey">Type of ListOptions record..</param>
        /// <param name="Format">Format.</param>
        /// <param name="Type">Type of ListOptions record..</param>
        /// <param name="SearchString">retrieve items by the string..</param>
        /// <param name="SearchFields">define which fields to search.</param>
        /// <param name="ImportantFilter">important filter: default is important.</param>
        /// <param name="CurrentCommentFilter">current comment filter: the reference comment id.</param>
        /// <param name="CreatorFilter">Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - items not created by this user.</param>
        /// <param name="Num">Comment number to jump to for first and last page retrieval. If the comment is present on the logical list (e.g. with a specified time range), the it will be the first and last item on the page retrieved, for first and last page retrieval respectively. This is ignored for other pages. @deprecated Set jump target in PaginationRecord instead..</param>
        /// <param name="Filters">Array of FilterOptions..</param>
        /// <param name="ReadFilter">Read filter  Current: read  -items have read unread  -items didn&#39;t have read.</param>
        /// <param name="RuleKey">Rule key of the rule that needs to be executed to retrieve the objects. Current rule key can be one of the named rules (comment) or the user defined rule key..</param>
        /// <param name="CommentFilter">Comment filter?.</param>
        /// <param name="NetworkKey">.</param>
        /// <param name="HighlightTag">tag name used for highlight.</param>
        /// <param name="StatusFilter">Status filter... currently: online deleted.</param>
        /// <param name="SortFilter">sort filter: \&quot;date\&quot; - retrieving the comments by the creationTime; \&quot;updateTime\&quot; -retrieving the comments by the updateTime; \&quot;sequence\&quot; -retrieving the comments by the pid and cid..</param>
        /// <param name="CommentType">Comment Type?.</param>
        /// <param name="RefUserFilter">refUser filter: default is the login user key..</param>
        /// <param name="CreatorFilters">creator keys.</param>
        /// <param name="ForAutocomplete">boolean to indicate if it is for auto-complete.</param>
        /// <param name="RuleKeys">rule keys.</param>
        /// <param name="Page">point out the last sub comment.</param>
        /// <param name="SortDir">Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending.</param>
        /// <param name="UpdateTimeFilter">UpdateTimeFilter.</param>
        /// <param name="SearchField">define which field to search.</param>
        /// <param name="SearchStrings">retrieve comments by the array of strings..</param>
        public CommentListV2OptionsRecord(string FolderKey = null, FormatRecord Format = null, string Type = null, string SearchString = null, List<string> SearchFields = null, string ImportantFilter = null, int? CurrentCommentFilter = null, string CreatorFilter = null, int? Num = null, List<string> Filters = null, string ReadFilter = null, string RuleKey = null, string CommentFilter = null, string NetworkKey = null, string HighlightTag = null, string StatusFilter = null, string SortFilter = null, string CommentType = null, string RefUserFilter = null, List<string> CreatorFilters = null, bool? ForAutocomplete = null, List<string> RuleKeys = null, string Page = null, string SortDir = null, TimeRangeRecord UpdateTimeFilter = null, string SearchField = null, List<string> SearchStrings = null)
        {
            this.FolderKey = FolderKey;
            this.Format = Format;
            this.Type = Type;
            this.SearchString = SearchString;
            this.SearchFields = SearchFields;
            this.ImportantFilter = ImportantFilter;
            this.CurrentCommentFilter = CurrentCommentFilter;
            this.CreatorFilter = CreatorFilter;
            this.Num = Num;
            this.Filters = Filters;
            this.ReadFilter = ReadFilter;
            this.RuleKey = RuleKey;
            this.CommentFilter = CommentFilter;
            this.NetworkKey = NetworkKey;
            this.HighlightTag = HighlightTag;
            this.StatusFilter = StatusFilter;
            this.SortFilter = SortFilter;
            this.CommentType = CommentType;
            this.RefUserFilter = RefUserFilter;
            this.CreatorFilters = CreatorFilters;
            this.ForAutocomplete = ForAutocomplete;
            this.RuleKeys = RuleKeys;
            this.Page = Page;
            this.SortDir = SortDir;
            this.UpdateTimeFilter = UpdateTimeFilter;
            this.SearchField = SearchField;
            this.SearchStrings = SearchStrings;
        }
        
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="folderKey", EmitDefaultValue=false)]
        public string FolderKey { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatRecord Format { get; set; }
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// retrieve items by the string.
        /// </summary>
        /// <value>retrieve items by the string.</value>
        [DataMember(Name="search_string", EmitDefaultValue=false)]
        public string SearchString { get; set; }
        /// <summary>
        /// define which fields to search
        /// </summary>
        /// <value>define which fields to search</value>
        [DataMember(Name="search_fields", EmitDefaultValue=false)]
        public List<string> SearchFields { get; set; }
        /// <summary>
        /// important filter: default is important
        /// </summary>
        /// <value>important filter: default is important</value>
        [DataMember(Name="important_filter", EmitDefaultValue=false)]
        public string ImportantFilter { get; set; }
        /// <summary>
        /// current comment filter: the reference comment id
        /// </summary>
        /// <value>current comment filter: the reference comment id</value>
        [DataMember(Name="current_comment_filter", EmitDefaultValue=false)]
        public int? CurrentCommentFilter { get; set; }
        /// <summary>
        /// Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - items not created by this user
        /// </summary>
        /// <value>Creator filter... currently: all     - default combination of my + shared my      - only items created by this user shared  - items not created by this user</value>
        [DataMember(Name="creator_filter", EmitDefaultValue=false)]
        public string CreatorFilter { get; set; }
        /// <summary>
        /// Comment number to jump to for first and last page retrieval. If the comment is present on the logical list (e.g. with a specified time range), the it will be the first and last item on the page retrieved, for first and last page retrieval respectively. This is ignored for other pages. @deprecated Set jump target in PaginationRecord instead.
        /// </summary>
        /// <value>Comment number to jump to for first and last page retrieval. If the comment is present on the logical list (e.g. with a specified time range), the it will be the first and last item on the page retrieved, for first and last page retrieval respectively. This is ignored for other pages. @deprecated Set jump target in PaginationRecord instead.</value>
        [DataMember(Name="num", EmitDefaultValue=false)]
        public int? Num { get; set; }
        /// <summary>
        /// Array of FilterOptions.
        /// </summary>
        /// <value>Array of FilterOptions.</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<string> Filters { get; set; }
        /// <summary>
        /// Read filter  Current: read  -items have read unread  -items didn&#39;t have read
        /// </summary>
        /// <value>Read filter  Current: read  -items have read unread  -items didn&#39;t have read</value>
        [DataMember(Name="read_filter", EmitDefaultValue=false)]
        public string ReadFilter { get; set; }
        /// <summary>
        /// Rule key of the rule that needs to be executed to retrieve the objects. Current rule key can be one of the named rules (comment) or the user defined rule key.
        /// </summary>
        /// <value>Rule key of the rule that needs to be executed to retrieve the objects. Current rule key can be one of the named rules (comment) or the user defined rule key.</value>
        [DataMember(Name="ruleKey", EmitDefaultValue=false)]
        public string RuleKey { get; set; }
        /// <summary>
        /// Comment filter?
        /// </summary>
        /// <value>Comment filter?</value>
        [DataMember(Name="commentFilter", EmitDefaultValue=false)]
        public string CommentFilter { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="networkKey", EmitDefaultValue=false)]
        public string NetworkKey { get; set; }
        /// <summary>
        /// tag name used for highlight
        /// </summary>
        /// <value>tag name used for highlight</value>
        [DataMember(Name="highlightTag", EmitDefaultValue=false)]
        public string HighlightTag { get; set; }
        /// <summary>
        /// Status filter... currently: online deleted
        /// </summary>
        /// <value>Status filter... currently: online deleted</value>
        [DataMember(Name="status_filter", EmitDefaultValue=false)]
        public string StatusFilter { get; set; }
        /// <summary>
        /// sort filter: \&quot;date\&quot; - retrieving the comments by the creationTime; \&quot;updateTime\&quot; -retrieving the comments by the updateTime; \&quot;sequence\&quot; -retrieving the comments by the pid and cid.
        /// </summary>
        /// <value>sort filter: \&quot;date\&quot; - retrieving the comments by the creationTime; \&quot;updateTime\&quot; -retrieving the comments by the updateTime; \&quot;sequence\&quot; -retrieving the comments by the pid and cid.</value>
        [DataMember(Name="sort_filter", EmitDefaultValue=false)]
        public string SortFilter { get; set; }
        /// <summary>
        /// Comment Type?
        /// </summary>
        /// <value>Comment Type?</value>
        [DataMember(Name="commentType", EmitDefaultValue=false)]
        public string CommentType { get; set; }
        /// <summary>
        /// refUser filter: default is the login user key.
        /// </summary>
        /// <value>refUser filter: default is the login user key.</value>
        [DataMember(Name="ref_user_filter", EmitDefaultValue=false)]
        public string RefUserFilter { get; set; }
        /// <summary>
        /// creator keys
        /// </summary>
        /// <value>creator keys</value>
        [DataMember(Name="creator_filters", EmitDefaultValue=false)]
        public List<string> CreatorFilters { get; set; }
        /// <summary>
        /// boolean to indicate if it is for auto-complete
        /// </summary>
        /// <value>boolean to indicate if it is for auto-complete</value>
        [DataMember(Name="forAutocomplete", EmitDefaultValue=false)]
        public bool? ForAutocomplete { get; set; }
        /// <summary>
        /// rule keys
        /// </summary>
        /// <value>rule keys</value>
        [DataMember(Name="rule_key", EmitDefaultValue=false)]
        public List<string> RuleKeys { get; set; }
        /// <summary>
        /// point out the last sub comment
        /// </summary>
        /// <value>point out the last sub comment</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public string Page { get; set; }
        /// <summary>
        /// Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending
        /// </summary>
        /// <value>Sort direction &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending</value>
        [DataMember(Name="sort_dir", EmitDefaultValue=false)]
        public string SortDir { get; set; }
        /// <summary>
        /// Gets or Sets UpdateTimeFilter
        /// </summary>
        [DataMember(Name="update_time_filter", EmitDefaultValue=false)]
        public TimeRangeRecord UpdateTimeFilter { get; set; }
        /// <summary>
        /// define which field to search
        /// </summary>
        /// <value>define which field to search</value>
        [DataMember(Name="search_field", EmitDefaultValue=false)]
        public string SearchField { get; set; }
        /// <summary>
        /// retrieve comments by the array of strings.
        /// </summary>
        /// <value>retrieve comments by the array of strings.</value>
        [DataMember(Name="search_strings", EmitDefaultValue=false)]
        public List<string> SearchStrings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentListV2OptionsRecord {\n");
            sb.Append("  FolderKey: ").Append(FolderKey).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SearchString: ").Append(SearchString).Append("\n");
            sb.Append("  SearchFields: ").Append(SearchFields).Append("\n");
            sb.Append("  ImportantFilter: ").Append(ImportantFilter).Append("\n");
            sb.Append("  CurrentCommentFilter: ").Append(CurrentCommentFilter).Append("\n");
            sb.Append("  CreatorFilter: ").Append(CreatorFilter).Append("\n");
            sb.Append("  Num: ").Append(Num).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  ReadFilter: ").Append(ReadFilter).Append("\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("  CommentFilter: ").Append(CommentFilter).Append("\n");
            sb.Append("  NetworkKey: ").Append(NetworkKey).Append("\n");
            sb.Append("  HighlightTag: ").Append(HighlightTag).Append("\n");
            sb.Append("  StatusFilter: ").Append(StatusFilter).Append("\n");
            sb.Append("  SortFilter: ").Append(SortFilter).Append("\n");
            sb.Append("  CommentType: ").Append(CommentType).Append("\n");
            sb.Append("  RefUserFilter: ").Append(RefUserFilter).Append("\n");
            sb.Append("  CreatorFilters: ").Append(CreatorFilters).Append("\n");
            sb.Append("  ForAutocomplete: ").Append(ForAutocomplete).Append("\n");
            sb.Append("  RuleKeys: ").Append(RuleKeys).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  SortDir: ").Append(SortDir).Append("\n");
            sb.Append("  UpdateTimeFilter: ").Append(UpdateTimeFilter).Append("\n");
            sb.Append("  SearchField: ").Append(SearchField).Append("\n");
            sb.Append("  SearchStrings: ").Append(SearchStrings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommentListV2OptionsRecord);
        }

        /// <summary>
        /// Returns true if CommentListV2OptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of CommentListV2OptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentListV2OptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FolderKey == other.FolderKey ||
                    this.FolderKey != null &&
                    this.FolderKey.Equals(other.FolderKey)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SearchString == other.SearchString ||
                    this.SearchString != null &&
                    this.SearchString.Equals(other.SearchString)
                ) && 
                (
                    this.SearchFields == other.SearchFields ||
                    this.SearchFields != null &&
                    this.SearchFields.SequenceEqual(other.SearchFields)
                ) && 
                (
                    this.ImportantFilter == other.ImportantFilter ||
                    this.ImportantFilter != null &&
                    this.ImportantFilter.Equals(other.ImportantFilter)
                ) && 
                (
                    this.CurrentCommentFilter == other.CurrentCommentFilter ||
                    this.CurrentCommentFilter != null &&
                    this.CurrentCommentFilter.Equals(other.CurrentCommentFilter)
                ) && 
                (
                    this.CreatorFilter == other.CreatorFilter ||
                    this.CreatorFilter != null &&
                    this.CreatorFilter.Equals(other.CreatorFilter)
                ) && 
                (
                    this.Num == other.Num ||
                    this.Num != null &&
                    this.Num.Equals(other.Num)
                ) && 
                (
                    this.Filters == other.Filters ||
                    this.Filters != null &&
                    this.Filters.SequenceEqual(other.Filters)
                ) && 
                (
                    this.ReadFilter == other.ReadFilter ||
                    this.ReadFilter != null &&
                    this.ReadFilter.Equals(other.ReadFilter)
                ) && 
                (
                    this.RuleKey == other.RuleKey ||
                    this.RuleKey != null &&
                    this.RuleKey.Equals(other.RuleKey)
                ) && 
                (
                    this.CommentFilter == other.CommentFilter ||
                    this.CommentFilter != null &&
                    this.CommentFilter.Equals(other.CommentFilter)
                ) && 
                (
                    this.NetworkKey == other.NetworkKey ||
                    this.NetworkKey != null &&
                    this.NetworkKey.Equals(other.NetworkKey)
                ) && 
                (
                    this.HighlightTag == other.HighlightTag ||
                    this.HighlightTag != null &&
                    this.HighlightTag.Equals(other.HighlightTag)
                ) && 
                (
                    this.StatusFilter == other.StatusFilter ||
                    this.StatusFilter != null &&
                    this.StatusFilter.Equals(other.StatusFilter)
                ) && 
                (
                    this.SortFilter == other.SortFilter ||
                    this.SortFilter != null &&
                    this.SortFilter.Equals(other.SortFilter)
                ) && 
                (
                    this.CommentType == other.CommentType ||
                    this.CommentType != null &&
                    this.CommentType.Equals(other.CommentType)
                ) && 
                (
                    this.RefUserFilter == other.RefUserFilter ||
                    this.RefUserFilter != null &&
                    this.RefUserFilter.Equals(other.RefUserFilter)
                ) && 
                (
                    this.CreatorFilters == other.CreatorFilters ||
                    this.CreatorFilters != null &&
                    this.CreatorFilters.SequenceEqual(other.CreatorFilters)
                ) && 
                (
                    this.ForAutocomplete == other.ForAutocomplete ||
                    this.ForAutocomplete != null &&
                    this.ForAutocomplete.Equals(other.ForAutocomplete)
                ) && 
                (
                    this.RuleKey == other.RuleKey ||
                    this.RuleKey != null &&
                    this.RuleKey.SequenceEqual(other.RuleKey)
                ) && 
                (
                    this.Page == other.Page ||
                    this.Page != null &&
                    this.Page.Equals(other.Page)
                ) && 
                (
                    this.SortDir == other.SortDir ||
                    this.SortDir != null &&
                    this.SortDir.Equals(other.SortDir)
                ) && 
                (
                    this.UpdateTimeFilter == other.UpdateTimeFilter ||
                    this.UpdateTimeFilter != null &&
                    this.UpdateTimeFilter.Equals(other.UpdateTimeFilter)
                ) && 
                (
                    this.SearchField == other.SearchField ||
                    this.SearchField != null &&
                    this.SearchField.Equals(other.SearchField)
                ) && 
                (
                    this.SearchStrings == other.SearchStrings ||
                    this.SearchStrings != null &&
                    this.SearchStrings.SequenceEqual(other.SearchStrings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FolderKey != null)
                    hash = hash * 59 + this.FolderKey.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SearchString != null)
                    hash = hash * 59 + this.SearchString.GetHashCode();
                if (this.SearchFields != null)
                    hash = hash * 59 + this.SearchFields.GetHashCode();
                if (this.ImportantFilter != null)
                    hash = hash * 59 + this.ImportantFilter.GetHashCode();
                if (this.CurrentCommentFilter != null)
                    hash = hash * 59 + this.CurrentCommentFilter.GetHashCode();
                if (this.CreatorFilter != null)
                    hash = hash * 59 + this.CreatorFilter.GetHashCode();
                if (this.Num != null)
                    hash = hash * 59 + this.Num.GetHashCode();
                if (this.Filters != null)
                    hash = hash * 59 + this.Filters.GetHashCode();
                if (this.ReadFilter != null)
                    hash = hash * 59 + this.ReadFilter.GetHashCode();
                if (this.RuleKey != null)
                    hash = hash * 59 + this.RuleKey.GetHashCode();
                if (this.CommentFilter != null)
                    hash = hash * 59 + this.CommentFilter.GetHashCode();
                if (this.NetworkKey != null)
                    hash = hash * 59 + this.NetworkKey.GetHashCode();
                if (this.HighlightTag != null)
                    hash = hash * 59 + this.HighlightTag.GetHashCode();
                if (this.StatusFilter != null)
                    hash = hash * 59 + this.StatusFilter.GetHashCode();
                if (this.SortFilter != null)
                    hash = hash * 59 + this.SortFilter.GetHashCode();
                if (this.CommentType != null)
                    hash = hash * 59 + this.CommentType.GetHashCode();
                if (this.RefUserFilter != null)
                    hash = hash * 59 + this.RefUserFilter.GetHashCode();
                if (this.CreatorFilters != null)
                    hash = hash * 59 + this.CreatorFilters.GetHashCode();
                if (this.ForAutocomplete != null)
                    hash = hash * 59 + this.ForAutocomplete.GetHashCode();
                if (this.RuleKey != null)
                    hash = hash * 59 + this.RuleKey.GetHashCode();
                if (this.Page != null)
                    hash = hash * 59 + this.Page.GetHashCode();
                if (this.SortDir != null)
                    hash = hash * 59 + this.SortDir.GetHashCode();
                if (this.UpdateTimeFilter != null)
                    hash = hash * 59 + this.UpdateTimeFilter.GetHashCode();
                if (this.SearchField != null)
                    hash = hash * 59 + this.SearchField.GetHashCode();
                if (this.SearchStrings != null)
                    hash = hash * 59 + this.SearchStrings.GetHashCode();
                return hash;
            }
        }
    }

}
