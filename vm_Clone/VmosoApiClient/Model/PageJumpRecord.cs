/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// PageJumpRecord
    /// </summary>
    [DataContract]
    public partial class PageJumpRecord :  IEquatable<PageJumpRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageJumpRecord" /> class.
        /// </summary>
        /// <param name="Str">String based &#39;jump&#39; target..</param>
        /// <param name="Num">Integer based &#39;jump&#39; target..</param>
        /// <param name="Id">ID based &#39;jump&#39; target..</param>
        /// <param name="Type">Jump target type. This is necessary only if there is ambiguity, e.g. {@link when} may mean update time or creation time..</param>
        /// <param name="When">Timestamp based &#39;jump&#39; target..</param>
        /// <param name="Key">Key based &#39;jump&#39; target..</param>
        public PageJumpRecord(string Str = null, int? Num = null, int? Id = null, string Type = null, int? When = null, string Key = null)
        {
            this.Str = Str;
            this.Num = Num;
            this.Id = Id;
            this.Type = Type;
            this.When = When;
            this.Key = Key;
        }
        
        /// <summary>
        /// String based &#39;jump&#39; target.
        /// </summary>
        /// <value>String based &#39;jump&#39; target.</value>
        [DataMember(Name="str", EmitDefaultValue=false)]
        public string Str { get; set; }
        /// <summary>
        /// Integer based &#39;jump&#39; target.
        /// </summary>
        /// <value>Integer based &#39;jump&#39; target.</value>
        [DataMember(Name="num", EmitDefaultValue=false)]
        public int? Num { get; set; }
        /// <summary>
        /// ID based &#39;jump&#39; target.
        /// </summary>
        /// <value>ID based &#39;jump&#39; target.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Jump target type. This is necessary only if there is ambiguity, e.g. {@link when} may mean update time or creation time.
        /// </summary>
        /// <value>Jump target type. This is necessary only if there is ambiguity, e.g. {@link when} may mean update time or creation time.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Timestamp based &#39;jump&#39; target.
        /// </summary>
        /// <value>Timestamp based &#39;jump&#39; target.</value>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public int? When { get; set; }
        /// <summary>
        /// Key based &#39;jump&#39; target.
        /// </summary>
        /// <value>Key based &#39;jump&#39; target.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageJumpRecord {\n");
            sb.Append("  Str: ").Append(Str).Append("\n");
            sb.Append("  Num: ").Append(Num).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PageJumpRecord);
        }

        /// <summary>
        /// Returns true if PageJumpRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of PageJumpRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageJumpRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Str == other.Str ||
                    this.Str != null &&
                    this.Str.Equals(other.Str)
                ) && 
                (
                    this.Num == other.Num ||
                    this.Num != null &&
                    this.Num.Equals(other.Num)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.When == other.When ||
                    this.When != null &&
                    this.When.Equals(other.When)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Str != null)
                    hash = hash * 59 + this.Str.GetHashCode();
                if (this.Num != null)
                    hash = hash * 59 + this.Num.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.When != null)
                    hash = hash * 59 + this.When.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                return hash;
            }
        }
    }

}
