/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetSparcActionsResult :  IEquatable<GetSparcActionsResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSparcActionsResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSparcActionsResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSparcActionsResult" /> class.
        /// </summary>
        /// <param name="Pager">Pager (required).</param>
        /// <param name="Ppager">Ppager (required).</param>
        /// <param name="Npager">Npager (required).</param>
        /// <param name="Hdr">Hdr (required).</param>
        /// <param name="Actions">.</param>
        /// <param name="Pactions">.</param>
        /// <param name="Nactions">.</param>
        public GetSparcActionsResult(ListPageRecord Pager = null, ListPageRecord Ppager = null, ListPageRecord Npager = null, ResponseHeaderRecord Hdr = null, List<SparcActionRecord> Actions = null, List<SparcActionRecord> Pactions = null, List<SparcActionRecord> Nactions = null)
        {
            // to ensure "Pager" is required (not null)
            if (Pager == null)
            {
                throw new InvalidDataException("Pager is a required property for GetSparcActionsResult and cannot be null");
            }
            else
            {
                this.Pager = Pager;
            }
            // to ensure "Ppager" is required (not null)
            if (Ppager == null)
            {
                throw new InvalidDataException("Ppager is a required property for GetSparcActionsResult and cannot be null");
            }
            else
            {
                this.Ppager = Ppager;
            }
            // to ensure "Npager" is required (not null)
            if (Npager == null)
            {
                throw new InvalidDataException("Npager is a required property for GetSparcActionsResult and cannot be null");
            }
            else
            {
                this.Npager = Npager;
            }
            // to ensure "Hdr" is required (not null)
            if (Hdr == null)
            {
                throw new InvalidDataException("Hdr is a required property for GetSparcActionsResult and cannot be null");
            }
            else
            {
                this.Hdr = Hdr;
            }
            this.Actions = Actions;
            this.Pactions = Pactions;
            this.Nactions = Nactions;
        }
        
        /// <summary>
        /// Gets or Sets Pager
        /// </summary>
        [DataMember(Name="pager", EmitDefaultValue=false)]
        public ListPageRecord Pager { get; set; }
        /// <summary>
        /// Gets or Sets Ppager
        /// </summary>
        [DataMember(Name="ppager", EmitDefaultValue=false)]
        public ListPageRecord Ppager { get; set; }
        /// <summary>
        /// Gets or Sets Npager
        /// </summary>
        [DataMember(Name="npager", EmitDefaultValue=false)]
        public ListPageRecord Npager { get; set; }
        /// <summary>
        /// Gets or Sets Hdr
        /// </summary>
        [DataMember(Name="_hdr", EmitDefaultValue=false)]
        public ResponseHeaderRecord Hdr { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<SparcActionRecord> Actions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pactions", EmitDefaultValue=false)]
        public List<SparcActionRecord> Pactions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="nactions", EmitDefaultValue=false)]
        public List<SparcActionRecord> Nactions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSparcActionsResult {\n");
            sb.Append("  Pager: ").Append(Pager).Append("\n");
            sb.Append("  Ppager: ").Append(Ppager).Append("\n");
            sb.Append("  Npager: ").Append(Npager).Append("\n");
            sb.Append("  Hdr: ").Append(Hdr).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Pactions: ").Append(Pactions).Append("\n");
            sb.Append("  Nactions: ").Append(Nactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetSparcActionsResult);
        }

        /// <summary>
        /// Returns true if GetSparcActionsResult instances are equal
        /// </summary>
        /// <param name="other">Instance of GetSparcActionsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSparcActionsResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pager == other.Pager ||
                    this.Pager != null &&
                    this.Pager.Equals(other.Pager)
                ) && 
                (
                    this.Ppager == other.Ppager ||
                    this.Ppager != null &&
                    this.Ppager.Equals(other.Ppager)
                ) && 
                (
                    this.Npager == other.Npager ||
                    this.Npager != null &&
                    this.Npager.Equals(other.Npager)
                ) && 
                (
                    this.Hdr == other.Hdr ||
                    this.Hdr != null &&
                    this.Hdr.Equals(other.Hdr)
                ) && 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.Pactions == other.Pactions ||
                    this.Pactions != null &&
                    this.Pactions.SequenceEqual(other.Pactions)
                ) && 
                (
                    this.Nactions == other.Nactions ||
                    this.Nactions != null &&
                    this.Nactions.SequenceEqual(other.Nactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pager != null)
                    hash = hash * 59 + this.Pager.GetHashCode();
                if (this.Ppager != null)
                    hash = hash * 59 + this.Ppager.GetHashCode();
                if (this.Npager != null)
                    hash = hash * 59 + this.Npager.GetHashCode();
                if (this.Hdr != null)
                    hash = hash * 59 + this.Hdr.GetHashCode();
                if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                if (this.Pactions != null)
                    hash = hash * 59 + this.Pactions.GetHashCode();
                if (this.Nactions != null)
                    hash = hash * 59 + this.Nactions.GetHashCode();
                return hash;
            }
        }
    }

}
