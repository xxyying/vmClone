/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// TaskDraftRecord
    /// </summary>
    [DataContract]
    public partial class TaskDraftRecord : TaskRecord,  IEquatable<TaskDraftRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDraftRecord" /> class.
        /// </summary>
        /// <param name="HasDraft">the login user has comment drafts in this object..</param>
        /// <param name="Editor">Editor.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="ExplicitReadCount">ExplicitReadCount.</param>
        /// <param name="FavoriteFlag">ImportantFlag..</param>
        /// <param name="Destinations">Destinations where this object has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="RefmeFlag">RefmeFlag..</param>
        /// <param name="Type">Type of document record..</param>
        /// <param name="Locale">Locale language..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="ImportantFlag">ImportantFlag..</param>
        /// <param name="LifecycleState">lifecycle state..</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Type of document record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Key">Key of document record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status..</param>
        /// <param name="HybridFlag">Hybrid Flag..</param>
        /// <param name="Folders">.</param>
        /// <param name="AttachmentKeys">AttachmentKeys.</param>
        /// <param name="DueDate">due date of task..</param>
        /// <param name="LastUpdater">.</param>
        /// <param name="ServersAddress">.</param>
        /// <param name="ReShareFlag">whether allow member re-share task..</param>
        /// <param name="AdditionalParticipants">allow add additional participants.</param>
        /// <param name="Assignees">.</param>
        /// <param name="Source">source task.key.</param>
        /// <param name="Acl">Acl.</param>
        /// <param name="StepRecords">.</param>
        /// <param name="Observer">.</param>
        /// <param name="RejectFlag">task rejected Flag.</param>
        /// <param name="TplName">template name..</param>
        /// <param name="UserEmails">UserEmails.</param>
        /// <param name="ParticipantCount">participants count for task..</param>
        /// <param name="InvitationFlag">type of invitation task..</param>
        /// <param name="ExecuteMode">task execute mode..</param>
        /// <param name="Ccers">.</param>
        /// <param name="AllParticipants">.</param>
        /// <param name="ActorStatus">.</param>
        /// <param name="DraftKey">Key of draft..</param>
        /// <param name="Whitelist">.</param>
        /// <param name="DueTime">due time of task..</param>
        /// <param name="RelatedTasks">RelatedTasks.</param>
        /// <param name="SpaceACL">SpaceACL.</param>
        /// <param name="Sccers">.</param>
        /// <param name="Users">Users.</param>
        /// <param name="DueDays">.</param>
        /// <param name="Sequence">sequence of step..</param>
        /// <param name="Commentcount">Comment count for task..</param>
        /// <param name="CcerStatus">.</param>
        /// <param name="DueDateTime">due date and time of task..</param>
        /// <param name="EditCommentFlag">allow edit task comment.</param>
        /// <param name="Name">Name of Task..</param>
        /// <param name="CanAddByCc">can add participants by cc.</param>
        /// <param name="Bccers">.</param>
        /// <param name="TaskMode">mode of task..</param>
        /// <param name="CurrectStepSeq">.</param>
        /// <param name="Flag">task flag.</param>
        /// <param name="AcceptFlag">task required accept.</param>
        /// <param name="Attachments">.</param>
        /// <param name="AccessList">AccessList.</param>
        /// <param name="Description">Description of Task..</param>
        /// <param name="MsgId">email message-ID.</param>
        /// <param name="CommentText">comment #1 of Chat..</param>
        /// <param name="TaskType">task type.</param>
        /// <param name="CanAddByTo">can add participants by to.</param>
        /// <param name="EndLife">end of lifetime for task. Treat this as a readonly variable..</param>
        /// <param name="AllUserStatus">.</param>
        /// <param name="ReassignUserStr">.</param>
        /// <param name="Blacklist">.</param>
        /// <param name="CommentlistKey">Key of commentlist.</param>
        /// <param name="RestrictedFlag">task restricted Flag.</param>
        /// <param name="StartLife">start of lifetime for task. Treat this as a readonly variable..</param>
        /// <param name="StartDateTime">start date and time of task..</param>
        /// <param name="AssigneeStatus">.</param>
        /// <param name="ReuseFlag">allow task reuse.</param>
        /// <param name="AttachmentCount">attachments count for task..</param>
        /// <param name="IsPast">.</param>
        /// <param name="AddByEmail">.</param>
        public TaskDraftRecord(bool? HasDraft = null, DisplayRecord Editor = null, DisplayRecord Creator = null, ObjectReadInfoRecord ExplicitReadCount = null, bool? FavoriteFlag = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, bool? RefmeFlag = null, string Type = null, string Locale = null, int? Timeupdated = null, bool? ImportantFlag = null, string LifecycleState = null, int? Timecreated = null, int? DominantTime = null, bool? HideFlag = null, string Subtype = null, bool? PinFlag = null, bool? FollowFlag = null, string Key = null, int? PinTime = null, string Status = null, bool? HybridFlag = null, List<FolderRecord> Folders = null, AttachmentsOpRecord AttachmentKeys = null, string DueDate = null, Object LastUpdater = null, string ServersAddress = null, bool? ReShareFlag = null, int? AdditionalParticipants = null, List<Object> Assignees = null, string Source = null, TaskACLRecord Acl = null, List<TaskStepRecord> StepRecords = null, Object Observer = null, int? RejectFlag = null, string TplName = null, EmailUserListRecord UserEmails = null, int? ParticipantCount = null, string InvitationFlag = null, string ExecuteMode = null, List<Object> Ccers = null, List<Object> AllParticipants = null, string ActorStatus = null, string DraftKey = null, Object Whitelist = null, string DueTime = null, TaskRelatedRecord RelatedTasks = null, SpaceACLRecord SpaceACL = null, List<Object> Sccers = null, UserListRecord Users = null, int? DueDays = null, int? Sequence = null, int? Commentcount = null, Object CcerStatus = null, string DueDateTime = null, int? EditCommentFlag = null, string Name = null, int? CanAddByCc = null, List<Object> Bccers = null, string TaskMode = null, int? CurrectStepSeq = null, string Flag = null, int? AcceptFlag = null, List<Object> Attachments = null, TaskAccessListRecord AccessList = null, string Description = null, string MsgId = null, string CommentText = null, string TaskType = null, int? CanAddByTo = null, int? EndLife = null, Object AllUserStatus = null, string ReassignUserStr = null, Object Blacklist = null, string CommentlistKey = null, int? RestrictedFlag = null, int? StartLife = null, string StartDateTime = null, Object AssigneeStatus = null, int? ReuseFlag = null, int? AttachmentCount = null, bool? IsPast = null, bool? AddByEmail = null)
        {
            this.HasDraft = HasDraft;
            this.Editor = Editor;
            this.Creator = Creator;
            this.ExplicitReadCount = ExplicitReadCount;
            this.FavoriteFlag = FavoriteFlag;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.RefmeFlag = RefmeFlag;
            this.Type = Type;
            this.Locale = Locale;
            this.Timeupdated = Timeupdated;
            this.ImportantFlag = ImportantFlag;
            this.LifecycleState = LifecycleState;
            this.Timecreated = Timecreated;
            this.DominantTime = DominantTime;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.HybridFlag = HybridFlag;
            this.Folders = Folders;
            this.AttachmentKeys = AttachmentKeys;
            this.DueDate = DueDate;
            this.LastUpdater = LastUpdater;
            this.ServersAddress = ServersAddress;
            this.ReShareFlag = ReShareFlag;
            this.AdditionalParticipants = AdditionalParticipants;
            this.Assignees = Assignees;
            this.Source = Source;
            this.Acl = Acl;
            this.StepRecords = StepRecords;
            this.Observer = Observer;
            this.RejectFlag = RejectFlag;
            this.TplName = TplName;
            this.UserEmails = UserEmails;
            this.ParticipantCount = ParticipantCount;
            this.InvitationFlag = InvitationFlag;
            this.ExecuteMode = ExecuteMode;
            this.Ccers = Ccers;
            this.AllParticipants = AllParticipants;
            this.ActorStatus = ActorStatus;
            this.DraftKey = DraftKey;
            this.Whitelist = Whitelist;
            this.DueTime = DueTime;
            this.RelatedTasks = RelatedTasks;
            this.SpaceACL = SpaceACL;
            this.Sccers = Sccers;
            this.Users = Users;
            this.DueDays = DueDays;
            this.Sequence = Sequence;
            this.Commentcount = Commentcount;
            this.CcerStatus = CcerStatus;
            this.DueDateTime = DueDateTime;
            this.EditCommentFlag = EditCommentFlag;
            this.Name = Name;
            this.CanAddByCc = CanAddByCc;
            this.Bccers = Bccers;
            this.TaskMode = TaskMode;
            this.CurrectStepSeq = CurrectStepSeq;
            this.Flag = Flag;
            this.AcceptFlag = AcceptFlag;
            this.Attachments = Attachments;
            this.AccessList = AccessList;
            this.Description = Description;
            this.MsgId = MsgId;
            this.CommentText = CommentText;
            this.TaskType = TaskType;
            this.CanAddByTo = CanAddByTo;
            this.EndLife = EndLife;
            this.AllUserStatus = AllUserStatus;
            this.ReassignUserStr = ReassignUserStr;
            this.Blacklist = Blacklist;
            this.CommentlistKey = CommentlistKey;
            this.RestrictedFlag = RestrictedFlag;
            this.StartLife = StartLife;
            this.StartDateTime = StartDateTime;
            this.AssigneeStatus = AssigneeStatus;
            this.ReuseFlag = ReuseFlag;
            this.AttachmentCount = AttachmentCount;
            this.IsPast = IsPast;
            this.AddByEmail = AddByEmail;
        }
        
        /// <summary>
        /// the login user has comment drafts in this object.
        /// </summary>
        /// <value>the login user has comment drafts in this object.</value>
        [DataMember(Name="hasDraft", EmitDefaultValue=false)]
        public bool? HasDraft { get; set; }
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Gets or Sets ExplicitReadCount
        /// </summary>
        [DataMember(Name="explicitReadCount", EmitDefaultValue=false)]
        public ObjectReadInfoRecord ExplicitReadCount { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public bool? FavoriteFlag { get; set; }
        /// <summary>
        /// Destinations where this object has been placed.
        /// </summary>
        /// <value>Destinations where this object has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// RefmeFlag.
        /// </summary>
        /// <value>RefmeFlag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Locale language.
        /// </summary>
        /// <value>Locale language.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public bool? ImportantFlag { get; set; }
        /// <summary>
        /// lifecycle state.
        /// </summary>
        /// <value>lifecycle state.</value>
        [DataMember(Name="lifecycle_state", EmitDefaultValue=false)]
        public string LifecycleState { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public bool? HideFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public bool? PinFlag { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Key of document record.
        /// </summary>
        /// <value>Key of document record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status.
        /// </summary>
        /// <value>Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Hybrid Flag.
        /// </summary>
        /// <value>Hybrid Flag.</value>
        [DataMember(Name="hybridFlag", EmitDefaultValue=false)]
        public bool? HybridFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public List<FolderRecord> Folders { get; set; }
        /// <summary>
        /// Gets or Sets AttachmentKeys
        /// </summary>
        [DataMember(Name="attachmentKeys", EmitDefaultValue=false)]
        public AttachmentsOpRecord AttachmentKeys { get; set; }
        /// <summary>
        /// due date of task.
        /// </summary>
        /// <value>due date of task.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public string DueDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="lastUpdater", EmitDefaultValue=false)]
        public Object LastUpdater { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="serversAddress", EmitDefaultValue=false)]
        public string ServersAddress { get; set; }
        /// <summary>
        /// whether allow member re-share task.
        /// </summary>
        /// <value>whether allow member re-share task.</value>
        [DataMember(Name="reShareFlag", EmitDefaultValue=false)]
        public bool? ReShareFlag { get; set; }
        /// <summary>
        /// allow add additional participants
        /// </summary>
        /// <value>allow add additional participants</value>
        [DataMember(Name="additionalParticipants", EmitDefaultValue=false)]
        public int? AdditionalParticipants { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="assignees", EmitDefaultValue=false)]
        public List<Object> Assignees { get; set; }
        /// <summary>
        /// source task.key
        /// </summary>
        /// <value>source task.key</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Gets or Sets Acl
        /// </summary>
        [DataMember(Name="acl", EmitDefaultValue=false)]
        public TaskACLRecord Acl { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="stepRecords", EmitDefaultValue=false)]
        public List<TaskStepRecord> StepRecords { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="observer", EmitDefaultValue=false)]
        public Object Observer { get; set; }
        /// <summary>
        /// task rejected Flag
        /// </summary>
        /// <value>task rejected Flag</value>
        [DataMember(Name="rejectFlag", EmitDefaultValue=false)]
        public int? RejectFlag { get; set; }
        /// <summary>
        /// template name.
        /// </summary>
        /// <value>template name.</value>
        [DataMember(Name="tplName", EmitDefaultValue=false)]
        public string TplName { get; set; }
        /// <summary>
        /// Gets or Sets UserEmails
        /// </summary>
        [DataMember(Name="userEmails", EmitDefaultValue=false)]
        public EmailUserListRecord UserEmails { get; set; }
        /// <summary>
        /// participants count for task.
        /// </summary>
        /// <value>participants count for task.</value>
        [DataMember(Name="participantCount", EmitDefaultValue=false)]
        public int? ParticipantCount { get; set; }
        /// <summary>
        /// type of invitation task.
        /// </summary>
        /// <value>type of invitation task.</value>
        [DataMember(Name="invitationFlag", EmitDefaultValue=false)]
        public string InvitationFlag { get; set; }
        /// <summary>
        /// task execute mode.
        /// </summary>
        /// <value>task execute mode.</value>
        [DataMember(Name="executeMode", EmitDefaultValue=false)]
        public string ExecuteMode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ccers", EmitDefaultValue=false)]
        public List<Object> Ccers { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allParticipants", EmitDefaultValue=false)]
        public List<Object> AllParticipants { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="actorStatus", EmitDefaultValue=false)]
        public string ActorStatus { get; set; }
        /// <summary>
        /// Key of draft.
        /// </summary>
        /// <value>Key of draft.</value>
        [DataMember(Name="draftKey", EmitDefaultValue=false)]
        public string DraftKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="whitelist", EmitDefaultValue=false)]
        public Object Whitelist { get; set; }
        /// <summary>
        /// due time of task.
        /// </summary>
        /// <value>due time of task.</value>
        [DataMember(Name="dueTime", EmitDefaultValue=false)]
        public string DueTime { get; set; }
        /// <summary>
        /// Gets or Sets RelatedTasks
        /// </summary>
        [DataMember(Name="relatedTasks", EmitDefaultValue=false)]
        public TaskRelatedRecord RelatedTasks { get; set; }
        /// <summary>
        /// Gets or Sets SpaceACL
        /// </summary>
        [DataMember(Name="spaceACL", EmitDefaultValue=false)]
        public SpaceACLRecord SpaceACL { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="sccers", EmitDefaultValue=false)]
        public List<Object> Sccers { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public UserListRecord Users { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="dueDays", EmitDefaultValue=false)]
        public int? DueDays { get; set; }
        /// <summary>
        /// sequence of step.
        /// </summary>
        /// <value>sequence of step.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Comment count for task.
        /// </summary>
        /// <value>Comment count for task.</value>
        [DataMember(Name="commentcount", EmitDefaultValue=false)]
        public int? Commentcount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ccerStatus", EmitDefaultValue=false)]
        public Object CcerStatus { get; set; }
        /// <summary>
        /// due date and time of task.
        /// </summary>
        /// <value>due date and time of task.</value>
        [DataMember(Name="dueDateTime", EmitDefaultValue=false)]
        public string DueDateTime { get; set; }
        /// <summary>
        /// allow edit task comment
        /// </summary>
        /// <value>allow edit task comment</value>
        [DataMember(Name="editCommentFlag", EmitDefaultValue=false)]
        public int? EditCommentFlag { get; set; }
        /// <summary>
        /// Name of Task.
        /// </summary>
        /// <value>Name of Task.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// can add participants by cc
        /// </summary>
        /// <value>can add participants by cc</value>
        [DataMember(Name="canAddByCc", EmitDefaultValue=false)]
        public int? CanAddByCc { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="bccers", EmitDefaultValue=false)]
        public List<Object> Bccers { get; set; }
        /// <summary>
        /// mode of task.
        /// </summary>
        /// <value>mode of task.</value>
        [DataMember(Name="taskMode", EmitDefaultValue=false)]
        public string TaskMode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="currectStepSeq", EmitDefaultValue=false)]
        public int? CurrectStepSeq { get; set; }
        /// <summary>
        /// task flag
        /// </summary>
        /// <value>task flag</value>
        [DataMember(Name="flag", EmitDefaultValue=false)]
        public string Flag { get; set; }
        /// <summary>
        /// task required accept
        /// </summary>
        /// <value>task required accept</value>
        [DataMember(Name="acceptFlag", EmitDefaultValue=false)]
        public int? AcceptFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<Object> Attachments { get; set; }
        /// <summary>
        /// Gets or Sets AccessList
        /// </summary>
        [DataMember(Name="accessList", EmitDefaultValue=false)]
        public TaskAccessListRecord AccessList { get; set; }
        /// <summary>
        /// Description of Task.
        /// </summary>
        /// <value>Description of Task.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// email message-ID
        /// </summary>
        /// <value>email message-ID</value>
        [DataMember(Name="msgId", EmitDefaultValue=false)]
        public string MsgId { get; set; }
        /// <summary>
        /// comment #1 of Chat.
        /// </summary>
        /// <value>comment #1 of Chat.</value>
        [DataMember(Name="commentText", EmitDefaultValue=false)]
        public string CommentText { get; set; }
        /// <summary>
        /// task type
        /// </summary>
        /// <value>task type</value>
        [DataMember(Name="taskType", EmitDefaultValue=false)]
        public string TaskType { get; set; }
        /// <summary>
        /// can add participants by to
        /// </summary>
        /// <value>can add participants by to</value>
        [DataMember(Name="canAddByTo", EmitDefaultValue=false)]
        public int? CanAddByTo { get; set; }
        /// <summary>
        /// end of lifetime for task. Treat this as a readonly variable.
        /// </summary>
        /// <value>end of lifetime for task. Treat this as a readonly variable.</value>
        [DataMember(Name="endLife", EmitDefaultValue=false)]
        public int? EndLife { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allUserStatus", EmitDefaultValue=false)]
        public Object AllUserStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="reassignUserStr", EmitDefaultValue=false)]
        public string ReassignUserStr { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="blacklist", EmitDefaultValue=false)]
        public Object Blacklist { get; set; }
        /// <summary>
        /// Key of commentlist
        /// </summary>
        /// <value>Key of commentlist</value>
        [DataMember(Name="commentlist_key", EmitDefaultValue=false)]
        public string CommentlistKey { get; set; }
        /// <summary>
        /// task restricted Flag
        /// </summary>
        /// <value>task restricted Flag</value>
        [DataMember(Name="restrictedFlag", EmitDefaultValue=false)]
        public int? RestrictedFlag { get; set; }
        /// <summary>
        /// start of lifetime for task. Treat this as a readonly variable.
        /// </summary>
        /// <value>start of lifetime for task. Treat this as a readonly variable.</value>
        [DataMember(Name="startLife", EmitDefaultValue=false)]
        public int? StartLife { get; set; }
        /// <summary>
        /// start date and time of task.
        /// </summary>
        /// <value>start date and time of task.</value>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public string StartDateTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="assigneeStatus", EmitDefaultValue=false)]
        public Object AssigneeStatus { get; set; }
        /// <summary>
        /// allow task reuse
        /// </summary>
        /// <value>allow task reuse</value>
        [DataMember(Name="reuseFlag", EmitDefaultValue=false)]
        public int? ReuseFlag { get; set; }
        /// <summary>
        /// attachments count for task.
        /// </summary>
        /// <value>attachments count for task.</value>
        [DataMember(Name="attachmentCount", EmitDefaultValue=false)]
        public int? AttachmentCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isPast", EmitDefaultValue=false)]
        public bool? IsPast { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="addByEmail", EmitDefaultValue=false)]
        public bool? AddByEmail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskDraftRecord {\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExplicitReadCount: ").Append(ExplicitReadCount).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HybridFlag: ").Append(HybridFlag).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  AttachmentKeys: ").Append(AttachmentKeys).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  LastUpdater: ").Append(LastUpdater).Append("\n");
            sb.Append("  ServersAddress: ").Append(ServersAddress).Append("\n");
            sb.Append("  ReShareFlag: ").Append(ReShareFlag).Append("\n");
            sb.Append("  AdditionalParticipants: ").Append(AdditionalParticipants).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Acl: ").Append(Acl).Append("\n");
            sb.Append("  StepRecords: ").Append(StepRecords).Append("\n");
            sb.Append("  Observer: ").Append(Observer).Append("\n");
            sb.Append("  RejectFlag: ").Append(RejectFlag).Append("\n");
            sb.Append("  TplName: ").Append(TplName).Append("\n");
            sb.Append("  UserEmails: ").Append(UserEmails).Append("\n");
            sb.Append("  ParticipantCount: ").Append(ParticipantCount).Append("\n");
            sb.Append("  InvitationFlag: ").Append(InvitationFlag).Append("\n");
            sb.Append("  ExecuteMode: ").Append(ExecuteMode).Append("\n");
            sb.Append("  Ccers: ").Append(Ccers).Append("\n");
            sb.Append("  AllParticipants: ").Append(AllParticipants).Append("\n");
            sb.Append("  ActorStatus: ").Append(ActorStatus).Append("\n");
            sb.Append("  DraftKey: ").Append(DraftKey).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("  DueTime: ").Append(DueTime).Append("\n");
            sb.Append("  RelatedTasks: ").Append(RelatedTasks).Append("\n");
            sb.Append("  SpaceACL: ").Append(SpaceACL).Append("\n");
            sb.Append("  Sccers: ").Append(Sccers).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  DueDays: ").Append(DueDays).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Commentcount: ").Append(Commentcount).Append("\n");
            sb.Append("  CcerStatus: ").Append(CcerStatus).Append("\n");
            sb.Append("  DueDateTime: ").Append(DueDateTime).Append("\n");
            sb.Append("  EditCommentFlag: ").Append(EditCommentFlag).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CanAddByCc: ").Append(CanAddByCc).Append("\n");
            sb.Append("  Bccers: ").Append(Bccers).Append("\n");
            sb.Append("  TaskMode: ").Append(TaskMode).Append("\n");
            sb.Append("  CurrectStepSeq: ").Append(CurrectStepSeq).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  AcceptFlag: ").Append(AcceptFlag).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AccessList: ").Append(AccessList).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MsgId: ").Append(MsgId).Append("\n");
            sb.Append("  CommentText: ").Append(CommentText).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  CanAddByTo: ").Append(CanAddByTo).Append("\n");
            sb.Append("  EndLife: ").Append(EndLife).Append("\n");
            sb.Append("  AllUserStatus: ").Append(AllUserStatus).Append("\n");
            sb.Append("  ReassignUserStr: ").Append(ReassignUserStr).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  CommentlistKey: ").Append(CommentlistKey).Append("\n");
            sb.Append("  RestrictedFlag: ").Append(RestrictedFlag).Append("\n");
            sb.Append("  StartLife: ").Append(StartLife).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  AssigneeStatus: ").Append(AssigneeStatus).Append("\n");
            sb.Append("  ReuseFlag: ").Append(ReuseFlag).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  IsPast: ").Append(IsPast).Append("\n");
            sb.Append("  AddByEmail: ").Append(AddByEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskDraftRecord);
        }

        /// <summary>
        /// Returns true if TaskDraftRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskDraftRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskDraftRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasDraft == other.HasDraft ||
                    this.HasDraft != null &&
                    this.HasDraft.Equals(other.HasDraft)
                ) && 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.ExplicitReadCount == other.ExplicitReadCount ||
                    this.ExplicitReadCount != null &&
                    this.ExplicitReadCount.Equals(other.ExplicitReadCount)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.LifecycleState == other.LifecycleState ||
                    this.LifecycleState != null &&
                    this.LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HybridFlag == other.HybridFlag ||
                    this.HybridFlag != null &&
                    this.HybridFlag.Equals(other.HybridFlag)
                ) && 
                (
                    this.Folders == other.Folders ||
                    this.Folders != null &&
                    this.Folders.SequenceEqual(other.Folders)
                ) && 
                (
                    this.AttachmentKeys == other.AttachmentKeys ||
                    this.AttachmentKeys != null &&
                    this.AttachmentKeys.Equals(other.AttachmentKeys)
                ) && 
                (
                    this.DueDate == other.DueDate ||
                    this.DueDate != null &&
                    this.DueDate.Equals(other.DueDate)
                ) && 
                (
                    this.LastUpdater == other.LastUpdater ||
                    this.LastUpdater != null &&
                    this.LastUpdater.Equals(other.LastUpdater)
                ) && 
                (
                    this.ServersAddress == other.ServersAddress ||
                    this.ServersAddress != null &&
                    this.ServersAddress.Equals(other.ServersAddress)
                ) && 
                (
                    this.ReShareFlag == other.ReShareFlag ||
                    this.ReShareFlag != null &&
                    this.ReShareFlag.Equals(other.ReShareFlag)
                ) && 
                (
                    this.AdditionalParticipants == other.AdditionalParticipants ||
                    this.AdditionalParticipants != null &&
                    this.AdditionalParticipants.Equals(other.AdditionalParticipants)
                ) && 
                (
                    this.Assignees == other.Assignees ||
                    this.Assignees != null &&
                    this.Assignees.SequenceEqual(other.Assignees)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Acl == other.Acl ||
                    this.Acl != null &&
                    this.Acl.Equals(other.Acl)
                ) && 
                (
                    this.StepRecords == other.StepRecords ||
                    this.StepRecords != null &&
                    this.StepRecords.SequenceEqual(other.StepRecords)
                ) && 
                (
                    this.Observer == other.Observer ||
                    this.Observer != null &&
                    this.Observer.Equals(other.Observer)
                ) && 
                (
                    this.RejectFlag == other.RejectFlag ||
                    this.RejectFlag != null &&
                    this.RejectFlag.Equals(other.RejectFlag)
                ) && 
                (
                    this.TplName == other.TplName ||
                    this.TplName != null &&
                    this.TplName.Equals(other.TplName)
                ) && 
                (
                    this.UserEmails == other.UserEmails ||
                    this.UserEmails != null &&
                    this.UserEmails.Equals(other.UserEmails)
                ) && 
                (
                    this.ParticipantCount == other.ParticipantCount ||
                    this.ParticipantCount != null &&
                    this.ParticipantCount.Equals(other.ParticipantCount)
                ) && 
                (
                    this.InvitationFlag == other.InvitationFlag ||
                    this.InvitationFlag != null &&
                    this.InvitationFlag.Equals(other.InvitationFlag)
                ) && 
                (
                    this.ExecuteMode == other.ExecuteMode ||
                    this.ExecuteMode != null &&
                    this.ExecuteMode.Equals(other.ExecuteMode)
                ) && 
                (
                    this.Ccers == other.Ccers ||
                    this.Ccers != null &&
                    this.Ccers.SequenceEqual(other.Ccers)
                ) && 
                (
                    this.AllParticipants == other.AllParticipants ||
                    this.AllParticipants != null &&
                    this.AllParticipants.SequenceEqual(other.AllParticipants)
                ) && 
                (
                    this.ActorStatus == other.ActorStatus ||
                    this.ActorStatus != null &&
                    this.ActorStatus.Equals(other.ActorStatus)
                ) && 
                (
                    this.DraftKey == other.DraftKey ||
                    this.DraftKey != null &&
                    this.DraftKey.Equals(other.DraftKey)
                ) && 
                (
                    this.Whitelist == other.Whitelist ||
                    this.Whitelist != null &&
                    this.Whitelist.Equals(other.Whitelist)
                ) && 
                (
                    this.DueTime == other.DueTime ||
                    this.DueTime != null &&
                    this.DueTime.Equals(other.DueTime)
                ) && 
                (
                    this.RelatedTasks == other.RelatedTasks ||
                    this.RelatedTasks != null &&
                    this.RelatedTasks.Equals(other.RelatedTasks)
                ) && 
                (
                    this.SpaceACL == other.SpaceACL ||
                    this.SpaceACL != null &&
                    this.SpaceACL.Equals(other.SpaceACL)
                ) && 
                (
                    this.Sccers == other.Sccers ||
                    this.Sccers != null &&
                    this.Sccers.SequenceEqual(other.Sccers)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.Equals(other.Users)
                ) && 
                (
                    this.DueDays == other.DueDays ||
                    this.DueDays != null &&
                    this.DueDays.Equals(other.DueDays)
                ) && 
                (
                    this.Sequence == other.Sequence ||
                    this.Sequence != null &&
                    this.Sequence.Equals(other.Sequence)
                ) && 
                (
                    this.Commentcount == other.Commentcount ||
                    this.Commentcount != null &&
                    this.Commentcount.Equals(other.Commentcount)
                ) && 
                (
                    this.CcerStatus == other.CcerStatus ||
                    this.CcerStatus != null &&
                    this.CcerStatus.Equals(other.CcerStatus)
                ) && 
                (
                    this.DueDateTime == other.DueDateTime ||
                    this.DueDateTime != null &&
                    this.DueDateTime.Equals(other.DueDateTime)
                ) && 
                (
                    this.EditCommentFlag == other.EditCommentFlag ||
                    this.EditCommentFlag != null &&
                    this.EditCommentFlag.Equals(other.EditCommentFlag)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CanAddByCc == other.CanAddByCc ||
                    this.CanAddByCc != null &&
                    this.CanAddByCc.Equals(other.CanAddByCc)
                ) && 
                (
                    this.Bccers == other.Bccers ||
                    this.Bccers != null &&
                    this.Bccers.SequenceEqual(other.Bccers)
                ) && 
                (
                    this.TaskMode == other.TaskMode ||
                    this.TaskMode != null &&
                    this.TaskMode.Equals(other.TaskMode)
                ) && 
                (
                    this.CurrectStepSeq == other.CurrectStepSeq ||
                    this.CurrectStepSeq != null &&
                    this.CurrectStepSeq.Equals(other.CurrectStepSeq)
                ) && 
                (
                    this.Flag == other.Flag ||
                    this.Flag != null &&
                    this.Flag.Equals(other.Flag)
                ) && 
                (
                    this.AcceptFlag == other.AcceptFlag ||
                    this.AcceptFlag != null &&
                    this.AcceptFlag.Equals(other.AcceptFlag)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    this.AccessList == other.AccessList ||
                    this.AccessList != null &&
                    this.AccessList.Equals(other.AccessList)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.MsgId == other.MsgId ||
                    this.MsgId != null &&
                    this.MsgId.Equals(other.MsgId)
                ) && 
                (
                    this.CommentText == other.CommentText ||
                    this.CommentText != null &&
                    this.CommentText.Equals(other.CommentText)
                ) && 
                (
                    this.TaskType == other.TaskType ||
                    this.TaskType != null &&
                    this.TaskType.Equals(other.TaskType)
                ) && 
                (
                    this.CanAddByTo == other.CanAddByTo ||
                    this.CanAddByTo != null &&
                    this.CanAddByTo.Equals(other.CanAddByTo)
                ) && 
                (
                    this.EndLife == other.EndLife ||
                    this.EndLife != null &&
                    this.EndLife.Equals(other.EndLife)
                ) && 
                (
                    this.AllUserStatus == other.AllUserStatus ||
                    this.AllUserStatus != null &&
                    this.AllUserStatus.Equals(other.AllUserStatus)
                ) && 
                (
                    this.ReassignUserStr == other.ReassignUserStr ||
                    this.ReassignUserStr != null &&
                    this.ReassignUserStr.Equals(other.ReassignUserStr)
                ) && 
                (
                    this.Blacklist == other.Blacklist ||
                    this.Blacklist != null &&
                    this.Blacklist.Equals(other.Blacklist)
                ) && 
                (
                    this.CommentlistKey == other.CommentlistKey ||
                    this.CommentlistKey != null &&
                    this.CommentlistKey.Equals(other.CommentlistKey)
                ) && 
                (
                    this.RestrictedFlag == other.RestrictedFlag ||
                    this.RestrictedFlag != null &&
                    this.RestrictedFlag.Equals(other.RestrictedFlag)
                ) && 
                (
                    this.StartLife == other.StartLife ||
                    this.StartLife != null &&
                    this.StartLife.Equals(other.StartLife)
                ) && 
                (
                    this.StartDateTime == other.StartDateTime ||
                    this.StartDateTime != null &&
                    this.StartDateTime.Equals(other.StartDateTime)
                ) && 
                (
                    this.AssigneeStatus == other.AssigneeStatus ||
                    this.AssigneeStatus != null &&
                    this.AssigneeStatus.Equals(other.AssigneeStatus)
                ) && 
                (
                    this.ReuseFlag == other.ReuseFlag ||
                    this.ReuseFlag != null &&
                    this.ReuseFlag.Equals(other.ReuseFlag)
                ) && 
                (
                    this.AttachmentCount == other.AttachmentCount ||
                    this.AttachmentCount != null &&
                    this.AttachmentCount.Equals(other.AttachmentCount)
                ) && 
                (
                    this.IsPast == other.IsPast ||
                    this.IsPast != null &&
                    this.IsPast.Equals(other.IsPast)
                ) && 
                (
                    this.AddByEmail == other.AddByEmail ||
                    this.AddByEmail != null &&
                    this.AddByEmail.Equals(other.AddByEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasDraft != null)
                    hash = hash * 59 + this.HasDraft.GetHashCode();
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.ExplicitReadCount != null)
                    hash = hash * 59 + this.ExplicitReadCount.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.LifecycleState != null)
                    hash = hash * 59 + this.LifecycleState.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HybridFlag != null)
                    hash = hash * 59 + this.HybridFlag.GetHashCode();
                if (this.Folders != null)
                    hash = hash * 59 + this.Folders.GetHashCode();
                if (this.AttachmentKeys != null)
                    hash = hash * 59 + this.AttachmentKeys.GetHashCode();
                if (this.DueDate != null)
                    hash = hash * 59 + this.DueDate.GetHashCode();
                if (this.LastUpdater != null)
                    hash = hash * 59 + this.LastUpdater.GetHashCode();
                if (this.ServersAddress != null)
                    hash = hash * 59 + this.ServersAddress.GetHashCode();
                if (this.ReShareFlag != null)
                    hash = hash * 59 + this.ReShareFlag.GetHashCode();
                if (this.AdditionalParticipants != null)
                    hash = hash * 59 + this.AdditionalParticipants.GetHashCode();
                if (this.Assignees != null)
                    hash = hash * 59 + this.Assignees.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Acl != null)
                    hash = hash * 59 + this.Acl.GetHashCode();
                if (this.StepRecords != null)
                    hash = hash * 59 + this.StepRecords.GetHashCode();
                if (this.Observer != null)
                    hash = hash * 59 + this.Observer.GetHashCode();
                if (this.RejectFlag != null)
                    hash = hash * 59 + this.RejectFlag.GetHashCode();
                if (this.TplName != null)
                    hash = hash * 59 + this.TplName.GetHashCode();
                if (this.UserEmails != null)
                    hash = hash * 59 + this.UserEmails.GetHashCode();
                if (this.ParticipantCount != null)
                    hash = hash * 59 + this.ParticipantCount.GetHashCode();
                if (this.InvitationFlag != null)
                    hash = hash * 59 + this.InvitationFlag.GetHashCode();
                if (this.ExecuteMode != null)
                    hash = hash * 59 + this.ExecuteMode.GetHashCode();
                if (this.Ccers != null)
                    hash = hash * 59 + this.Ccers.GetHashCode();
                if (this.AllParticipants != null)
                    hash = hash * 59 + this.AllParticipants.GetHashCode();
                if (this.ActorStatus != null)
                    hash = hash * 59 + this.ActorStatus.GetHashCode();
                if (this.DraftKey != null)
                    hash = hash * 59 + this.DraftKey.GetHashCode();
                if (this.Whitelist != null)
                    hash = hash * 59 + this.Whitelist.GetHashCode();
                if (this.DueTime != null)
                    hash = hash * 59 + this.DueTime.GetHashCode();
                if (this.RelatedTasks != null)
                    hash = hash * 59 + this.RelatedTasks.GetHashCode();
                if (this.SpaceACL != null)
                    hash = hash * 59 + this.SpaceACL.GetHashCode();
                if (this.Sccers != null)
                    hash = hash * 59 + this.Sccers.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.DueDays != null)
                    hash = hash * 59 + this.DueDays.GetHashCode();
                if (this.Sequence != null)
                    hash = hash * 59 + this.Sequence.GetHashCode();
                if (this.Commentcount != null)
                    hash = hash * 59 + this.Commentcount.GetHashCode();
                if (this.CcerStatus != null)
                    hash = hash * 59 + this.CcerStatus.GetHashCode();
                if (this.DueDateTime != null)
                    hash = hash * 59 + this.DueDateTime.GetHashCode();
                if (this.EditCommentFlag != null)
                    hash = hash * 59 + this.EditCommentFlag.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CanAddByCc != null)
                    hash = hash * 59 + this.CanAddByCc.GetHashCode();
                if (this.Bccers != null)
                    hash = hash * 59 + this.Bccers.GetHashCode();
                if (this.TaskMode != null)
                    hash = hash * 59 + this.TaskMode.GetHashCode();
                if (this.CurrectStepSeq != null)
                    hash = hash * 59 + this.CurrectStepSeq.GetHashCode();
                if (this.Flag != null)
                    hash = hash * 59 + this.Flag.GetHashCode();
                if (this.AcceptFlag != null)
                    hash = hash * 59 + this.AcceptFlag.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                if (this.AccessList != null)
                    hash = hash * 59 + this.AccessList.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.MsgId != null)
                    hash = hash * 59 + this.MsgId.GetHashCode();
                if (this.CommentText != null)
                    hash = hash * 59 + this.CommentText.GetHashCode();
                if (this.TaskType != null)
                    hash = hash * 59 + this.TaskType.GetHashCode();
                if (this.CanAddByTo != null)
                    hash = hash * 59 + this.CanAddByTo.GetHashCode();
                if (this.EndLife != null)
                    hash = hash * 59 + this.EndLife.GetHashCode();
                if (this.AllUserStatus != null)
                    hash = hash * 59 + this.AllUserStatus.GetHashCode();
                if (this.ReassignUserStr != null)
                    hash = hash * 59 + this.ReassignUserStr.GetHashCode();
                if (this.Blacklist != null)
                    hash = hash * 59 + this.Blacklist.GetHashCode();
                if (this.CommentlistKey != null)
                    hash = hash * 59 + this.CommentlistKey.GetHashCode();
                if (this.RestrictedFlag != null)
                    hash = hash * 59 + this.RestrictedFlag.GetHashCode();
                if (this.StartLife != null)
                    hash = hash * 59 + this.StartLife.GetHashCode();
                if (this.StartDateTime != null)
                    hash = hash * 59 + this.StartDateTime.GetHashCode();
                if (this.AssigneeStatus != null)
                    hash = hash * 59 + this.AssigneeStatus.GetHashCode();
                if (this.ReuseFlag != null)
                    hash = hash * 59 + this.ReuseFlag.GetHashCode();
                if (this.AttachmentCount != null)
                    hash = hash * 59 + this.AttachmentCount.GetHashCode();
                if (this.IsPast != null)
                    hash = hash * 59 + this.IsPast.GetHashCode();
                if (this.AddByEmail != null)
                    hash = hash * 59 + this.AddByEmail.GetHashCode();
                return hash;
            }
        }
    }

}
