/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// FolderPagerRecord
    /// </summary>
    [DataContract]
    public partial class FolderPagerRecord : ListPageRecord,  IEquatable<FolderPagerRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderPagerRecord" /> class.
        /// </summary>
        /// <param name="Total">Total number of items in the list. Negative value means the total is not available..</param>
        /// <param name="CommentSizing">comment sizing option. This is used for comments sizing option..</param>
        /// <param name="SortAttr">sort attributes..</param>
        /// <param name="Pg">Pg.</param>
        /// <param name="DisplayStyle">display option..</param>
        /// <param name="Count">Number of items in the partial list. @deprecate The information is not important..</param>
        /// <param name="SortDir">sort direction..</param>
        /// <param name="Current">.</param>
        /// <param name="Limit">.</param>
        /// <param name="Totalitems">.</param>
        public FolderPagerRecord(int? Total = null, string CommentSizing = null, List<string> SortAttr = null, PaginationRecord Pg = null, string DisplayStyle = null, int? Count = null, string SortDir = null, string Current = null, string Limit = null, string Totalitems = null)
        {
            this.Total = Total;
            this.CommentSizing = CommentSizing;
            this.SortAttr = SortAttr;
            this.Pg = Pg;
            this.DisplayStyle = DisplayStyle;
            this.Count = Count;
            this.SortDir = SortDir;
            this.Current = Current;
            this.Limit = Limit;
            this.Totalitems = Totalitems;
        }
        
        /// <summary>
        /// Total number of items in the list. Negative value means the total is not available.
        /// </summary>
        /// <value>Total number of items in the list. Negative value means the total is not available.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }
        /// <summary>
        /// comment sizing option. This is used for comments sizing option.
        /// </summary>
        /// <value>comment sizing option. This is used for comments sizing option.</value>
        [DataMember(Name="commentSizing", EmitDefaultValue=false)]
        public string CommentSizing { get; set; }
        /// <summary>
        /// sort attributes.
        /// </summary>
        /// <value>sort attributes.</value>
        [DataMember(Name="sort_attr", EmitDefaultValue=false)]
        public List<string> SortAttr { get; set; }
        /// <summary>
        /// Gets or Sets Pg
        /// </summary>
        [DataMember(Name="pg", EmitDefaultValue=false)]
        public PaginationRecord Pg { get; set; }
        /// <summary>
        /// display option.
        /// </summary>
        /// <value>display option.</value>
        [DataMember(Name="display_style", EmitDefaultValue=false)]
        public string DisplayStyle { get; set; }
        /// <summary>
        /// Number of items in the partial list. @deprecate The information is not important.
        /// </summary>
        /// <value>Number of items in the partial list. @deprecate The information is not important.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }
        /// <summary>
        /// sort direction.
        /// </summary>
        /// <value>sort direction.</value>
        [DataMember(Name="sort_dir", EmitDefaultValue=false)]
        public string SortDir { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public string Current { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public string Limit { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="totalitems", EmitDefaultValue=false)]
        public string Totalitems { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderPagerRecord {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CommentSizing: ").Append(CommentSizing).Append("\n");
            sb.Append("  SortAttr: ").Append(SortAttr).Append("\n");
            sb.Append("  Pg: ").Append(Pg).Append("\n");
            sb.Append("  DisplayStyle: ").Append(DisplayStyle).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  SortDir: ").Append(SortDir).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Totalitems: ").Append(Totalitems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderPagerRecord);
        }

        /// <summary>
        /// Returns true if FolderPagerRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderPagerRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderPagerRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                ) && 
                (
                    this.CommentSizing == other.CommentSizing ||
                    this.CommentSizing != null &&
                    this.CommentSizing.Equals(other.CommentSizing)
                ) && 
                (
                    this.SortAttr == other.SortAttr ||
                    this.SortAttr != null &&
                    this.SortAttr.SequenceEqual(other.SortAttr)
                ) && 
                (
                    this.Pg == other.Pg ||
                    this.Pg != null &&
                    this.Pg.Equals(other.Pg)
                ) && 
                (
                    this.DisplayStyle == other.DisplayStyle ||
                    this.DisplayStyle != null &&
                    this.DisplayStyle.Equals(other.DisplayStyle)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.SortDir == other.SortDir ||
                    this.SortDir != null &&
                    this.SortDir.Equals(other.SortDir)
                ) && 
                (
                    this.Current == other.Current ||
                    this.Current != null &&
                    this.Current.Equals(other.Current)
                ) && 
                (
                    this.Limit == other.Limit ||
                    this.Limit != null &&
                    this.Limit.Equals(other.Limit)
                ) && 
                (
                    this.Totalitems == other.Totalitems ||
                    this.Totalitems != null &&
                    this.Totalitems.Equals(other.Totalitems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                if (this.CommentSizing != null)
                    hash = hash * 59 + this.CommentSizing.GetHashCode();
                if (this.SortAttr != null)
                    hash = hash * 59 + this.SortAttr.GetHashCode();
                if (this.Pg != null)
                    hash = hash * 59 + this.Pg.GetHashCode();
                if (this.DisplayStyle != null)
                    hash = hash * 59 + this.DisplayStyle.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.SortDir != null)
                    hash = hash * 59 + this.SortDir.GetHashCode();
                if (this.Current != null)
                    hash = hash * 59 + this.Current.GetHashCode();
                if (this.Limit != null)
                    hash = hash * 59 + this.Limit.GetHashCode();
                if (this.Totalitems != null)
                    hash = hash * 59 + this.Totalitems.GetHashCode();
                return hash;
            }
        }
    }

}
