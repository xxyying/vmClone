/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// LoginAccountRecord
    /// </summary>
    [DataContract]
    public partial class LoginAccountRecord :  IEquatable<LoginAccountRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAccountRecord" /> class.
        /// </summary>
        /// <param name="CustomType">Custom account type.</param>
        /// <param name="CountryCode">Country code of phone number.</param>
        /// <param name="Smscode">SMS code for phone number.</param>
        /// <param name="Username">account name.</param>
        /// <param name="Status">confirmed or unconfirmed.</param>
        public LoginAccountRecord(string CustomType = null, string CountryCode = null, string Smscode = null, string Username = null, string Status = null)
        {
            this.CustomType = CustomType;
            this.CountryCode = CountryCode;
            this.Smscode = Smscode;
            this.Username = Username;
            this.Status = Status;
        }
        
        /// <summary>
        /// Custom account type
        /// </summary>
        /// <value>Custom account type</value>
        [DataMember(Name="customType", EmitDefaultValue=false)]
        public string CustomType { get; set; }
        /// <summary>
        /// Country code of phone number
        /// </summary>
        /// <value>Country code of phone number</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// SMS code for phone number
        /// </summary>
        /// <value>SMS code for phone number</value>
        [DataMember(Name="smscode", EmitDefaultValue=false)]
        public string Smscode { get; set; }
        /// <summary>
        /// account name
        /// </summary>
        /// <value>account name</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// confirmed or unconfirmed
        /// </summary>
        /// <value>confirmed or unconfirmed</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginAccountRecord {\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Smscode: ").Append(Smscode).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LoginAccountRecord);
        }

        /// <summary>
        /// Returns true if LoginAccountRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of LoginAccountRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginAccountRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomType == other.CustomType ||
                    this.CustomType != null &&
                    this.CustomType.Equals(other.CustomType)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.Smscode == other.Smscode ||
                    this.Smscode != null &&
                    this.Smscode.Equals(other.Smscode)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomType != null)
                    hash = hash * 59 + this.CustomType.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.Smscode != null)
                    hash = hash * 59 + this.Smscode.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }
    }

}
