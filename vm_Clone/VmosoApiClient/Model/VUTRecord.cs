/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// VUTRecord
    /// </summary>
    [DataContract]
    public partial class VUTRecord :  IEquatable<VUTRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VUTRecord" /> class.
        /// </summary>
        /// <param name="ObjectRecord">ObjectRecord.</param>
        /// <param name="ActivityCount">.</param>
        /// <param name="Children">.</param>
        /// <param name="Count">.</param>
        /// <param name="PermissionRecord">PermissionRecord.</param>
        public VUTRecord(ObjectRecord ObjectRecord = null, int? ActivityCount = null, List<VUTRecord> Children = null, int? Count = null, PermissionRecord PermissionRecord = null)
        {
            this.ObjectRecord = ObjectRecord;
            this.ActivityCount = ActivityCount;
            this.Children = Children;
            this.Count = Count;
            this.PermissionRecord = PermissionRecord;
        }
        
        /// <summary>
        /// Gets or Sets ObjectRecord
        /// </summary>
        [DataMember(Name="object_record", EmitDefaultValue=false)]
        public ObjectRecord ObjectRecord { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="activity_count", EmitDefaultValue=false)]
        public int? ActivityCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<VUTRecord> Children { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }
        /// <summary>
        /// Gets or Sets PermissionRecord
        /// </summary>
        [DataMember(Name="permission_record", EmitDefaultValue=false)]
        public PermissionRecord PermissionRecord { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VUTRecord {\n");
            sb.Append("  ObjectRecord: ").Append(ObjectRecord).Append("\n");
            sb.Append("  ActivityCount: ").Append(ActivityCount).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PermissionRecord: ").Append(PermissionRecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VUTRecord);
        }

        /// <summary>
        /// Returns true if VUTRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of VUTRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VUTRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ObjectRecord == other.ObjectRecord ||
                    this.ObjectRecord != null &&
                    this.ObjectRecord.Equals(other.ObjectRecord)
                ) && 
                (
                    this.ActivityCount == other.ActivityCount ||
                    this.ActivityCount != null &&
                    this.ActivityCount.Equals(other.ActivityCount)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.PermissionRecord == other.PermissionRecord ||
                    this.PermissionRecord != null &&
                    this.PermissionRecord.Equals(other.PermissionRecord)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ObjectRecord != null)
                    hash = hash * 59 + this.ObjectRecord.GetHashCode();
                if (this.ActivityCount != null)
                    hash = hash * 59 + this.ActivityCount.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.PermissionRecord != null)
                    hash = hash * 59 + this.PermissionRecord.GetHashCode();
                return hash;
            }
        }
    }

}
