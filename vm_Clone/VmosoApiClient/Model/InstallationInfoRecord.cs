/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// InstallationInfoRecord
    /// </summary>
    [DataContract]
    public partial class InstallationInfoRecord :  IEquatable<InstallationInfoRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationInfoRecord" /> class.
        /// </summary>
        /// <param name="Wallpaper">Wallpaper files.</param>
        /// <param name="DeploymentVersion">Installation deployment version.</param>
        /// <param name="Name">Installation name.</param>
        /// <param name="Header">Installation header.</param>
        /// <param name="HeaderKey">Installation header key.</param>
        /// <param name="Type">Installation type.</param>
        public InstallationInfoRecord(Object Wallpaper = null, string DeploymentVersion = null, string Name = null, string Header = null, string HeaderKey = null, string Type = null)
        {
            this.Wallpaper = Wallpaper;
            this.DeploymentVersion = DeploymentVersion;
            this.Name = Name;
            this.Header = Header;
            this.HeaderKey = HeaderKey;
            this.Type = Type;
        }
        
        /// <summary>
        /// Wallpaper files
        /// </summary>
        /// <value>Wallpaper files</value>
        [DataMember(Name="wallpaper", EmitDefaultValue=false)]
        public Object Wallpaper { get; set; }
        /// <summary>
        /// Installation deployment version
        /// </summary>
        /// <value>Installation deployment version</value>
        [DataMember(Name="deploymentVersion", EmitDefaultValue=false)]
        public string DeploymentVersion { get; set; }
        /// <summary>
        /// Installation name
        /// </summary>
        /// <value>Installation name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Installation header
        /// </summary>
        /// <value>Installation header</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }
        /// <summary>
        /// Installation header key
        /// </summary>
        /// <value>Installation header key</value>
        [DataMember(Name="headerKey", EmitDefaultValue=false)]
        public string HeaderKey { get; set; }
        /// <summary>
        /// Installation type
        /// </summary>
        /// <value>Installation type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallationInfoRecord {\n");
            sb.Append("  Wallpaper: ").Append(Wallpaper).Append("\n");
            sb.Append("  DeploymentVersion: ").Append(DeploymentVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  HeaderKey: ").Append(HeaderKey).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InstallationInfoRecord);
        }

        /// <summary>
        /// Returns true if InstallationInfoRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of InstallationInfoRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallationInfoRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Wallpaper == other.Wallpaper ||
                    this.Wallpaper != null &&
                    this.Wallpaper.Equals(other.Wallpaper)
                ) && 
                (
                    this.DeploymentVersion == other.DeploymentVersion ||
                    this.DeploymentVersion != null &&
                    this.DeploymentVersion.Equals(other.DeploymentVersion)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.HeaderKey == other.HeaderKey ||
                    this.HeaderKey != null &&
                    this.HeaderKey.Equals(other.HeaderKey)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Wallpaper != null)
                    hash = hash * 59 + this.Wallpaper.GetHashCode();
                if (this.DeploymentVersion != null)
                    hash = hash * 59 + this.DeploymentVersion.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.HeaderKey != null)
                    hash = hash * 59 + this.HeaderKey.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }
    }

}
