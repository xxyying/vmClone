/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ContentNameResolutionRecord
    /// </summary>
    [DataContract]
    public partial class ContentNameResolutionRecord :  IEquatable<ContentNameResolutionRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentNameResolutionRecord" /> class.
        /// </summary>
        /// <param name="Extension">Extension..</param>
        /// <param name="Name">Content name..</param>
        /// <param name="RunningCount">Running count..</param>
        /// <param name="BaseName">Base name..</param>
        /// <param name="Key">Key of content record..</param>
        public ContentNameResolutionRecord(string Extension = null, string Name = null, int? RunningCount = null, string BaseName = null, string Key = null)
        {
            this.Extension = Extension;
            this.Name = Name;
            this.RunningCount = RunningCount;
            this.BaseName = BaseName;
            this.Key = Key;
        }
        
        /// <summary>
        /// Extension.
        /// </summary>
        /// <value>Extension.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }
        /// <summary>
        /// Content name.
        /// </summary>
        /// <value>Content name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Running count.
        /// </summary>
        /// <value>Running count.</value>
        [DataMember(Name="runningCount", EmitDefaultValue=false)]
        public int? RunningCount { get; set; }
        /// <summary>
        /// Base name.
        /// </summary>
        /// <value>Base name.</value>
        [DataMember(Name="baseName", EmitDefaultValue=false)]
        public string BaseName { get; set; }
        /// <summary>
        /// Key of content record.
        /// </summary>
        /// <value>Key of content record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentNameResolutionRecord {\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RunningCount: ").Append(RunningCount).Append("\n");
            sb.Append("  BaseName: ").Append(BaseName).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContentNameResolutionRecord);
        }

        /// <summary>
        /// Returns true if ContentNameResolutionRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ContentNameResolutionRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentNameResolutionRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RunningCount == other.RunningCount ||
                    this.RunningCount != null &&
                    this.RunningCount.Equals(other.RunningCount)
                ) && 
                (
                    this.BaseName == other.BaseName ||
                    this.BaseName != null &&
                    this.BaseName.Equals(other.BaseName)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RunningCount != null)
                    hash = hash * 59 + this.RunningCount.GetHashCode();
                if (this.BaseName != null)
                    hash = hash * 59 + this.BaseName.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                return hash;
            }
        }
    }

}
