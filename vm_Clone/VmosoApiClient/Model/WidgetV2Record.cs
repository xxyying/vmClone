/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// WidgetV2Record
    /// </summary>
    [DataContract]
    public partial class WidgetV2Record : ObjectV2Record,  IEquatable<WidgetV2Record>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetV2Record" /> class.
        /// </summary>
        /// <param name="HasDraft">the login user has comment drafts in this object..</param>
        /// <param name="Editor">Editor.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="ExplicitReadCount">ExplicitReadCount.</param>
        /// <param name="FavoriteFlag">ImportantFlag..</param>
        /// <param name="Destinations">Destinations where this object has been placed..</param>
        /// <param name="CopyDestination">copy destination email address.</param>
        /// <param name="RefmeFlag">RefmeFlag..</param>
        /// <param name="Type">Type of document record..</param>
        /// <param name="Locale">Locale language..</param>
        /// <param name="Timeupdated">Last update time for Space record..</param>
        /// <param name="ImportantFlag">ImportantFlag..</param>
        /// <param name="LifecycleState">lifecycle state..</param>
        /// <param name="Timecreated">Time created for Space record..</param>
        /// <param name="DominantTime">Dominant update time.</param>
        /// <param name="HideFlag">hide flag..</param>
        /// <param name="Subtype">Type of document record..</param>
        /// <param name="PinFlag">pin flag..</param>
        /// <param name="FollowFlag">FollowFlag..</param>
        /// <param name="Key">Key of document record..</param>
        /// <param name="PinTime">pin time..</param>
        /// <param name="Status">Status..</param>
        /// <param name="HybridFlag">Hybrid Flag..</param>
        /// <param name="InlinePreview">Inline preview.</param>
        /// <param name="DefaultStyle">Display style.</param>
        /// <param name="DisplayNavigationControl">Display Navigation Control.</param>
        /// <param name="DisplayOrder">Display order.</param>
        /// <param name="AllowCloning">Allow Cloning.</param>
        /// <param name="NavigationControl">Navigation Control.</param>
        /// <param name="IconKey">Icon key.</param>
        /// <param name="Title">Widget title..</param>
        /// <param name="WidgetType">Widget type.</param>
        /// <param name="SortDirection">Sort direction.</param>
        /// <param name="WidgetGroup">Widget Group (activities/people/locations/).</param>
        /// <param name="AllowLinking">Allow linking.</param>
        /// <param name="SortBy">Sort By attribute.</param>
        /// <param name="Style">Display style.</param>
        /// <param name="Text">Widget description..</param>
        /// <param name="RotateInterval">Widget rotate interval.</param>
        /// <param name="State">State (Min/Max).</param>
        /// <param name="RuleId">Associated Rule Id.</param>
        /// <param name="UpdateFrequency">Widget Update frequency (dynamic/static).</param>
        /// <param name="WidgetState">Widget state.</param>
        /// <param name="DisplayFilterBar">Display filter bar.</param>
        /// <param name="AllowReshare">Allow Reshare.</param>
        public WidgetV2Record(bool? HasDraft = null, DisplayRecord Editor = null, DisplayRecord Creator = null, ObjectReadInfoRecord ExplicitReadCount = null, bool? FavoriteFlag = null, List<DisplayRecord> Destinations = null, string CopyDestination = null, bool? RefmeFlag = null, string Type = null, string Locale = null, int? Timeupdated = null, bool? ImportantFlag = null, string LifecycleState = null, int? Timecreated = null, int? DominantTime = null, bool? HideFlag = null, string Subtype = null, bool? PinFlag = null, bool? FollowFlag = null, string Key = null, int? PinTime = null, string Status = null, bool? HybridFlag = null, string InlinePreview = null, string DefaultStyle = null, bool? DisplayNavigationControl = null, int? DisplayOrder = null, bool? AllowCloning = null, string NavigationControl = null, string IconKey = null, string Title = null, string WidgetType = null, string SortDirection = null, string WidgetGroup = null, bool? AllowLinking = null, List<string> SortBy = null, List<string> Style = null, string Text = null, int? RotateInterval = null, int? State = null, string RuleId = null, string UpdateFrequency = null, string WidgetState = null, bool? DisplayFilterBar = null, bool? AllowReshare = null)
        {
            this.HasDraft = HasDraft;
            this.Editor = Editor;
            this.Creator = Creator;
            this.ExplicitReadCount = ExplicitReadCount;
            this.FavoriteFlag = FavoriteFlag;
            this.Destinations = Destinations;
            this.CopyDestination = CopyDestination;
            this.RefmeFlag = RefmeFlag;
            this.Type = Type;
            this.Locale = Locale;
            this.Timeupdated = Timeupdated;
            this.ImportantFlag = ImportantFlag;
            this.LifecycleState = LifecycleState;
            this.Timecreated = Timecreated;
            this.DominantTime = DominantTime;
            this.HideFlag = HideFlag;
            this.Subtype = Subtype;
            this.PinFlag = PinFlag;
            this.FollowFlag = FollowFlag;
            this.Key = Key;
            this.PinTime = PinTime;
            this.Status = Status;
            this.HybridFlag = HybridFlag;
            this.InlinePreview = InlinePreview;
            this.DefaultStyle = DefaultStyle;
            this.DisplayNavigationControl = DisplayNavigationControl;
            this.DisplayOrder = DisplayOrder;
            this.AllowCloning = AllowCloning;
            this.NavigationControl = NavigationControl;
            this.IconKey = IconKey;
            this.Title = Title;
            this.WidgetType = WidgetType;
            this.SortDirection = SortDirection;
            this.WidgetGroup = WidgetGroup;
            this.AllowLinking = AllowLinking;
            this.SortBy = SortBy;
            this.Style = Style;
            this.Text = Text;
            this.RotateInterval = RotateInterval;
            this.State = State;
            this.RuleId = RuleId;
            this.UpdateFrequency = UpdateFrequency;
            this.WidgetState = WidgetState;
            this.DisplayFilterBar = DisplayFilterBar;
            this.AllowReshare = AllowReshare;
        }
        
        /// <summary>
        /// the login user has comment drafts in this object.
        /// </summary>
        /// <value>the login user has comment drafts in this object.</value>
        [DataMember(Name="hasDraft", EmitDefaultValue=false)]
        public bool? HasDraft { get; set; }
        /// <summary>
        /// Gets or Sets Editor
        /// </summary>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public DisplayRecord Editor { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public DisplayRecord Creator { get; set; }
        /// <summary>
        /// Gets or Sets ExplicitReadCount
        /// </summary>
        [DataMember(Name="explicitReadCount", EmitDefaultValue=false)]
        public ObjectReadInfoRecord ExplicitReadCount { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="favoriteFlag", EmitDefaultValue=false)]
        public bool? FavoriteFlag { get; set; }
        /// <summary>
        /// Destinations where this object has been placed.
        /// </summary>
        /// <value>Destinations where this object has been placed.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<DisplayRecord> Destinations { get; set; }
        /// <summary>
        /// copy destination email address
        /// </summary>
        /// <value>copy destination email address</value>
        [DataMember(Name="copyDestination", EmitDefaultValue=false)]
        public string CopyDestination { get; set; }
        /// <summary>
        /// RefmeFlag.
        /// </summary>
        /// <value>RefmeFlag.</value>
        [DataMember(Name="refmeFlag", EmitDefaultValue=false)]
        public bool? RefmeFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Locale language.
        /// </summary>
        /// <value>Locale language.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Last update time for Space record.
        /// </summary>
        /// <value>Last update time for Space record.</value>
        [DataMember(Name="timeupdated", EmitDefaultValue=false)]
        public int? Timeupdated { get; set; }
        /// <summary>
        /// ImportantFlag.
        /// </summary>
        /// <value>ImportantFlag.</value>
        [DataMember(Name="importantFlag", EmitDefaultValue=false)]
        public bool? ImportantFlag { get; set; }
        /// <summary>
        /// lifecycle state.
        /// </summary>
        /// <value>lifecycle state.</value>
        [DataMember(Name="lifecycle_state", EmitDefaultValue=false)]
        public string LifecycleState { get; set; }
        /// <summary>
        /// Time created for Space record.
        /// </summary>
        /// <value>Time created for Space record.</value>
        [DataMember(Name="timecreated", EmitDefaultValue=false)]
        public int? Timecreated { get; set; }
        /// <summary>
        /// Dominant update time
        /// </summary>
        /// <value>Dominant update time</value>
        [DataMember(Name="dominant_time", EmitDefaultValue=false)]
        public int? DominantTime { get; set; }
        /// <summary>
        /// hide flag.
        /// </summary>
        /// <value>hide flag.</value>
        [DataMember(Name="hideFlag", EmitDefaultValue=false)]
        public bool? HideFlag { get; set; }
        /// <summary>
        /// Type of document record.
        /// </summary>
        /// <value>Type of document record.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// pin flag.
        /// </summary>
        /// <value>pin flag.</value>
        [DataMember(Name="pinFlag", EmitDefaultValue=false)]
        public bool? PinFlag { get; set; }
        /// <summary>
        /// FollowFlag.
        /// </summary>
        /// <value>FollowFlag.</value>
        [DataMember(Name="followFlag", EmitDefaultValue=false)]
        public bool? FollowFlag { get; set; }
        /// <summary>
        /// Key of document record.
        /// </summary>
        /// <value>Key of document record.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// pin time.
        /// </summary>
        /// <value>pin time.</value>
        [DataMember(Name="pinTime", EmitDefaultValue=false)]
        public int? PinTime { get; set; }
        /// <summary>
        /// Status.
        /// </summary>
        /// <value>Status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Hybrid Flag.
        /// </summary>
        /// <value>Hybrid Flag.</value>
        [DataMember(Name="hybridFlag", EmitDefaultValue=false)]
        public bool? HybridFlag { get; set; }
        /// <summary>
        /// Inline preview
        /// </summary>
        /// <value>Inline preview</value>
        [DataMember(Name="inlinePreview", EmitDefaultValue=false)]
        public string InlinePreview { get; set; }
        /// <summary>
        /// Display style
        /// </summary>
        /// <value>Display style</value>
        [DataMember(Name="defaultStyle", EmitDefaultValue=false)]
        public string DefaultStyle { get; set; }
        /// <summary>
        /// Display Navigation Control
        /// </summary>
        /// <value>Display Navigation Control</value>
        [DataMember(Name="displayNavigationControl", EmitDefaultValue=false)]
        public bool? DisplayNavigationControl { get; set; }
        /// <summary>
        /// Display order
        /// </summary>
        /// <value>Display order</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }
        /// <summary>
        /// Allow Cloning
        /// </summary>
        /// <value>Allow Cloning</value>
        [DataMember(Name="allowCloning", EmitDefaultValue=false)]
        public bool? AllowCloning { get; set; }
        /// <summary>
        /// Navigation Control
        /// </summary>
        /// <value>Navigation Control</value>
        [DataMember(Name="navigationControl", EmitDefaultValue=false)]
        public string NavigationControl { get; set; }
        /// <summary>
        /// Icon key
        /// </summary>
        /// <value>Icon key</value>
        [DataMember(Name="iconKey", EmitDefaultValue=false)]
        public string IconKey { get; set; }
        /// <summary>
        /// Widget title.
        /// </summary>
        /// <value>Widget title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Widget type
        /// </summary>
        /// <value>Widget type</value>
        [DataMember(Name="widgetType", EmitDefaultValue=false)]
        public string WidgetType { get; set; }
        /// <summary>
        /// Sort direction
        /// </summary>
        /// <value>Sort direction</value>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public string SortDirection { get; set; }
        /// <summary>
        /// Widget Group (activities/people/locations/)
        /// </summary>
        /// <value>Widget Group (activities/people/locations/)</value>
        [DataMember(Name="widgetGroup", EmitDefaultValue=false)]
        public string WidgetGroup { get; set; }
        /// <summary>
        /// Allow linking
        /// </summary>
        /// <value>Allow linking</value>
        [DataMember(Name="allowLinking", EmitDefaultValue=false)]
        public bool? AllowLinking { get; set; }
        /// <summary>
        /// Sort By attribute
        /// </summary>
        /// <value>Sort By attribute</value>
        [DataMember(Name="sortBy", EmitDefaultValue=false)]
        public List<string> SortBy { get; set; }
        /// <summary>
        /// Display style
        /// </summary>
        /// <value>Display style</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public List<string> Style { get; set; }
        /// <summary>
        /// Widget description.
        /// </summary>
        /// <value>Widget description.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Widget rotate interval
        /// </summary>
        /// <value>Widget rotate interval</value>
        [DataMember(Name="rotateInterval", EmitDefaultValue=false)]
        public int? RotateInterval { get; set; }
        /// <summary>
        /// State (Min/Max)
        /// </summary>
        /// <value>State (Min/Max)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }
        /// <summary>
        /// Associated Rule Id
        /// </summary>
        /// <value>Associated Rule Id</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }
        /// <summary>
        /// Widget Update frequency (dynamic/static)
        /// </summary>
        /// <value>Widget Update frequency (dynamic/static)</value>
        [DataMember(Name="updateFrequency", EmitDefaultValue=false)]
        public string UpdateFrequency { get; set; }
        /// <summary>
        /// Widget state
        /// </summary>
        /// <value>Widget state</value>
        [DataMember(Name="widgetState", EmitDefaultValue=false)]
        public string WidgetState { get; set; }
        /// <summary>
        /// Display filter bar
        /// </summary>
        /// <value>Display filter bar</value>
        [DataMember(Name="displayFilterBar", EmitDefaultValue=false)]
        public bool? DisplayFilterBar { get; set; }
        /// <summary>
        /// Allow Reshare
        /// </summary>
        /// <value>Allow Reshare</value>
        [DataMember(Name="allowReshare", EmitDefaultValue=false)]
        public bool? AllowReshare { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetV2Record {\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExplicitReadCount: ").Append(ExplicitReadCount).Append("\n");
            sb.Append("  FavoriteFlag: ").Append(FavoriteFlag).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  CopyDestination: ").Append(CopyDestination).Append("\n");
            sb.Append("  RefmeFlag: ").Append(RefmeFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Timeupdated: ").Append(Timeupdated).Append("\n");
            sb.Append("  ImportantFlag: ").Append(ImportantFlag).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  DominantTime: ").Append(DominantTime).Append("\n");
            sb.Append("  HideFlag: ").Append(HideFlag).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PinFlag: ").Append(PinFlag).Append("\n");
            sb.Append("  FollowFlag: ").Append(FollowFlag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PinTime: ").Append(PinTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HybridFlag: ").Append(HybridFlag).Append("\n");
            sb.Append("  InlinePreview: ").Append(InlinePreview).Append("\n");
            sb.Append("  DefaultStyle: ").Append(DefaultStyle).Append("\n");
            sb.Append("  DisplayNavigationControl: ").Append(DisplayNavigationControl).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  AllowCloning: ").Append(AllowCloning).Append("\n");
            sb.Append("  NavigationControl: ").Append(NavigationControl).Append("\n");
            sb.Append("  IconKey: ").Append(IconKey).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  WidgetType: ").Append(WidgetType).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  WidgetGroup: ").Append(WidgetGroup).Append("\n");
            sb.Append("  AllowLinking: ").Append(AllowLinking).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  RotateInterval: ").Append(RotateInterval).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  UpdateFrequency: ").Append(UpdateFrequency).Append("\n");
            sb.Append("  WidgetState: ").Append(WidgetState).Append("\n");
            sb.Append("  DisplayFilterBar: ").Append(DisplayFilterBar).Append("\n");
            sb.Append("  AllowReshare: ").Append(AllowReshare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WidgetV2Record);
        }

        /// <summary>
        /// Returns true if WidgetV2Record instances are equal
        /// </summary>
        /// <param name="other">Instance of WidgetV2Record to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetV2Record other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasDraft == other.HasDraft ||
                    this.HasDraft != null &&
                    this.HasDraft.Equals(other.HasDraft)
                ) && 
                (
                    this.Editor == other.Editor ||
                    this.Editor != null &&
                    this.Editor.Equals(other.Editor)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.ExplicitReadCount == other.ExplicitReadCount ||
                    this.ExplicitReadCount != null &&
                    this.ExplicitReadCount.Equals(other.ExplicitReadCount)
                ) && 
                (
                    this.FavoriteFlag == other.FavoriteFlag ||
                    this.FavoriteFlag != null &&
                    this.FavoriteFlag.Equals(other.FavoriteFlag)
                ) && 
                (
                    this.Destinations == other.Destinations ||
                    this.Destinations != null &&
                    this.Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    this.CopyDestination == other.CopyDestination ||
                    this.CopyDestination != null &&
                    this.CopyDestination.Equals(other.CopyDestination)
                ) && 
                (
                    this.RefmeFlag == other.RefmeFlag ||
                    this.RefmeFlag != null &&
                    this.RefmeFlag.Equals(other.RefmeFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Timeupdated == other.Timeupdated ||
                    this.Timeupdated != null &&
                    this.Timeupdated.Equals(other.Timeupdated)
                ) && 
                (
                    this.ImportantFlag == other.ImportantFlag ||
                    this.ImportantFlag != null &&
                    this.ImportantFlag.Equals(other.ImportantFlag)
                ) && 
                (
                    this.LifecycleState == other.LifecycleState ||
                    this.LifecycleState != null &&
                    this.LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    this.Timecreated == other.Timecreated ||
                    this.Timecreated != null &&
                    this.Timecreated.Equals(other.Timecreated)
                ) && 
                (
                    this.DominantTime == other.DominantTime ||
                    this.DominantTime != null &&
                    this.DominantTime.Equals(other.DominantTime)
                ) && 
                (
                    this.HideFlag == other.HideFlag ||
                    this.HideFlag != null &&
                    this.HideFlag.Equals(other.HideFlag)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.PinFlag == other.PinFlag ||
                    this.PinFlag != null &&
                    this.PinFlag.Equals(other.PinFlag)
                ) && 
                (
                    this.FollowFlag == other.FollowFlag ||
                    this.FollowFlag != null &&
                    this.FollowFlag.Equals(other.FollowFlag)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PinTime == other.PinTime ||
                    this.PinTime != null &&
                    this.PinTime.Equals(other.PinTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HybridFlag == other.HybridFlag ||
                    this.HybridFlag != null &&
                    this.HybridFlag.Equals(other.HybridFlag)
                ) && 
                (
                    this.InlinePreview == other.InlinePreview ||
                    this.InlinePreview != null &&
                    this.InlinePreview.Equals(other.InlinePreview)
                ) && 
                (
                    this.DefaultStyle == other.DefaultStyle ||
                    this.DefaultStyle != null &&
                    this.DefaultStyle.Equals(other.DefaultStyle)
                ) && 
                (
                    this.DisplayNavigationControl == other.DisplayNavigationControl ||
                    this.DisplayNavigationControl != null &&
                    this.DisplayNavigationControl.Equals(other.DisplayNavigationControl)
                ) && 
                (
                    this.DisplayOrder == other.DisplayOrder ||
                    this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(other.DisplayOrder)
                ) && 
                (
                    this.AllowCloning == other.AllowCloning ||
                    this.AllowCloning != null &&
                    this.AllowCloning.Equals(other.AllowCloning)
                ) && 
                (
                    this.NavigationControl == other.NavigationControl ||
                    this.NavigationControl != null &&
                    this.NavigationControl.Equals(other.NavigationControl)
                ) && 
                (
                    this.IconKey == other.IconKey ||
                    this.IconKey != null &&
                    this.IconKey.Equals(other.IconKey)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.WidgetType == other.WidgetType ||
                    this.WidgetType != null &&
                    this.WidgetType.Equals(other.WidgetType)
                ) && 
                (
                    this.SortDirection == other.SortDirection ||
                    this.SortDirection != null &&
                    this.SortDirection.Equals(other.SortDirection)
                ) && 
                (
                    this.WidgetGroup == other.WidgetGroup ||
                    this.WidgetGroup != null &&
                    this.WidgetGroup.Equals(other.WidgetGroup)
                ) && 
                (
                    this.AllowLinking == other.AllowLinking ||
                    this.AllowLinking != null &&
                    this.AllowLinking.Equals(other.AllowLinking)
                ) && 
                (
                    this.SortBy == other.SortBy ||
                    this.SortBy != null &&
                    this.SortBy.SequenceEqual(other.SortBy)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.SequenceEqual(other.Style)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.RotateInterval == other.RotateInterval ||
                    this.RotateInterval != null &&
                    this.RotateInterval.Equals(other.RotateInterval)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.RuleId == other.RuleId ||
                    this.RuleId != null &&
                    this.RuleId.Equals(other.RuleId)
                ) && 
                (
                    this.UpdateFrequency == other.UpdateFrequency ||
                    this.UpdateFrequency != null &&
                    this.UpdateFrequency.Equals(other.UpdateFrequency)
                ) && 
                (
                    this.WidgetState == other.WidgetState ||
                    this.WidgetState != null &&
                    this.WidgetState.Equals(other.WidgetState)
                ) && 
                (
                    this.DisplayFilterBar == other.DisplayFilterBar ||
                    this.DisplayFilterBar != null &&
                    this.DisplayFilterBar.Equals(other.DisplayFilterBar)
                ) && 
                (
                    this.AllowReshare == other.AllowReshare ||
                    this.AllowReshare != null &&
                    this.AllowReshare.Equals(other.AllowReshare)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasDraft != null)
                    hash = hash * 59 + this.HasDraft.GetHashCode();
                if (this.Editor != null)
                    hash = hash * 59 + this.Editor.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.ExplicitReadCount != null)
                    hash = hash * 59 + this.ExplicitReadCount.GetHashCode();
                if (this.FavoriteFlag != null)
                    hash = hash * 59 + this.FavoriteFlag.GetHashCode();
                if (this.Destinations != null)
                    hash = hash * 59 + this.Destinations.GetHashCode();
                if (this.CopyDestination != null)
                    hash = hash * 59 + this.CopyDestination.GetHashCode();
                if (this.RefmeFlag != null)
                    hash = hash * 59 + this.RefmeFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Timeupdated != null)
                    hash = hash * 59 + this.Timeupdated.GetHashCode();
                if (this.ImportantFlag != null)
                    hash = hash * 59 + this.ImportantFlag.GetHashCode();
                if (this.LifecycleState != null)
                    hash = hash * 59 + this.LifecycleState.GetHashCode();
                if (this.Timecreated != null)
                    hash = hash * 59 + this.Timecreated.GetHashCode();
                if (this.DominantTime != null)
                    hash = hash * 59 + this.DominantTime.GetHashCode();
                if (this.HideFlag != null)
                    hash = hash * 59 + this.HideFlag.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.PinFlag != null)
                    hash = hash * 59 + this.PinFlag.GetHashCode();
                if (this.FollowFlag != null)
                    hash = hash * 59 + this.FollowFlag.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PinTime != null)
                    hash = hash * 59 + this.PinTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HybridFlag != null)
                    hash = hash * 59 + this.HybridFlag.GetHashCode();
                if (this.InlinePreview != null)
                    hash = hash * 59 + this.InlinePreview.GetHashCode();
                if (this.DefaultStyle != null)
                    hash = hash * 59 + this.DefaultStyle.GetHashCode();
                if (this.DisplayNavigationControl != null)
                    hash = hash * 59 + this.DisplayNavigationControl.GetHashCode();
                if (this.DisplayOrder != null)
                    hash = hash * 59 + this.DisplayOrder.GetHashCode();
                if (this.AllowCloning != null)
                    hash = hash * 59 + this.AllowCloning.GetHashCode();
                if (this.NavigationControl != null)
                    hash = hash * 59 + this.NavigationControl.GetHashCode();
                if (this.IconKey != null)
                    hash = hash * 59 + this.IconKey.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.WidgetType != null)
                    hash = hash * 59 + this.WidgetType.GetHashCode();
                if (this.SortDirection != null)
                    hash = hash * 59 + this.SortDirection.GetHashCode();
                if (this.WidgetGroup != null)
                    hash = hash * 59 + this.WidgetGroup.GetHashCode();
                if (this.AllowLinking != null)
                    hash = hash * 59 + this.AllowLinking.GetHashCode();
                if (this.SortBy != null)
                    hash = hash * 59 + this.SortBy.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.RotateInterval != null)
                    hash = hash * 59 + this.RotateInterval.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.RuleId != null)
                    hash = hash * 59 + this.RuleId.GetHashCode();
                if (this.UpdateFrequency != null)
                    hash = hash * 59 + this.UpdateFrequency.GetHashCode();
                if (this.WidgetState != null)
                    hash = hash * 59 + this.WidgetState.GetHashCode();
                if (this.DisplayFilterBar != null)
                    hash = hash * 59 + this.DisplayFilterBar.GetHashCode();
                if (this.AllowReshare != null)
                    hash = hash * 59 + this.AllowReshare.GetHashCode();
                return hash;
            }
        }
    }

}
