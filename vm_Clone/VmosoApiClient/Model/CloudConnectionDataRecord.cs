/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// CloudConnectionDataRecord
    /// </summary>
    [DataContract]
    public partial class CloudConnectionDataRecord :  IEquatable<CloudConnectionDataRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudConnectionDataRecord" /> class.
        /// </summary>
        /// <param name="Mode">Mode.</param>
        /// <param name="RedirectUri">redirectUri.</param>
        /// <param name="ReqParams">Request Parameters.</param>
        /// <param name="Dk">Developer key.</param>
        /// <param name="Cid">Client ID.</param>
        public CloudConnectionDataRecord(string Mode = null, string RedirectUri = null, string ReqParams = null, string Dk = null, string Cid = null)
        {
            this.Mode = Mode;
            this.RedirectUri = RedirectUri;
            this.ReqParams = ReqParams;
            this.Dk = Dk;
            this.Cid = Cid;
        }
        
        /// <summary>
        /// Mode
        /// </summary>
        /// <value>Mode</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }
        /// <summary>
        /// redirectUri
        /// </summary>
        /// <value>redirectUri</value>
        [DataMember(Name="redirectUri", EmitDefaultValue=false)]
        public string RedirectUri { get; set; }
        /// <summary>
        /// Request Parameters
        /// </summary>
        /// <value>Request Parameters</value>
        [DataMember(Name="req_params", EmitDefaultValue=false)]
        public string ReqParams { get; set; }
        /// <summary>
        /// Developer key
        /// </summary>
        /// <value>Developer key</value>
        [DataMember(Name="dk", EmitDefaultValue=false)]
        public string Dk { get; set; }
        /// <summary>
        /// Client ID
        /// </summary>
        /// <value>Client ID</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public string Cid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloudConnectionDataRecord {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  ReqParams: ").Append(ReqParams).Append("\n");
            sb.Append("  Dk: ").Append(Dk).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CloudConnectionDataRecord);
        }

        /// <summary>
        /// Returns true if CloudConnectionDataRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of CloudConnectionDataRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloudConnectionDataRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.RedirectUri == other.RedirectUri ||
                    this.RedirectUri != null &&
                    this.RedirectUri.Equals(other.RedirectUri)
                ) && 
                (
                    this.ReqParams == other.ReqParams ||
                    this.ReqParams != null &&
                    this.ReqParams.Equals(other.ReqParams)
                ) && 
                (
                    this.Dk == other.Dk ||
                    this.Dk != null &&
                    this.Dk.Equals(other.Dk)
                ) && 
                (
                    this.Cid == other.Cid ||
                    this.Cid != null &&
                    this.Cid.Equals(other.Cid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.RedirectUri != null)
                    hash = hash * 59 + this.RedirectUri.GetHashCode();
                if (this.ReqParams != null)
                    hash = hash * 59 + this.ReqParams.GetHashCode();
                if (this.Dk != null)
                    hash = hash * 59 + this.Dk.GetHashCode();
                if (this.Cid != null)
                    hash = hash * 59 + this.Cid.GetHashCode();
                return hash;
            }
        }
    }

}
