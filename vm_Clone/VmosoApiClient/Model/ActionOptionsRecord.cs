/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// ActionOptionsRecord
    /// </summary>
    [DataContract]
    public partial class ActionOptionsRecord :  IEquatable<ActionOptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionOptionsRecord" /> class.
        /// </summary>
        /// <param name="ReadStatusFilter">all/read/unread.</param>
        /// <param name="SortAttr">ACTIVITY_TIME.</param>
        /// <param name="ReturnNew">whether returns the latest;.</param>
        /// <param name="Subtype">SPARC subtype.</param>
        /// <param name="FlagFilter">all/refme/follow.</param>
        /// <param name="CreatorFilter">all/byMe/toMe.</param>
        /// <param name="RelevanceFlag">all/most/least.</param>
        /// <param name="Type">SPARC type.</param>
        /// <param name="SortDir">DESC/ASC.</param>
        public ActionOptionsRecord(string ReadStatusFilter = null, string SortAttr = null, bool? ReturnNew = null, string Subtype = null, string FlagFilter = null, string CreatorFilter = null, string RelevanceFlag = null, string Type = null, string SortDir = null)
        {
            this.ReadStatusFilter = ReadStatusFilter;
            this.SortAttr = SortAttr;
            this.ReturnNew = ReturnNew;
            this.Subtype = Subtype;
            this.FlagFilter = FlagFilter;
            this.CreatorFilter = CreatorFilter;
            this.RelevanceFlag = RelevanceFlag;
            this.Type = Type;
            this.SortDir = SortDir;
        }
        
        /// <summary>
        /// all/read/unread
        /// </summary>
        /// <value>all/read/unread</value>
        [DataMember(Name="readStatusFilter", EmitDefaultValue=false)]
        public string ReadStatusFilter { get; set; }
        /// <summary>
        /// ACTIVITY_TIME
        /// </summary>
        /// <value>ACTIVITY_TIME</value>
        [DataMember(Name="sort_attr", EmitDefaultValue=false)]
        public string SortAttr { get; set; }
        /// <summary>
        /// whether returns the latest;
        /// </summary>
        /// <value>whether returns the latest;</value>
        [DataMember(Name="returnNew", EmitDefaultValue=false)]
        public bool? ReturnNew { get; set; }
        /// <summary>
        /// SPARC subtype
        /// </summary>
        /// <value>SPARC subtype</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }
        /// <summary>
        /// all/refme/follow
        /// </summary>
        /// <value>all/refme/follow</value>
        [DataMember(Name="flagFilter", EmitDefaultValue=false)]
        public string FlagFilter { get; set; }
        /// <summary>
        /// all/byMe/toMe
        /// </summary>
        /// <value>all/byMe/toMe</value>
        [DataMember(Name="creatorFilter", EmitDefaultValue=false)]
        public string CreatorFilter { get; set; }
        /// <summary>
        /// all/most/least
        /// </summary>
        /// <value>all/most/least</value>
        [DataMember(Name="relevanceFlag", EmitDefaultValue=false)]
        public string RelevanceFlag { get; set; }
        /// <summary>
        /// SPARC type
        /// </summary>
        /// <value>SPARC type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// DESC/ASC
        /// </summary>
        /// <value>DESC/ASC</value>
        [DataMember(Name="sort_dir", EmitDefaultValue=false)]
        public string SortDir { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionOptionsRecord {\n");
            sb.Append("  ReadStatusFilter: ").Append(ReadStatusFilter).Append("\n");
            sb.Append("  SortAttr: ").Append(SortAttr).Append("\n");
            sb.Append("  ReturnNew: ").Append(ReturnNew).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  FlagFilter: ").Append(FlagFilter).Append("\n");
            sb.Append("  CreatorFilter: ").Append(CreatorFilter).Append("\n");
            sb.Append("  RelevanceFlag: ").Append(RelevanceFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SortDir: ").Append(SortDir).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ActionOptionsRecord);
        }

        /// <summary>
        /// Returns true if ActionOptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ActionOptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionOptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReadStatusFilter == other.ReadStatusFilter ||
                    this.ReadStatusFilter != null &&
                    this.ReadStatusFilter.Equals(other.ReadStatusFilter)
                ) && 
                (
                    this.SortAttr == other.SortAttr ||
                    this.SortAttr != null &&
                    this.SortAttr.Equals(other.SortAttr)
                ) && 
                (
                    this.ReturnNew == other.ReturnNew ||
                    this.ReturnNew != null &&
                    this.ReturnNew.Equals(other.ReturnNew)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.FlagFilter == other.FlagFilter ||
                    this.FlagFilter != null &&
                    this.FlagFilter.Equals(other.FlagFilter)
                ) && 
                (
                    this.CreatorFilter == other.CreatorFilter ||
                    this.CreatorFilter != null &&
                    this.CreatorFilter.Equals(other.CreatorFilter)
                ) && 
                (
                    this.RelevanceFlag == other.RelevanceFlag ||
                    this.RelevanceFlag != null &&
                    this.RelevanceFlag.Equals(other.RelevanceFlag)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SortDir == other.SortDir ||
                    this.SortDir != null &&
                    this.SortDir.Equals(other.SortDir)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReadStatusFilter != null)
                    hash = hash * 59 + this.ReadStatusFilter.GetHashCode();
                if (this.SortAttr != null)
                    hash = hash * 59 + this.SortAttr.GetHashCode();
                if (this.ReturnNew != null)
                    hash = hash * 59 + this.ReturnNew.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.FlagFilter != null)
                    hash = hash * 59 + this.FlagFilter.GetHashCode();
                if (this.CreatorFilter != null)
                    hash = hash * 59 + this.CreatorFilter.GetHashCode();
                if (this.RelevanceFlag != null)
                    hash = hash * 59 + this.RelevanceFlag.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SortDir != null)
                    hash = hash * 59 + this.SortDir.GetHashCode();
                return hash;
            }
        }
    }

}
