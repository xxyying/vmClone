/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// NewUnreadTilesCountOptionRecord
    /// </summary>
    [DataContract]
    public partial class NewUnreadTilesCountOptionRecord :  IEquatable<NewUnreadTilesCountOptionRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewUnreadTilesCountOptionRecord" /> class.
        /// </summary>
        /// <param name="File">Whether to get new unread tiles count of File.</param>
        /// <param name="Task">Whether to get new unread tiles count of Task.</param>
        /// <param name="Activity">Whether to get new unread tiles count of Activity.</param>
        /// <param name="Post">Whether to get new unread tiles count of Post.</param>
        /// <param name="Workflow">Whether to get new unread tiles count of Workflow.</param>
        /// <param name="Chat">Whether to get new unread tiles count of Chat.</param>
        /// <param name="Contact">Whether to get new unread tiles count of Contact.</param>
        /// <param name="Location">Whether to get new unread tiles count of Location.</param>
        /// <param name="Time">Whether to get new unread tiles count of Time.</param>
        /// <param name="Content">Whether to get new unread tiles count of Content.</param>
        public NewUnreadTilesCountOptionRecord(bool? File = null, bool? Task = null, bool? Activity = null, bool? Post = null, bool? Workflow = null, bool? Chat = null, bool? Contact = null, bool? Location = null, bool? Time = null, bool? Content = null)
        {
            this.File = File;
            this.Task = Task;
            this.Activity = Activity;
            this.Post = Post;
            this.Workflow = Workflow;
            this.Chat = Chat;
            this.Contact = Contact;
            this.Location = Location;
            this.Time = Time;
            this.Content = Content;
        }
        
        /// <summary>
        /// Whether to get new unread tiles count of File
        /// </summary>
        /// <value>Whether to get new unread tiles count of File</value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public bool? File { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Task
        /// </summary>
        /// <value>Whether to get new unread tiles count of Task</value>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public bool? Task { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Activity
        /// </summary>
        /// <value>Whether to get new unread tiles count of Activity</value>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public bool? Activity { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Post
        /// </summary>
        /// <value>Whether to get new unread tiles count of Post</value>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public bool? Post { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Workflow
        /// </summary>
        /// <value>Whether to get new unread tiles count of Workflow</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public bool? Workflow { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Chat
        /// </summary>
        /// <value>Whether to get new unread tiles count of Chat</value>
        [DataMember(Name="chat", EmitDefaultValue=false)]
        public bool? Chat { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Contact
        /// </summary>
        /// <value>Whether to get new unread tiles count of Contact</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public bool? Contact { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Location
        /// </summary>
        /// <value>Whether to get new unread tiles count of Location</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public bool? Location { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Time
        /// </summary>
        /// <value>Whether to get new unread tiles count of Time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public bool? Time { get; set; }
        /// <summary>
        /// Whether to get new unread tiles count of Content
        /// </summary>
        /// <value>Whether to get new unread tiles count of Content</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public bool? Content { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewUnreadTilesCountOptionRecord {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NewUnreadTilesCountOptionRecord);
        }

        /// <summary>
        /// Returns true if NewUnreadTilesCountOptionRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of NewUnreadTilesCountOptionRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewUnreadTilesCountOptionRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.File == other.File ||
                    this.File != null &&
                    this.File.Equals(other.File)
                ) && 
                (
                    this.Task == other.Task ||
                    this.Task != null &&
                    this.Task.Equals(other.Task)
                ) && 
                (
                    this.Activity == other.Activity ||
                    this.Activity != null &&
                    this.Activity.Equals(other.Activity)
                ) && 
                (
                    this.Post == other.Post ||
                    this.Post != null &&
                    this.Post.Equals(other.Post)
                ) && 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.Equals(other.Workflow)
                ) && 
                (
                    this.Chat == other.Chat ||
                    this.Chat != null &&
                    this.Chat.Equals(other.Chat)
                ) && 
                (
                    this.Contact == other.Contact ||
                    this.Contact != null &&
                    this.Contact.Equals(other.Contact)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.File != null)
                    hash = hash * 59 + this.File.GetHashCode();
                if (this.Task != null)
                    hash = hash * 59 + this.Task.GetHashCode();
                if (this.Activity != null)
                    hash = hash * 59 + this.Activity.GetHashCode();
                if (this.Post != null)
                    hash = hash * 59 + this.Post.GetHashCode();
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                if (this.Chat != null)
                    hash = hash * 59 + this.Chat.GetHashCode();
                if (this.Contact != null)
                    hash = hash * 59 + this.Contact.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }
    }

}
