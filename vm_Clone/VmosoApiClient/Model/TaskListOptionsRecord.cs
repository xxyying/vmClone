/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// TaskListOptionsRecord
    /// </summary>
    [DataContract]
    public partial class TaskListOptionsRecord : SearchListOptionsRecord,  IEquatable<TaskListOptionsRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListOptionsRecord" /> class.
        /// </summary>
        /// <param name="FolderKey">Type of ListOptions record..</param>
        /// <param name="Format">Format.</param>
        /// <param name="Type">Type of ListOptions record..</param>
        /// <param name="SearchString">retrieve items by the string..</param>
        /// <param name="Search">.</param>
        /// <param name="SortField">.</param>
        /// <param name="TaskKey">.</param>
        /// <param name="FocusKey">.</param>
        /// <param name="ApisFilter">.</param>
        /// <param name="CreationStartTime">.</param>
        /// <param name="Ascending">.</param>
        /// <param name="DueEndTime">.</param>
        /// <param name="CreationInterval">.</param>
        /// <param name="DueStartTime">.</param>
        /// <param name="CommonUserKey">.</param>
        /// <param name="CreationEndTime">.</param>
        /// <param name="UpdateInterval">.</param>
        /// <param name="AllUserKeys">.</param>
        /// <param name="UpdateStartTime">.</param>
        /// <param name="UpdateEndTime">.</param>
        /// <param name="DueInterval">.</param>
        /// <param name="InvitationFlag">.</param>
        /// <param name="TaskStatus">.</param>
        public TaskListOptionsRecord(string FolderKey = null, FormatRecord Format = null, string Type = null, string SearchString = null, string Search = null, string SortField = null, string TaskKey = null, string FocusKey = null, string ApisFilter = null, string CreationStartTime = null, string Ascending = null, string DueEndTime = null, string CreationInterval = null, string DueStartTime = null, string CommonUserKey = null, string CreationEndTime = null, string UpdateInterval = null, string AllUserKeys = null, string UpdateStartTime = null, string UpdateEndTime = null, string DueInterval = null, string InvitationFlag = null, string TaskStatus = null)
        {
            this.FolderKey = FolderKey;
            this.Format = Format;
            this.Type = Type;
            this.SearchString = SearchString;
            this.Search = Search;
            this.SortField = SortField;
            this.TaskKey = TaskKey;
            this.FocusKey = FocusKey;
            this.ApisFilter = ApisFilter;
            this.CreationStartTime = CreationStartTime;
            this.Ascending = Ascending;
            this.DueEndTime = DueEndTime;
            this.CreationInterval = CreationInterval;
            this.DueStartTime = DueStartTime;
            this.CommonUserKey = CommonUserKey;
            this.CreationEndTime = CreationEndTime;
            this.UpdateInterval = UpdateInterval;
            this.AllUserKeys = AllUserKeys;
            this.UpdateStartTime = UpdateStartTime;
            this.UpdateEndTime = UpdateEndTime;
            this.DueInterval = DueInterval;
            this.InvitationFlag = InvitationFlag;
            this.TaskStatus = TaskStatus;
        }
        
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="folderKey", EmitDefaultValue=false)]
        public string FolderKey { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatRecord Format { get; set; }
        /// <summary>
        /// Type of ListOptions record.
        /// </summary>
        /// <value>Type of ListOptions record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// retrieve items by the string.
        /// </summary>
        /// <value>retrieve items by the string.</value>
        [DataMember(Name="search_string", EmitDefaultValue=false)]
        public string SearchString { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="search", EmitDefaultValue=false)]
        public string Search { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="sortField", EmitDefaultValue=false)]
        public string SortField { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="taskKey", EmitDefaultValue=false)]
        public string TaskKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="focusKey", EmitDefaultValue=false)]
        public string FocusKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="apisFilter", EmitDefaultValue=false)]
        public string ApisFilter { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="creationStartTime", EmitDefaultValue=false)]
        public string CreationStartTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ascending", EmitDefaultValue=false)]
        public string Ascending { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="dueEndTime", EmitDefaultValue=false)]
        public string DueEndTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="creationInterval", EmitDefaultValue=false)]
        public string CreationInterval { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="dueStartTime", EmitDefaultValue=false)]
        public string DueStartTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="commonUserKey", EmitDefaultValue=false)]
        public string CommonUserKey { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="creationEndTime", EmitDefaultValue=false)]
        public string CreationEndTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="updateInterval", EmitDefaultValue=false)]
        public string UpdateInterval { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allUserKeys", EmitDefaultValue=false)]
        public string AllUserKeys { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="updateStartTime", EmitDefaultValue=false)]
        public string UpdateStartTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="updateEndTime", EmitDefaultValue=false)]
        public string UpdateEndTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="dueInterval", EmitDefaultValue=false)]
        public string DueInterval { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="invitationFlag", EmitDefaultValue=false)]
        public string InvitationFlag { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="taskStatus", EmitDefaultValue=false)]
        public string TaskStatus { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskListOptionsRecord {\n");
            sb.Append("  FolderKey: ").Append(FolderKey).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SearchString: ").Append(SearchString).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  TaskKey: ").Append(TaskKey).Append("\n");
            sb.Append("  FocusKey: ").Append(FocusKey).Append("\n");
            sb.Append("  ApisFilter: ").Append(ApisFilter).Append("\n");
            sb.Append("  CreationStartTime: ").Append(CreationStartTime).Append("\n");
            sb.Append("  Ascending: ").Append(Ascending).Append("\n");
            sb.Append("  DueEndTime: ").Append(DueEndTime).Append("\n");
            sb.Append("  CreationInterval: ").Append(CreationInterval).Append("\n");
            sb.Append("  DueStartTime: ").Append(DueStartTime).Append("\n");
            sb.Append("  CommonUserKey: ").Append(CommonUserKey).Append("\n");
            sb.Append("  CreationEndTime: ").Append(CreationEndTime).Append("\n");
            sb.Append("  UpdateInterval: ").Append(UpdateInterval).Append("\n");
            sb.Append("  AllUserKeys: ").Append(AllUserKeys).Append("\n");
            sb.Append("  UpdateStartTime: ").Append(UpdateStartTime).Append("\n");
            sb.Append("  UpdateEndTime: ").Append(UpdateEndTime).Append("\n");
            sb.Append("  DueInterval: ").Append(DueInterval).Append("\n");
            sb.Append("  InvitationFlag: ").Append(InvitationFlag).Append("\n");
            sb.Append("  TaskStatus: ").Append(TaskStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskListOptionsRecord);
        }

        /// <summary>
        /// Returns true if TaskListOptionsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskListOptionsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskListOptionsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FolderKey == other.FolderKey ||
                    this.FolderKey != null &&
                    this.FolderKey.Equals(other.FolderKey)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SearchString == other.SearchString ||
                    this.SearchString != null &&
                    this.SearchString.Equals(other.SearchString)
                ) && 
                (
                    this.Search == other.Search ||
                    this.Search != null &&
                    this.Search.Equals(other.Search)
                ) && 
                (
                    this.SortField == other.SortField ||
                    this.SortField != null &&
                    this.SortField.Equals(other.SortField)
                ) && 
                (
                    this.TaskKey == other.TaskKey ||
                    this.TaskKey != null &&
                    this.TaskKey.Equals(other.TaskKey)
                ) && 
                (
                    this.FocusKey == other.FocusKey ||
                    this.FocusKey != null &&
                    this.FocusKey.Equals(other.FocusKey)
                ) && 
                (
                    this.ApisFilter == other.ApisFilter ||
                    this.ApisFilter != null &&
                    this.ApisFilter.Equals(other.ApisFilter)
                ) && 
                (
                    this.CreationStartTime == other.CreationStartTime ||
                    this.CreationStartTime != null &&
                    this.CreationStartTime.Equals(other.CreationStartTime)
                ) && 
                (
                    this.Ascending == other.Ascending ||
                    this.Ascending != null &&
                    this.Ascending.Equals(other.Ascending)
                ) && 
                (
                    this.DueEndTime == other.DueEndTime ||
                    this.DueEndTime != null &&
                    this.DueEndTime.Equals(other.DueEndTime)
                ) && 
                (
                    this.CreationInterval == other.CreationInterval ||
                    this.CreationInterval != null &&
                    this.CreationInterval.Equals(other.CreationInterval)
                ) && 
                (
                    this.DueStartTime == other.DueStartTime ||
                    this.DueStartTime != null &&
                    this.DueStartTime.Equals(other.DueStartTime)
                ) && 
                (
                    this.CommonUserKey == other.CommonUserKey ||
                    this.CommonUserKey != null &&
                    this.CommonUserKey.Equals(other.CommonUserKey)
                ) && 
                (
                    this.CreationEndTime == other.CreationEndTime ||
                    this.CreationEndTime != null &&
                    this.CreationEndTime.Equals(other.CreationEndTime)
                ) && 
                (
                    this.UpdateInterval == other.UpdateInterval ||
                    this.UpdateInterval != null &&
                    this.UpdateInterval.Equals(other.UpdateInterval)
                ) && 
                (
                    this.AllUserKeys == other.AllUserKeys ||
                    this.AllUserKeys != null &&
                    this.AllUserKeys.Equals(other.AllUserKeys)
                ) && 
                (
                    this.UpdateStartTime == other.UpdateStartTime ||
                    this.UpdateStartTime != null &&
                    this.UpdateStartTime.Equals(other.UpdateStartTime)
                ) && 
                (
                    this.UpdateEndTime == other.UpdateEndTime ||
                    this.UpdateEndTime != null &&
                    this.UpdateEndTime.Equals(other.UpdateEndTime)
                ) && 
                (
                    this.DueInterval == other.DueInterval ||
                    this.DueInterval != null &&
                    this.DueInterval.Equals(other.DueInterval)
                ) && 
                (
                    this.InvitationFlag == other.InvitationFlag ||
                    this.InvitationFlag != null &&
                    this.InvitationFlag.Equals(other.InvitationFlag)
                ) && 
                (
                    this.TaskStatus == other.TaskStatus ||
                    this.TaskStatus != null &&
                    this.TaskStatus.Equals(other.TaskStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FolderKey != null)
                    hash = hash * 59 + this.FolderKey.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.SearchString != null)
                    hash = hash * 59 + this.SearchString.GetHashCode();
                if (this.Search != null)
                    hash = hash * 59 + this.Search.GetHashCode();
                if (this.SortField != null)
                    hash = hash * 59 + this.SortField.GetHashCode();
                if (this.TaskKey != null)
                    hash = hash * 59 + this.TaskKey.GetHashCode();
                if (this.FocusKey != null)
                    hash = hash * 59 + this.FocusKey.GetHashCode();
                if (this.ApisFilter != null)
                    hash = hash * 59 + this.ApisFilter.GetHashCode();
                if (this.CreationStartTime != null)
                    hash = hash * 59 + this.CreationStartTime.GetHashCode();
                if (this.Ascending != null)
                    hash = hash * 59 + this.Ascending.GetHashCode();
                if (this.DueEndTime != null)
                    hash = hash * 59 + this.DueEndTime.GetHashCode();
                if (this.CreationInterval != null)
                    hash = hash * 59 + this.CreationInterval.GetHashCode();
                if (this.DueStartTime != null)
                    hash = hash * 59 + this.DueStartTime.GetHashCode();
                if (this.CommonUserKey != null)
                    hash = hash * 59 + this.CommonUserKey.GetHashCode();
                if (this.CreationEndTime != null)
                    hash = hash * 59 + this.CreationEndTime.GetHashCode();
                if (this.UpdateInterval != null)
                    hash = hash * 59 + this.UpdateInterval.GetHashCode();
                if (this.AllUserKeys != null)
                    hash = hash * 59 + this.AllUserKeys.GetHashCode();
                if (this.UpdateStartTime != null)
                    hash = hash * 59 + this.UpdateStartTime.GetHashCode();
                if (this.UpdateEndTime != null)
                    hash = hash * 59 + this.UpdateEndTime.GetHashCode();
                if (this.DueInterval != null)
                    hash = hash * 59 + this.DueInterval.GetHashCode();
                if (this.InvitationFlag != null)
                    hash = hash * 59 + this.InvitationFlag.GetHashCode();
                if (this.TaskStatus != null)
                    hash = hash * 59 + this.TaskStatus.GetHashCode();
                return hash;
            }
        }
    }

}
