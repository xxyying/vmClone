/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VmosoApiClient.Model
{
    /// <summary>
    /// TaskParticipantRelationshipRecord
    /// </summary>
    [DataContract]
    public partial class TaskParticipantRelationshipRecord :  IEquatable<TaskParticipantRelationshipRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskParticipantRelationshipRecord" /> class.
        /// </summary>
        /// <param name="IsTo">.</param>
        /// <param name="IsBcc">.</param>
        /// <param name="IsScc">.</param>
        /// <param name="IsOwner">.</param>
        /// <param name="IsCc">.</param>
        /// <param name="IsParticipant">.</param>
        /// <param name="Key">.</param>
        public TaskParticipantRelationshipRecord(bool? IsTo = null, bool? IsBcc = null, bool? IsScc = null, bool? IsOwner = null, bool? IsCc = null, bool? IsParticipant = null, string Key = null)
        {
            this.IsTo = IsTo;
            this.IsBcc = IsBcc;
            this.IsScc = IsScc;
            this.IsOwner = IsOwner;
            this.IsCc = IsCc;
            this.IsParticipant = IsParticipant;
            this.Key = Key;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isTo", EmitDefaultValue=false)]
        public bool? IsTo { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isBcc", EmitDefaultValue=false)]
        public bool? IsBcc { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isScc", EmitDefaultValue=false)]
        public bool? IsScc { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isOwner", EmitDefaultValue=false)]
        public bool? IsOwner { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isCc", EmitDefaultValue=false)]
        public bool? IsCc { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isParticipant", EmitDefaultValue=false)]
        public bool? IsParticipant { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskParticipantRelationshipRecord {\n");
            sb.Append("  IsTo: ").Append(IsTo).Append("\n");
            sb.Append("  IsBcc: ").Append(IsBcc).Append("\n");
            sb.Append("  IsScc: ").Append(IsScc).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  IsCc: ").Append(IsCc).Append("\n");
            sb.Append("  IsParticipant: ").Append(IsParticipant).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskParticipantRelationshipRecord);
        }

        /// <summary>
        /// Returns true if TaskParticipantRelationshipRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskParticipantRelationshipRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskParticipantRelationshipRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsTo == other.IsTo ||
                    this.IsTo != null &&
                    this.IsTo.Equals(other.IsTo)
                ) && 
                (
                    this.IsBcc == other.IsBcc ||
                    this.IsBcc != null &&
                    this.IsBcc.Equals(other.IsBcc)
                ) && 
                (
                    this.IsScc == other.IsScc ||
                    this.IsScc != null &&
                    this.IsScc.Equals(other.IsScc)
                ) && 
                (
                    this.IsOwner == other.IsOwner ||
                    this.IsOwner != null &&
                    this.IsOwner.Equals(other.IsOwner)
                ) && 
                (
                    this.IsCc == other.IsCc ||
                    this.IsCc != null &&
                    this.IsCc.Equals(other.IsCc)
                ) && 
                (
                    this.IsParticipant == other.IsParticipant ||
                    this.IsParticipant != null &&
                    this.IsParticipant.Equals(other.IsParticipant)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsTo != null)
                    hash = hash * 59 + this.IsTo.GetHashCode();
                if (this.IsBcc != null)
                    hash = hash * 59 + this.IsBcc.GetHashCode();
                if (this.IsScc != null)
                    hash = hash * 59 + this.IsScc.GetHashCode();
                if (this.IsOwner != null)
                    hash = hash * 59 + this.IsOwner.GetHashCode();
                if (this.IsCc != null)
                    hash = hash * 59 + this.IsCc.GetHashCode();
                if (this.IsParticipant != null)
                    hash = hash * 59 + this.IsParticipant.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                return hash;
            }
        }
    }

}
