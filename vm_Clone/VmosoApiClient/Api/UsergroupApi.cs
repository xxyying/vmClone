/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsergroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>AddUsersResult</returns>
        AddUsersResult AddUsers (string containerID, string segment, AddUsersInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>ApiResponse of AddUsersResult</returns>
        ApiResponse<AddUsersResult> AddUsersWithHttpInfo (string containerID, string segment, AddUsersInput input);
        /// <summary>
        /// Api to return all users in a segment across multiple spaces.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetGroupUsersResult</returns>
        GetGroupUsersResult GetGroupUsers (string containerID, string segment, string options = null, string pg = null);

        /// <summary>
        /// Api to return all users in a segment across multiple spaces.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetGroupUsersResult</returns>
        ApiResponse<GetGroupUsersResult> GetGroupUsersWithHttpInfo (string containerID, string segment, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>RemoveUsersResult</returns>
        RemoveUsersResult RemoveUsers (string containerID, string segment, RemoveUsersInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>ApiResponse of RemoveUsersResult</returns>
        ApiResponse<RemoveUsersResult> RemoveUsersWithHttpInfo (string containerID, string segment, RemoveUsersInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>RemoveUsers2Result</returns>
        RemoveUsers2Result RemoveUsers2 (string containerID, RemoveUsers2Input input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>ApiResponse of RemoveUsers2Result</returns>
        ApiResponse<RemoveUsers2Result> RemoveUsers2WithHttpInfo (string containerID, RemoveUsers2Input input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>Task of AddUsersResult</returns>
        System.Threading.Tasks.Task<AddUsersResult> AddUsersAsync (string containerID, string segment, AddUsersInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>Task of ApiResponse (AddUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddUsersResult>> AddUsersAsyncWithHttpInfo (string containerID, string segment, AddUsersInput input);
        /// <summary>
        /// Api to return all users in a segment across multiple spaces.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetGroupUsersResult</returns>
        System.Threading.Tasks.Task<GetGroupUsersResult> GetGroupUsersAsync (string containerID, string segment, string options = null, string pg = null);

        /// <summary>
        /// Api to return all users in a segment across multiple spaces.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetGroupUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupUsersResult>> GetGroupUsersAsyncWithHttpInfo (string containerID, string segment, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>Task of RemoveUsersResult</returns>
        System.Threading.Tasks.Task<RemoveUsersResult> RemoveUsersAsync (string containerID, string segment, RemoveUsersInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>Task of ApiResponse (RemoveUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveUsersResult>> RemoveUsersAsyncWithHttpInfo (string containerID, string segment, RemoveUsersInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>Task of RemoveUsers2Result</returns>
        System.Threading.Tasks.Task<RemoveUsers2Result> RemoveUsers2Async (string containerID, RemoveUsers2Input input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>Task of ApiResponse (RemoveUsers2Result)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveUsers2Result>> RemoveUsers2AsyncWithHttpInfo (string containerID, RemoveUsers2Input input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsergroupApi : IUsergroupApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public UsergroupApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public UsergroupApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsergroupApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>AddUsersResult</returns>
        public AddUsersResult AddUsers (string containerID, string segment, AddUsersInput input)
        {
             ApiResponse<AddUsersResult> localVarResponse = AddUsersWithHttpInfo(containerID, segment, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>ApiResponse of AddUsersResult</returns>
        public ApiResponse< AddUsersResult > AddUsersWithHttpInfo (string containerID, string segment, AddUsersInput input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->AddUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->AddUsers");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->AddUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUsersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>Task of AddUsersResult</returns>
        public async System.Threading.Tasks.Task<AddUsersResult> AddUsersAsync (string containerID, string segment, AddUsersInput input)
        {
             ApiResponse<AddUsersResult> localVarResponse = await AddUsersAsyncWithHttpInfo(containerID, segment, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">AddUsers Input</param>
        /// <returns>Task of ApiResponse (AddUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddUsersResult>> AddUsersAsyncWithHttpInfo (string containerID, string segment, AddUsersInput input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->AddUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->AddUsers");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->AddUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUsersResult)));
            
        }

        /// <summary>
        /// Api to return all users in a segment across multiple spaces. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetGroupUsersResult</returns>
        public GetGroupUsersResult GetGroupUsers (string containerID, string segment, string options = null, string pg = null)
        {
             ApiResponse<GetGroupUsersResult> localVarResponse = GetGroupUsersWithHttpInfo(containerID, segment, options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Api to return all users in a segment across multiple spaces. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetGroupUsersResult</returns>
        public ApiResponse< GetGroupUsersResult > GetGroupUsersWithHttpInfo (string containerID, string segment, string options = null, string pg = null)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->GetGroupUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->GetGroupUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroupUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroupUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroupUsersResult)));
            
        }

        /// <summary>
        /// Api to return all users in a segment across multiple spaces. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetGroupUsersResult</returns>
        public async System.Threading.Tasks.Task<GetGroupUsersResult> GetGroupUsersAsync (string containerID, string segment, string options = null, string pg = null)
        {
             ApiResponse<GetGroupUsersResult> localVarResponse = await GetGroupUsersAsyncWithHttpInfo(containerID, segment, options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Api to return all users in a segment across multiple spaces. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="options">(JSON object &lt;&lt;UserGroupListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetGroupUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGroupUsersResult>> GetGroupUsersAsyncWithHttpInfo (string containerID, string segment, string options = null, string pg = null)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->GetGroupUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->GetGroupUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroupUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroupUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroupUsersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>RemoveUsersResult</returns>
        public RemoveUsersResult RemoveUsers (string containerID, string segment, RemoveUsersInput input)
        {
             ApiResponse<RemoveUsersResult> localVarResponse = RemoveUsersWithHttpInfo(containerID, segment, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>ApiResponse of RemoveUsersResult</returns>
        public ApiResponse< RemoveUsersResult > RemoveUsersWithHttpInfo (string containerID, string segment, RemoveUsersInput input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->RemoveUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->RemoveUsers");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->RemoveUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUsersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>Task of RemoveUsersResult</returns>
        public async System.Threading.Tasks.Task<RemoveUsersResult> RemoveUsersAsync (string containerID, string segment, RemoveUsersInput input)
        {
             ApiResponse<RemoveUsersResult> localVarResponse = await RemoveUsersAsyncWithHttpInfo(containerID, segment, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="segment"></param>
        /// <param name="input">RemoveUsers Input</param>
        /// <returns>Task of ApiResponse (RemoveUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveUsersResult>> RemoveUsersAsyncWithHttpInfo (string containerID, string segment, RemoveUsersInput input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->RemoveUsers");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling UsergroupApi->RemoveUsers");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->RemoveUsers");

            var localVarPath = "/usergroupsV2/{containerID}/{segment}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (segment != null) localVarPathParams.Add("segment", Configuration.ApiClient.ParameterToString(segment)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUsersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>RemoveUsers2Result</returns>
        public RemoveUsers2Result RemoveUsers2 (string containerID, RemoveUsers2Input input)
        {
             ApiResponse<RemoveUsers2Result> localVarResponse = RemoveUsers2WithHttpInfo(containerID, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>ApiResponse of RemoveUsers2Result</returns>
        public ApiResponse< RemoveUsers2Result > RemoveUsers2WithHttpInfo (string containerID, RemoveUsers2Input input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->RemoveUsers2");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->RemoveUsers2");

            var localVarPath = "/usergroupsV2/{containerID}/removeUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsers2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUsers2Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUsers2Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUsers2Result)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>Task of RemoveUsers2Result</returns>
        public async System.Threading.Tasks.Task<RemoveUsers2Result> RemoveUsers2Async (string containerID, RemoveUsers2Input input)
        {
             ApiResponse<RemoveUsers2Result> localVarResponse = await RemoveUsers2AsyncWithHttpInfo(containerID, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerID"></param>
        /// <param name="input">RemoveUsers2 Input</param>
        /// <returns>Task of ApiResponse (RemoveUsers2Result)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveUsers2Result>> RemoveUsers2AsyncWithHttpInfo (string containerID, RemoveUsers2Input input)
        {
            // verify the required parameter 'containerID' is set
            if (containerID == null)
                throw new ApiException(400, "Missing required parameter 'containerID' when calling UsergroupApi->RemoveUsers2");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UsergroupApi->RemoveUsers2");

            var localVarPath = "/usergroupsV2/{containerID}/removeUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerID != null) localVarPathParams.Add("containerID", Configuration.ApiClient.ParameterToString(containerID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsers2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUsers2Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUsers2Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUsers2Result)));
            
        }

    }
}
