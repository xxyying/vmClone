/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>AddAttachmentsResult</returns>
        AddAttachmentsResult AddAttachments (string objectID, AddAttachmentsInput input);

        /// <summary>
        /// add attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>ApiResponse of AddAttachmentsResult</returns>
        ApiResponse<AddAttachmentsResult> AddAttachmentsWithHttpInfo (string objectID, AddAttachmentsInput input);
        /// <summary>
        /// get attachment list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetAttachmentsResult</returns>
        GetAttachmentsResult GetAttachments (string objectID, string options = null, string pg = null, string format = null);

        /// <summary>
        /// get attachment list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetAttachmentsResult</returns>
        ApiResponse<GetAttachmentsResult> GetAttachmentsWithHttpInfo (string objectID, string options = null, string pg = null, string format = null);
        /// <summary>
        /// get attachments by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>GetAttachmentsByNameResult</returns>
        GetAttachmentsByNameResult GetAttachmentsByName (string objectID, string options);

        /// <summary>
        /// get attachments by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetAttachmentsByNameResult</returns>
        ApiResponse<GetAttachmentsByNameResult> GetAttachmentsByNameWithHttpInfo (string objectID, string options);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>GetDuplicatesResult</returns>
        GetDuplicatesResult GetDuplicates (GetDuplicatesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>ApiResponse of GetDuplicatesResult</returns>
        ApiResponse<GetDuplicatesResult> GetDuplicatesWithHttpInfo (GetDuplicatesInput input);
        /// <summary>
        /// remove attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>RemoveAttachmentsResult</returns>
        RemoveAttachmentsResult RemoveAttachments (string objectID, RemoveAttachmentsInput input);

        /// <summary>
        /// remove attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>ApiResponse of RemoveAttachmentsResult</returns>
        ApiResponse<RemoveAttachmentsResult> RemoveAttachmentsWithHttpInfo (string objectID, RemoveAttachmentsInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>Task of AddAttachmentsResult</returns>
        System.Threading.Tasks.Task<AddAttachmentsResult> AddAttachmentsAsync (string objectID, AddAttachmentsInput input);

        /// <summary>
        /// add attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>Task of ApiResponse (AddAttachmentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddAttachmentsResult>> AddAttachmentsAsyncWithHttpInfo (string objectID, AddAttachmentsInput input);
        /// <summary>
        /// get attachment list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetAttachmentsResult</returns>
        System.Threading.Tasks.Task<GetAttachmentsResult> GetAttachmentsAsync (string objectID, string options = null, string pg = null, string format = null);

        /// <summary>
        /// get attachment list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetAttachmentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAttachmentsResult>> GetAttachmentsAsyncWithHttpInfo (string objectID, string options = null, string pg = null, string format = null);
        /// <summary>
        /// get attachments by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>Task of GetAttachmentsByNameResult</returns>
        System.Threading.Tasks.Task<GetAttachmentsByNameResult> GetAttachmentsByNameAsync (string objectID, string options);

        /// <summary>
        /// get attachments by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetAttachmentsByNameResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAttachmentsByNameResult>> GetAttachmentsByNameAsyncWithHttpInfo (string objectID, string options);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>Task of GetDuplicatesResult</returns>
        System.Threading.Tasks.Task<GetDuplicatesResult> GetDuplicatesAsync (GetDuplicatesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>Task of ApiResponse (GetDuplicatesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDuplicatesResult>> GetDuplicatesAsyncWithHttpInfo (GetDuplicatesInput input);
        /// <summary>
        /// remove attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>Task of RemoveAttachmentsResult</returns>
        System.Threading.Tasks.Task<RemoveAttachmentsResult> RemoveAttachmentsAsync (string objectID, RemoveAttachmentsInput input);

        /// <summary>
        /// remove attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>Task of ApiResponse (RemoveAttachmentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveAttachmentsResult>> RemoveAttachmentsAsyncWithHttpInfo (string objectID, RemoveAttachmentsInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentApi : IAttachmentApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public AttachmentApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public AttachmentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>AddAttachmentsResult</returns>
        public AddAttachmentsResult AddAttachments (string objectID, AddAttachmentsInput input)
        {
             ApiResponse<AddAttachmentsResult> localVarResponse = AddAttachmentsWithHttpInfo(objectID, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>ApiResponse of AddAttachmentsResult</returns>
        public ApiResponse< AddAttachmentsResult > AddAttachmentsWithHttpInfo (string objectID, AddAttachmentsInput input)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->AddAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->AddAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddAttachmentsResult)));
            
        }

        /// <summary>
        /// add attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>Task of AddAttachmentsResult</returns>
        public async System.Threading.Tasks.Task<AddAttachmentsResult> AddAttachmentsAsync (string objectID, AddAttachmentsInput input)
        {
             ApiResponse<AddAttachmentsResult> localVarResponse = await AddAttachmentsAsyncWithHttpInfo(objectID, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">AddAttachments Input</param>
        /// <returns>Task of ApiResponse (AddAttachmentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddAttachmentsResult>> AddAttachmentsAsyncWithHttpInfo (string objectID, AddAttachmentsInput input)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->AddAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->AddAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddAttachmentsResult)));
            
        }

        /// <summary>
        /// get attachment list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetAttachmentsResult</returns>
        public GetAttachmentsResult GetAttachments (string objectID, string options = null, string pg = null, string format = null)
        {
             ApiResponse<GetAttachmentsResult> localVarResponse = GetAttachmentsWithHttpInfo(objectID, options, pg, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get attachment list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetAttachmentsResult</returns>
        public ApiResponse< GetAttachmentsResult > GetAttachmentsWithHttpInfo (string objectID, string options = null, string pg = null, string format = null)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->GetAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentsResult)));
            
        }

        /// <summary>
        /// get attachment list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetAttachmentsResult</returns>
        public async System.Threading.Tasks.Task<GetAttachmentsResult> GetAttachmentsAsync (string objectID, string options = null, string pg = null, string format = null)
        {
             ApiResponse<GetAttachmentsResult> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(objectID, options, pg, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get attachment list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;AttachmentOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetAttachmentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttachmentsResult>> GetAttachmentsAsyncWithHttpInfo (string objectID, string options = null, string pg = null, string format = null)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->GetAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentsResult)));
            
        }

        /// <summary>
        /// get attachments by name 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>GetAttachmentsByNameResult</returns>
        public GetAttachmentsByNameResult GetAttachmentsByName (string objectID, string options)
        {
             ApiResponse<GetAttachmentsByNameResult> localVarResponse = GetAttachmentsByNameWithHttpInfo(objectID, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get attachments by name 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetAttachmentsByNameResult</returns>
        public ApiResponse< GetAttachmentsByNameResult > GetAttachmentsByNameWithHttpInfo (string objectID, string options)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->GetAttachmentsByName");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AttachmentApi->GetAttachmentsByName");

            var localVarPath = "/attachmentsV2/getByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarQueryParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentsByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentsByNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentsByNameResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentsByNameResult)));
            
        }

        /// <summary>
        /// get attachments by name 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>Task of GetAttachmentsByNameResult</returns>
        public async System.Threading.Tasks.Task<GetAttachmentsByNameResult> GetAttachmentsByNameAsync (string objectID, string options)
        {
             ApiResponse<GetAttachmentsByNameResult> localVarResponse = await GetAttachmentsByNameAsyncWithHttpInfo(objectID, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get attachments by name 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetAttachmentsByNameResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttachmentsByNameResult>> GetAttachmentsByNameAsyncWithHttpInfo (string objectID, string options)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->GetAttachmentsByName");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AttachmentApi->GetAttachmentsByName");

            var localVarPath = "/attachmentsV2/getByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarQueryParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentsByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentsByNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentsByNameResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentsByNameResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>GetDuplicatesResult</returns>
        public GetDuplicatesResult GetDuplicates (GetDuplicatesInput input)
        {
             ApiResponse<GetDuplicatesResult> localVarResponse = GetDuplicatesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>ApiResponse of GetDuplicatesResult</returns>
        public ApiResponse< GetDuplicatesResult > GetDuplicatesWithHttpInfo (GetDuplicatesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->GetDuplicates");

            var localVarPath = "/attachmentsV2/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDuplicatesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDuplicatesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDuplicatesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>Task of GetDuplicatesResult</returns>
        public async System.Threading.Tasks.Task<GetDuplicatesResult> GetDuplicatesAsync (GetDuplicatesInput input)
        {
             ApiResponse<GetDuplicatesResult> localVarResponse = await GetDuplicatesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDuplicates Input</param>
        /// <returns>Task of ApiResponse (GetDuplicatesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDuplicatesResult>> GetDuplicatesAsyncWithHttpInfo (GetDuplicatesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->GetDuplicates");

            var localVarPath = "/attachmentsV2/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDuplicatesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDuplicatesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDuplicatesResult)));
            
        }

        /// <summary>
        /// remove attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>RemoveAttachmentsResult</returns>
        public RemoveAttachmentsResult RemoveAttachments (string objectID, RemoveAttachmentsInput input)
        {
             ApiResponse<RemoveAttachmentsResult> localVarResponse = RemoveAttachmentsWithHttpInfo(objectID, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// remove attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>ApiResponse of RemoveAttachmentsResult</returns>
        public ApiResponse< RemoveAttachmentsResult > RemoveAttachmentsWithHttpInfo (string objectID, RemoveAttachmentsInput input)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->RemoveAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->RemoveAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveAttachmentsResult)));
            
        }

        /// <summary>
        /// remove attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>Task of RemoveAttachmentsResult</returns>
        public async System.Threading.Tasks.Task<RemoveAttachmentsResult> RemoveAttachmentsAsync (string objectID, RemoveAttachmentsInput input)
        {
             ApiResponse<RemoveAttachmentsResult> localVarResponse = await RemoveAttachmentsAsyncWithHttpInfo(objectID, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// remove attachments 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectID"></param>
        /// <param name="input">RemoveAttachments Input</param>
        /// <returns>Task of ApiResponse (RemoveAttachmentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveAttachmentsResult>> RemoveAttachmentsAsyncWithHttpInfo (string objectID, RemoveAttachmentsInput input)
        {
            // verify the required parameter 'objectID' is set
            if (objectID == null)
                throw new ApiException(400, "Missing required parameter 'objectID' when calling AttachmentApi->RemoveAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AttachmentApi->RemoveAttachments");

            var localVarPath = "/attachmentsV2/{objectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectID != null) localVarPathParams.Add("objectID", Configuration.ApiClient.ParameterToString(objectID)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveAttachmentsResult)));
            
        }

    }
}
