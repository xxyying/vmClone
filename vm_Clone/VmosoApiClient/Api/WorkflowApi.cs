/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>CreateDefinitionFromFileResult</returns>
        CreateDefinitionFromFileResult CreateDefinitionFromFile (CreateDefinitionFromFileInput input);

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>ApiResponse of CreateDefinitionFromFileResult</returns>
        ApiResponse<CreateDefinitionFromFileResult> CreateDefinitionFromFileWithHttpInfo (CreateDefinitionFromFileInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>CreateLaunchableResult</returns>
        CreateLaunchableResult CreateLaunchable (CreateLaunchableInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>ApiResponse of CreateLaunchableResult</returns>
        ApiResponse<CreateLaunchableResult> CreateLaunchableWithHttpInfo (CreateLaunchableInput input);
        /// <summary>
        /// Create a workflow launchable by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>CreateLaunchableByKeyResult</returns>
        CreateLaunchableByKeyResult CreateLaunchableByKey (CreateLaunchableByKeyInput input);

        /// <summary>
        /// Create a workflow launchable by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>ApiResponse of CreateLaunchableByKeyResult</returns>
        ApiResponse<CreateLaunchableByKeyResult> CreateLaunchableByKeyWithHttpInfo (CreateLaunchableByKeyInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>CreateLaunchableFromFileResult</returns>
        CreateLaunchableFromFileResult CreateLaunchableFromFile (CreateLaunchableFromFileInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>ApiResponse of CreateLaunchableFromFileResult</returns>
        ApiResponse<CreateLaunchableFromFileResult> CreateLaunchableFromFileWithHttpInfo (CreateLaunchableFromFileInput input);
        /// <summary>
        /// Create a workflow launchable from zip file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>CreateLaunchableFromZipResult</returns>
        CreateLaunchableFromZipResult CreateLaunchableFromZip (CreateLaunchableFromZipInput input);

        /// <summary>
        /// Create a workflow launchable from zip file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>ApiResponse of CreateLaunchableFromZipResult</returns>
        ApiResponse<CreateLaunchableFromZipResult> CreateLaunchableFromZipWithHttpInfo (CreateLaunchableFromZipInput input);
        /// <summary>
        /// Delete workflow instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>DeleteInstanceResult</returns>
        DeleteInstanceResult DeleteInstance (string key);

        /// <summary>
        /// Delete workflow instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>ApiResponse of DeleteInstanceResult</returns>
        ApiResponse<DeleteInstanceResult> DeleteInstanceWithHttpInfo (string key);
        /// <summary>
        /// Delete workflow launchable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>DeleteLaunchableResult</returns>
        DeleteLaunchableResult DeleteLaunchable (string key);

        /// <summary>
        /// Delete workflow launchable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>ApiResponse of DeleteLaunchableResult</returns>
        ApiResponse<DeleteLaunchableResult> DeleteLaunchableWithHttpInfo (string key);
        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>DeleteWorkflowDefinitionResult</returns>
        DeleteWorkflowDefinitionResult DeleteWorkflowDefinition (string key);

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>ApiResponse of DeleteWorkflowDefinitionResult</returns>
        ApiResponse<DeleteWorkflowDefinitionResult> DeleteWorkflowDefinitionWithHttpInfo (string key);
        /// <summary>
        /// Get available actions for a participant on a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetAvailableActionsResult</returns>
        GetAvailableActionsResult GetAvailableActions (string key);

        /// <summary>
        /// Get available actions for a participant on a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetAvailableActionsResult</returns>
        ApiResponse<GetAvailableActionsResult> GetAvailableActionsWithHttpInfo (string key);
        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetLaunchableResult</returns>
        GetLaunchableResult GetLaunchable (string key);

        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetLaunchableResult</returns>
        ApiResponse<GetLaunchableResult> GetLaunchableWithHttpInfo (string key);
        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetLaunchableWorkflowsResult</returns>
        GetLaunchableWorkflowsResult GetLaunchableWorkflows (string type = null, string pg = null);

        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetLaunchableWorkflowsResult</returns>
        ApiResponse<GetLaunchableWorkflowsResult> GetLaunchableWorkflowsWithHttpInfo (string type = null, string pg = null);
        /// <summary>
        /// Get workflow payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>GetPayloadResult</returns>
        GetPayloadResult GetPayload (string key, string name, string mode = null, string perm = null);

        /// <summary>
        /// Get workflow payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>ApiResponse of GetPayloadResult</returns>
        ApiResponse<GetPayloadResult> GetPayloadWithHttpInfo (string key, string name, string mode = null, string perm = null);
        /// <summary>
        /// Get roles assignment of a workflow or a workflow step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetRolesResult</returns>
        GetRolesResult GetRoles (string key, string stepKey = null, string pg = null);

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetRolesResult</returns>
        ApiResponse<GetRolesResult> GetRolesWithHttpInfo (string key, string stepKey = null, string pg = null);
        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>GetStepResult</returns>
        GetStepResult GetStep (string key, string stepKey);

        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>ApiResponse of GetStepResult</returns>
        ApiResponse<GetStepResult> GetStepWithHttpInfo (string key, string stepKey);
        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>GetStepsResult</returns>
        GetStepsResult GetSteps (string key);

        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>ApiResponse of GetStepsResult</returns>
        ApiResponse<GetStepsResult> GetStepsWithHttpInfo (string key);
        /// <summary>
        /// Retrieve a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>GetWorkflowResult</returns>
        GetWorkflowResult GetWorkflow (string key, bool? push = null);

        /// <summary>
        /// Retrieve a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>ApiResponse of GetWorkflowResult</returns>
        ApiResponse<GetWorkflowResult> GetWorkflowWithHttpInfo (string key, bool? push = null);
        /// <summary>
        /// Retrieve meta data of workflow design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetWorkflowMetaDataResult</returns>
        GetWorkflowMetaDataResult GetWorkflowMetaData (string key);

        /// <summary>
        /// Retrieve meta data of workflow design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetWorkflowMetaDataResult</returns>
        ApiResponse<GetWorkflowMetaDataResult> GetWorkflowMetaDataWithHttpInfo (string key);
        /// <summary>
        /// Get workflow user state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>GetWorkflowUsersResult</returns>
        GetWorkflowUsersResult GetWorkflowUsers (string key, string userKey);

        /// <summary>
        /// Get workflow user state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of GetWorkflowUsersResult</returns>
        ApiResponse<GetWorkflowUsersResult> GetWorkflowUsersWithHttpInfo (string key, string userKey);
        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>ListPayloadResult</returns>
        ListPayloadResult ListPayload (string key);

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>ApiResponse of ListPayloadResult</returns>
        ApiResponse<ListPayloadResult> ListPayloadWithHttpInfo (string key);
        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>PerformWorkflowActionResult</returns>
        PerformWorkflowActionResult PerformWorkflowAction (string key, PerformWorkflowActionInput input);

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>ApiResponse of PerformWorkflowActionResult</returns>
        ApiResponse<PerformWorkflowActionResult> PerformWorkflowActionWithHttpInfo (string key, PerformWorkflowActionInput input);
        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>PublishLaunchableResult</returns>
        PublishLaunchableResult PublishLaunchable (string key, string target, PublishLaunchableInput input);

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>ApiResponse of PublishLaunchableResult</returns>
        ApiResponse<PublishLaunchableResult> PublishLaunchableWithHttpInfo (string key, string target, PublishLaunchableInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>StartWorkflowResult</returns>
        StartWorkflowResult StartWorkflow (StartWorkflowInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>ApiResponse of StartWorkflowResult</returns>
        ApiResponse<StartWorkflowResult> StartWorkflowWithHttpInfo (StartWorkflowInput input);
        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>UpdateRolesResult</returns>
        UpdateRolesResult UpdateRoles (string key, UpdateRolesInput input);

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>ApiResponse of UpdateRolesResult</returns>
        ApiResponse<UpdateRolesResult> UpdateRolesWithHttpInfo (string key, UpdateRolesInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>Task of CreateDefinitionFromFileResult</returns>
        System.Threading.Tasks.Task<CreateDefinitionFromFileResult> CreateDefinitionFromFileAsync (CreateDefinitionFromFileInput input);

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>Task of ApiResponse (CreateDefinitionFromFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDefinitionFromFileResult>> CreateDefinitionFromFileAsyncWithHttpInfo (CreateDefinitionFromFileInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>Task of CreateLaunchableResult</returns>
        System.Threading.Tasks.Task<CreateLaunchableResult> CreateLaunchableAsync (CreateLaunchableInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLaunchableResult>> CreateLaunchableAsyncWithHttpInfo (CreateLaunchableInput input);
        /// <summary>
        /// Create a workflow launchable by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>Task of CreateLaunchableByKeyResult</returns>
        System.Threading.Tasks.Task<CreateLaunchableByKeyResult> CreateLaunchableByKeyAsync (CreateLaunchableByKeyInput input);

        /// <summary>
        /// Create a workflow launchable by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableByKeyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLaunchableByKeyResult>> CreateLaunchableByKeyAsyncWithHttpInfo (CreateLaunchableByKeyInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>Task of CreateLaunchableFromFileResult</returns>
        System.Threading.Tasks.Task<CreateLaunchableFromFileResult> CreateLaunchableFromFileAsync (CreateLaunchableFromFileInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableFromFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLaunchableFromFileResult>> CreateLaunchableFromFileAsyncWithHttpInfo (CreateLaunchableFromFileInput input);
        /// <summary>
        /// Create a workflow launchable from zip file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>Task of CreateLaunchableFromZipResult</returns>
        System.Threading.Tasks.Task<CreateLaunchableFromZipResult> CreateLaunchableFromZipAsync (CreateLaunchableFromZipInput input);

        /// <summary>
        /// Create a workflow launchable from zip file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableFromZipResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLaunchableFromZipResult>> CreateLaunchableFromZipAsyncWithHttpInfo (CreateLaunchableFromZipInput input);
        /// <summary>
        /// Delete workflow instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>Task of DeleteInstanceResult</returns>
        System.Threading.Tasks.Task<DeleteInstanceResult> DeleteInstanceAsync (string key);

        /// <summary>
        /// Delete workflow instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>Task of ApiResponse (DeleteInstanceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInstanceResult>> DeleteInstanceAsyncWithHttpInfo (string key);
        /// <summary>
        /// Delete workflow launchable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>Task of DeleteLaunchableResult</returns>
        System.Threading.Tasks.Task<DeleteLaunchableResult> DeleteLaunchableAsync (string key);

        /// <summary>
        /// Delete workflow launchable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>Task of ApiResponse (DeleteLaunchableResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteLaunchableResult>> DeleteLaunchableAsyncWithHttpInfo (string key);
        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>Task of DeleteWorkflowDefinitionResult</returns>
        System.Threading.Tasks.Task<DeleteWorkflowDefinitionResult> DeleteWorkflowDefinitionAsync (string key);

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>Task of ApiResponse (DeleteWorkflowDefinitionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteWorkflowDefinitionResult>> DeleteWorkflowDefinitionAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get available actions for a participant on a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetAvailableActionsResult</returns>
        System.Threading.Tasks.Task<GetAvailableActionsResult> GetAvailableActionsAsync (string key);

        /// <summary>
        /// Get available actions for a participant on a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetAvailableActionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableActionsResult>> GetAvailableActionsAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetLaunchableResult</returns>
        System.Threading.Tasks.Task<GetLaunchableResult> GetLaunchableAsync (string key);

        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetLaunchableResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLaunchableResult>> GetLaunchableAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetLaunchableWorkflowsResult</returns>
        System.Threading.Tasks.Task<GetLaunchableWorkflowsResult> GetLaunchableWorkflowsAsync (string type = null, string pg = null);

        /// <summary>
        /// Get list of available workflows to launch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetLaunchableWorkflowsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLaunchableWorkflowsResult>> GetLaunchableWorkflowsAsyncWithHttpInfo (string type = null, string pg = null);
        /// <summary>
        /// Get workflow payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>Task of GetPayloadResult</returns>
        System.Threading.Tasks.Task<GetPayloadResult> GetPayloadAsync (string key, string name, string mode = null, string perm = null);

        /// <summary>
        /// Get workflow payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>Task of ApiResponse (GetPayloadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPayloadResult>> GetPayloadAsyncWithHttpInfo (string key, string name, string mode = null, string perm = null);
        /// <summary>
        /// Get roles assignment of a workflow or a workflow step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetRolesResult</returns>
        System.Threading.Tasks.Task<GetRolesResult> GetRolesAsync (string key, string stepKey = null, string pg = null);

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetRolesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRolesResult>> GetRolesAsyncWithHttpInfo (string key, string stepKey = null, string pg = null);
        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>Task of GetStepResult</returns>
        System.Threading.Tasks.Task<GetStepResult> GetStepAsync (string key, string stepKey);

        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>Task of ApiResponse (GetStepResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStepResult>> GetStepAsyncWithHttpInfo (string key, string stepKey);
        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>Task of GetStepsResult</returns>
        System.Threading.Tasks.Task<GetStepsResult> GetStepsAsync (string key);

        /// <summary>
        /// Get steps of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>Task of ApiResponse (GetStepsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStepsResult>> GetStepsAsyncWithHttpInfo (string key);
        /// <summary>
        /// Retrieve a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>Task of GetWorkflowResult</returns>
        System.Threading.Tasks.Task<GetWorkflowResult> GetWorkflowAsync (string key, bool? push = null);

        /// <summary>
        /// Retrieve a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>Task of ApiResponse (GetWorkflowResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWorkflowResult>> GetWorkflowAsyncWithHttpInfo (string key, bool? push = null);
        /// <summary>
        /// Retrieve meta data of workflow design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetWorkflowMetaDataResult</returns>
        System.Threading.Tasks.Task<GetWorkflowMetaDataResult> GetWorkflowMetaDataAsync (string key);

        /// <summary>
        /// Retrieve meta data of workflow design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetWorkflowMetaDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWorkflowMetaDataResult>> GetWorkflowMetaDataAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get workflow user state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>Task of GetWorkflowUsersResult</returns>
        System.Threading.Tasks.Task<GetWorkflowUsersResult> GetWorkflowUsersAsync (string key, string userKey);

        /// <summary>
        /// Get workflow user state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (GetWorkflowUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWorkflowUsersResult>> GetWorkflowUsersAsyncWithHttpInfo (string key, string userKey);
        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>Task of ListPayloadResult</returns>
        System.Threading.Tasks.Task<ListPayloadResult> ListPayloadAsync (string key);

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>Task of ApiResponse (ListPayloadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPayloadResult>> ListPayloadAsyncWithHttpInfo (string key);
        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>Task of PerformWorkflowActionResult</returns>
        System.Threading.Tasks.Task<PerformWorkflowActionResult> PerformWorkflowActionAsync (string key, PerformWorkflowActionInput input);

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>Task of ApiResponse (PerformWorkflowActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformWorkflowActionResult>> PerformWorkflowActionAsyncWithHttpInfo (string key, PerformWorkflowActionInput input);
        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>Task of PublishLaunchableResult</returns>
        System.Threading.Tasks.Task<PublishLaunchableResult> PublishLaunchableAsync (string key, string target, PublishLaunchableInput input);

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>Task of ApiResponse (PublishLaunchableResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishLaunchableResult>> PublishLaunchableAsyncWithHttpInfo (string key, string target, PublishLaunchableInput input);
        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>Task of StartWorkflowResult</returns>
        System.Threading.Tasks.Task<StartWorkflowResult> StartWorkflowAsync (StartWorkflowInput input);

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>Task of ApiResponse (StartWorkflowResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartWorkflowResult>> StartWorkflowAsyncWithHttpInfo (StartWorkflowInput input);
        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>Task of UpdateRolesResult</returns>
        System.Threading.Tasks.Task<UpdateRolesResult> UpdateRolesAsync (string key, UpdateRolesInput input);

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>Task of ApiResponse (UpdateRolesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRolesResult>> UpdateRolesAsyncWithHttpInfo (string key, UpdateRolesInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public WorkflowApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public WorkflowApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>CreateDefinitionFromFileResult</returns>
        public CreateDefinitionFromFileResult CreateDefinitionFromFile (CreateDefinitionFromFileInput input)
        {
             ApiResponse<CreateDefinitionFromFileResult> localVarResponse = CreateDefinitionFromFileWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>ApiResponse of CreateDefinitionFromFileResult</returns>
        public ApiResponse< CreateDefinitionFromFileResult > CreateDefinitionFromFileWithHttpInfo (CreateDefinitionFromFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateDefinitionFromFile");

            var localVarPath = "/workflows/definition/from/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDefinitionFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDefinitionFromFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDefinitionFromFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDefinitionFromFileResult)));
            
        }

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>Task of CreateDefinitionFromFileResult</returns>
        public async System.Threading.Tasks.Task<CreateDefinitionFromFileResult> CreateDefinitionFromFileAsync (CreateDefinitionFromFileInput input)
        {
             ApiResponse<CreateDefinitionFromFileResult> localVarResponse = await CreateDefinitionFromFileAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow definition from an uploaded workflow xml file andadditional meta data. The newly created workflow definition is statusset to draft. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinitionFromFile Input</param>
        /// <returns>Task of ApiResponse (CreateDefinitionFromFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateDefinitionFromFileResult>> CreateDefinitionFromFileAsyncWithHttpInfo (CreateDefinitionFromFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateDefinitionFromFile");

            var localVarPath = "/workflows/definition/from/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDefinitionFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDefinitionFromFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDefinitionFromFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDefinitionFromFileResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>CreateLaunchableResult</returns>
        public CreateLaunchableResult CreateLaunchable (CreateLaunchableInput input)
        {
             ApiResponse<CreateLaunchableResult> localVarResponse = CreateLaunchableWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>ApiResponse of CreateLaunchableResult</returns>
        public ApiResponse< CreateLaunchableResult > CreateLaunchableWithHttpInfo (CreateLaunchableInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchable");

            var localVarPath = "/workflows/launchables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>Task of CreateLaunchableResult</returns>
        public async System.Threading.Tasks.Task<CreateLaunchableResult> CreateLaunchableAsync (CreateLaunchableInput input)
        {
             ApiResponse<CreateLaunchableResult> localVarResponse = await CreateLaunchableAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchable Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLaunchableResult>> CreateLaunchableAsyncWithHttpInfo (CreateLaunchableInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchable");

            var localVarPath = "/workflows/launchables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable by key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>CreateLaunchableByKeyResult</returns>
        public CreateLaunchableByKeyResult CreateLaunchableByKey (CreateLaunchableByKeyInput input)
        {
             ApiResponse<CreateLaunchableByKeyResult> localVarResponse = CreateLaunchableByKeyWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow launchable by key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>ApiResponse of CreateLaunchableByKeyResult</returns>
        public ApiResponse< CreateLaunchableByKeyResult > CreateLaunchableByKeyWithHttpInfo (CreateLaunchableByKeyInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableByKey");

            var localVarPath = "/workflows/launchables/by/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableByKeyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableByKeyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableByKeyResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable by key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>Task of CreateLaunchableByKeyResult</returns>
        public async System.Threading.Tasks.Task<CreateLaunchableByKeyResult> CreateLaunchableByKeyAsync (CreateLaunchableByKeyInput input)
        {
             ApiResponse<CreateLaunchableByKeyResult> localVarResponse = await CreateLaunchableByKeyAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow launchable by key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableByKey Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableByKeyResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLaunchableByKeyResult>> CreateLaunchableByKeyAsyncWithHttpInfo (CreateLaunchableByKeyInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableByKey");

            var localVarPath = "/workflows/launchables/by/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableByKeyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableByKeyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableByKeyResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>CreateLaunchableFromFileResult</returns>
        public CreateLaunchableFromFileResult CreateLaunchableFromFile (CreateLaunchableFromFileInput input)
        {
             ApiResponse<CreateLaunchableFromFileResult> localVarResponse = CreateLaunchableFromFileWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>ApiResponse of CreateLaunchableFromFileResult</returns>
        public ApiResponse< CreateLaunchableFromFileResult > CreateLaunchableFromFileWithHttpInfo (CreateLaunchableFromFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableFromFile");

            var localVarPath = "/workflows/launchables/from/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableFromFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableFromFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableFromFileResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>Task of CreateLaunchableFromFileResult</returns>
        public async System.Threading.Tasks.Task<CreateLaunchableFromFileResult> CreateLaunchableFromFileAsync (CreateLaunchableFromFileInput input)
        {
             ApiResponse<CreateLaunchableFromFileResult> localVarResponse = await CreateLaunchableFromFileAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromFile Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableFromFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLaunchableFromFileResult>> CreateLaunchableFromFileAsyncWithHttpInfo (CreateLaunchableFromFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableFromFile");

            var localVarPath = "/workflows/launchables/from/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableFromFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableFromFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableFromFileResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from zip file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>CreateLaunchableFromZipResult</returns>
        public CreateLaunchableFromZipResult CreateLaunchableFromZip (CreateLaunchableFromZipInput input)
        {
             ApiResponse<CreateLaunchableFromZipResult> localVarResponse = CreateLaunchableFromZipWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow launchable from zip file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>ApiResponse of CreateLaunchableFromZipResult</returns>
        public ApiResponse< CreateLaunchableFromZipResult > CreateLaunchableFromZipWithHttpInfo (CreateLaunchableFromZipInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableFromZip");

            var localVarPath = "/workflows/launchables/from/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableFromZipResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableFromZipResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableFromZipResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from zip file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>Task of CreateLaunchableFromZipResult</returns>
        public async System.Threading.Tasks.Task<CreateLaunchableFromZipResult> CreateLaunchableFromZipAsync (CreateLaunchableFromZipInput input)
        {
             ApiResponse<CreateLaunchableFromZipResult> localVarResponse = await CreateLaunchableFromZipAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow launchable from zip file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateLaunchableFromZip Input</param>
        /// <returns>Task of ApiResponse (CreateLaunchableFromZipResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLaunchableFromZipResult>> CreateLaunchableFromZipAsyncWithHttpInfo (CreateLaunchableFromZipInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->CreateLaunchableFromZip");

            var localVarPath = "/workflows/launchables/from/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLaunchableFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLaunchableFromZipResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateLaunchableFromZipResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLaunchableFromZipResult)));
            
        }

        /// <summary>
        /// Delete workflow instance 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>DeleteInstanceResult</returns>
        public DeleteInstanceResult DeleteInstance (string key)
        {
             ApiResponse<DeleteInstanceResult> localVarResponse = DeleteInstanceWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete workflow instance 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>ApiResponse of DeleteInstanceResult</returns>
        public ApiResponse< DeleteInstanceResult > DeleteInstanceWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteInstance");

            var localVarPath = "/workflows/instance/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteInstanceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteInstanceResult)));
            
        }

        /// <summary>
        /// Delete workflow instance 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>Task of DeleteInstanceResult</returns>
        public async System.Threading.Tasks.Task<DeleteInstanceResult> DeleteInstanceAsync (string key)
        {
             ApiResponse<DeleteInstanceResult> localVarResponse = await DeleteInstanceAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete workflow instance 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow instance.</param>
        /// <returns>Task of ApiResponse (DeleteInstanceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteInstanceResult>> DeleteInstanceAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteInstance");

            var localVarPath = "/workflows/instance/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteInstanceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteInstanceResult)));
            
        }

        /// <summary>
        /// Delete workflow launchable. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>DeleteLaunchableResult</returns>
        public DeleteLaunchableResult DeleteLaunchable (string key)
        {
             ApiResponse<DeleteLaunchableResult> localVarResponse = DeleteLaunchableWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete workflow launchable. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>ApiResponse of DeleteLaunchableResult</returns>
        public ApiResponse< DeleteLaunchableResult > DeleteLaunchableWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteLaunchable");

            var localVarPath = "/workflows/launchables/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteLaunchableResult)));
            
        }

        /// <summary>
        /// Delete workflow launchable. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>Task of DeleteLaunchableResult</returns>
        public async System.Threading.Tasks.Task<DeleteLaunchableResult> DeleteLaunchableAsync (string key)
        {
             ApiResponse<DeleteLaunchableResult> localVarResponse = await DeleteLaunchableAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete workflow launchable. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <returns>Task of ApiResponse (DeleteLaunchableResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteLaunchableResult>> DeleteLaunchableAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteLaunchable");

            var localVarPath = "/workflows/launchables/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteLaunchableResult)));
            
        }

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>DeleteWorkflowDefinitionResult</returns>
        public DeleteWorkflowDefinitionResult DeleteWorkflowDefinition (string key)
        {
             ApiResponse<DeleteWorkflowDefinitionResult> localVarResponse = DeleteWorkflowDefinitionWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>ApiResponse of DeleteWorkflowDefinitionResult</returns>
        public ApiResponse< DeleteWorkflowDefinitionResult > DeleteWorkflowDefinitionWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteWorkflowDefinition");

            var localVarPath = "/workflows/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteWorkflowDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteWorkflowDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteWorkflowDefinitionResult)));
            
        }

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>Task of DeleteWorkflowDefinitionResult</returns>
        public async System.Threading.Tasks.Task<DeleteWorkflowDefinitionResult> DeleteWorkflowDefinitionAsync (string key)
        {
             ApiResponse<DeleteWorkflowDefinitionResult> localVarResponse = await DeleteWorkflowDefinitionAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete workflow definition.Can be used to delete workflow definitions or templates. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition or template</param>
        /// <returns>Task of ApiResponse (DeleteWorkflowDefinitionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteWorkflowDefinitionResult>> DeleteWorkflowDefinitionAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->DeleteWorkflowDefinition");

            var localVarPath = "/workflows/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteWorkflowDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteWorkflowDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteWorkflowDefinitionResult)));
            
        }

        /// <summary>
        /// Get available actions for a participant on a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetAvailableActionsResult</returns>
        public GetAvailableActionsResult GetAvailableActions (string key)
        {
             ApiResponse<GetAvailableActionsResult> localVarResponse = GetAvailableActionsWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available actions for a participant on a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetAvailableActionsResult</returns>
        public ApiResponse< GetAvailableActionsResult > GetAvailableActionsWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetAvailableActions");

            var localVarPath = "/workflows/{key}/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableActionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableActionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableActionsResult)));
            
        }

        /// <summary>
        /// Get available actions for a participant on a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetAvailableActionsResult</returns>
        public async System.Threading.Tasks.Task<GetAvailableActionsResult> GetAvailableActionsAsync (string key)
        {
             ApiResponse<GetAvailableActionsResult> localVarResponse = await GetAvailableActionsAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available actions for a participant on a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetAvailableActionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableActionsResult>> GetAvailableActionsAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetAvailableActions");

            var localVarPath = "/workflows/{key}/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableActionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableActionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableActionsResult)));
            
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetLaunchableResult</returns>
        public GetLaunchableResult GetLaunchable (string key)
        {
             ApiResponse<GetLaunchableResult> localVarResponse = GetLaunchableWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetLaunchableResult</returns>
        public ApiResponse< GetLaunchableResult > GetLaunchableWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetLaunchable");

            var localVarPath = "/workflows/launchables/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLaunchableResult)));
            
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetLaunchableResult</returns>
        public async System.Threading.Tasks.Task<GetLaunchableResult> GetLaunchableAsync (string key)
        {
             ApiResponse<GetLaunchableResult> localVarResponse = await GetLaunchableAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetLaunchableResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLaunchableResult>> GetLaunchableAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetLaunchable");

            var localVarPath = "/workflows/launchables/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLaunchableResult)));
            
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetLaunchableWorkflowsResult</returns>
        public GetLaunchableWorkflowsResult GetLaunchableWorkflows (string type = null, string pg = null)
        {
             ApiResponse<GetLaunchableWorkflowsResult> localVarResponse = GetLaunchableWorkflowsWithHttpInfo(type, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetLaunchableWorkflowsResult</returns>
        public ApiResponse< GetLaunchableWorkflowsResult > GetLaunchableWorkflowsWithHttpInfo (string type = null, string pg = null)
        {

            var localVarPath = "/workflows/launchables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaunchableWorkflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLaunchableWorkflowsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLaunchableWorkflowsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLaunchableWorkflowsResult)));
            
        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetLaunchableWorkflowsResult</returns>
        public async System.Threading.Tasks.Task<GetLaunchableWorkflowsResult> GetLaunchableWorkflowsAsync (string type = null, string pg = null)
        {
             ApiResponse<GetLaunchableWorkflowsResult> localVarResponse = await GetLaunchableWorkflowsAsyncWithHttpInfo(type, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of available workflows to launch. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of launchables. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetLaunchableWorkflowsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLaunchableWorkflowsResult>> GetLaunchableWorkflowsAsyncWithHttpInfo (string type = null, string pg = null)
        {

            var localVarPath = "/workflows/launchables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaunchableWorkflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLaunchableWorkflowsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLaunchableWorkflowsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLaunchableWorkflowsResult)));
            
        }

        /// <summary>
        /// Get workflow payload. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>GetPayloadResult</returns>
        public GetPayloadResult GetPayload (string key, string name, string mode = null, string perm = null)
        {
             ApiResponse<GetPayloadResult> localVarResponse = GetPayloadWithHttpInfo(key, name, mode, perm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workflow payload. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>ApiResponse of GetPayloadResult</returns>
        public ApiResponse< GetPayloadResult > GetPayloadWithHttpInfo (string key, string name, string mode = null, string perm = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetPayload");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowApi->GetPayload");

            var localVarPath = "/workflows/{key}/payloads/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter
            if (perm != null) localVarQueryParams.Add("perm", Configuration.ApiClient.ParameterToString(perm)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPayloadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPayloadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPayloadResult)));
            
        }

        /// <summary>
        /// Get workflow payload. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>Task of GetPayloadResult</returns>
        public async System.Threading.Tasks.Task<GetPayloadResult> GetPayloadAsync (string key, string name, string mode = null, string perm = null)
        {
             ApiResponse<GetPayloadResult> localVarResponse = await GetPayloadAsyncWithHttpInfo(key, name, mode, perm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workflow payload. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="name">Payload name.</param>
        /// <param name="mode">Payload mode; any if none specified. (optional)</param>
        /// <param name="perm">Permission. (optional)</param>
        /// <returns>Task of ApiResponse (GetPayloadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPayloadResult>> GetPayloadAsyncWithHttpInfo (string key, string name, string mode = null, string perm = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetPayload");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowApi->GetPayload");

            var localVarPath = "/workflows/{key}/payloads/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter
            if (perm != null) localVarQueryParams.Add("perm", Configuration.ApiClient.ParameterToString(perm)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPayloadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPayloadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPayloadResult)));
            
        }

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetRolesResult</returns>
        public GetRolesResult GetRoles (string key, string stepKey = null, string pg = null)
        {
             ApiResponse<GetRolesResult> localVarResponse = GetRolesWithHttpInfo(key, stepKey, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetRolesResult</returns>
        public ApiResponse< GetRolesResult > GetRolesWithHttpInfo (string key, string stepKey = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetRoles");

            var localVarPath = "/workflows/{key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (stepKey != null) localVarQueryParams.Add("stepKey", Configuration.ApiClient.ParameterToString(stepKey)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRolesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRolesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRolesResult)));
            
        }

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetRolesResult</returns>
        public async System.Threading.Tasks.Task<GetRolesResult> GetRolesAsync (string key, string stepKey = null, string pg = null)
        {
             ApiResponse<GetRolesResult> localVarResponse = await GetRolesAsyncWithHttpInfo(key, stepKey, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roles assignment of a workflow or a workflow step. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey">Workflow step key or null. (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetRolesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRolesResult>> GetRolesAsyncWithHttpInfo (string key, string stepKey = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetRoles");

            var localVarPath = "/workflows/{key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (stepKey != null) localVarQueryParams.Add("stepKey", Configuration.ApiClient.ParameterToString(stepKey)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRolesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRolesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRolesResult)));
            
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>GetStepResult</returns>
        public GetStepResult GetStep (string key, string stepKey)
        {
             ApiResponse<GetStepResult> localVarResponse = GetStepWithHttpInfo(key, stepKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>ApiResponse of GetStepResult</returns>
        public ApiResponse< GetStepResult > GetStepWithHttpInfo (string key, string stepKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetStep");
            // verify the required parameter 'stepKey' is set
            if (stepKey == null)
                throw new ApiException(400, "Missing required parameter 'stepKey' when calling WorkflowApi->GetStep");

            var localVarPath = "/workflows/{key}/steps/{stepKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (stepKey != null) localVarPathParams.Add("stepKey", Configuration.ApiClient.ParameterToString(stepKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStepResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStepResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStepResult)));
            
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>Task of GetStepResult</returns>
        public async System.Threading.Tasks.Task<GetStepResult> GetStepAsync (string key, string stepKey)
        {
             ApiResponse<GetStepResult> localVarResponse = await GetStepAsyncWithHttpInfo(key, stepKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <param name="stepKey"></param>
        /// <returns>Task of ApiResponse (GetStepResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStepResult>> GetStepAsyncWithHttpInfo (string key, string stepKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetStep");
            // verify the required parameter 'stepKey' is set
            if (stepKey == null)
                throw new ApiException(400, "Missing required parameter 'stepKey' when calling WorkflowApi->GetStep");

            var localVarPath = "/workflows/{key}/steps/{stepKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (stepKey != null) localVarPathParams.Add("stepKey", Configuration.ApiClient.ParameterToString(stepKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStepResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStepResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStepResult)));
            
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>GetStepsResult</returns>
        public GetStepsResult GetSteps (string key)
        {
             ApiResponse<GetStepsResult> localVarResponse = GetStepsWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>ApiResponse of GetStepsResult</returns>
        public ApiResponse< GetStepsResult > GetStepsWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetSteps");

            var localVarPath = "/workflows/{key}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStepsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStepsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStepsResult)));
            
        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>Task of GetStepsResult</returns>
        public async System.Threading.Tasks.Task<GetStepsResult> GetStepsAsync (string key)
        {
             ApiResponse<GetStepsResult> localVarResponse = await GetStepsAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get steps of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow instance key.</param>
        /// <returns>Task of ApiResponse (GetStepsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStepsResult>> GetStepsAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetSteps");

            var localVarPath = "/workflows/{key}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStepsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStepsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStepsResult)));
            
        }

        /// <summary>
        /// Retrieve a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>GetWorkflowResult</returns>
        public GetWorkflowResult GetWorkflow (string key, bool? push = null)
        {
             ApiResponse<GetWorkflowResult> localVarResponse = GetWorkflowWithHttpInfo(key, push);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>ApiResponse of GetWorkflowResult</returns>
        public ApiResponse< GetWorkflowResult > GetWorkflowWithHttpInfo (string key, bool? push = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflow");

            var localVarPath = "/workflows/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (push != null) localVarQueryParams.Add("push", Configuration.ApiClient.ParameterToString(push)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowResult)));
            
        }

        /// <summary>
        /// Retrieve a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>Task of GetWorkflowResult</returns>
        public async System.Threading.Tasks.Task<GetWorkflowResult> GetWorkflowAsync (string key, bool? push = null)
        {
             ApiResponse<GetWorkflowResult> localVarResponse = await GetWorkflowAsyncWithHttpInfo(key, push);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="push"> (optional)</param>
        /// <returns>Task of ApiResponse (GetWorkflowResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWorkflowResult>> GetWorkflowAsyncWithHttpInfo (string key, bool? push = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflow");

            var localVarPath = "/workflows/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (push != null) localVarQueryParams.Add("push", Configuration.ApiClient.ParameterToString(push)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowResult)));
            
        }

        /// <summary>
        /// Retrieve meta data of workflow design. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetWorkflowMetaDataResult</returns>
        public GetWorkflowMetaDataResult GetWorkflowMetaData (string key)
        {
             ApiResponse<GetWorkflowMetaDataResult> localVarResponse = GetWorkflowMetaDataWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve meta data of workflow design. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetWorkflowMetaDataResult</returns>
        public ApiResponse< GetWorkflowMetaDataResult > GetWorkflowMetaDataWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflowMetaData");

            var localVarPath = "/workflows/meta/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowMetaDataResult)));
            
        }

        /// <summary>
        /// Retrieve meta data of workflow design. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetWorkflowMetaDataResult</returns>
        public async System.Threading.Tasks.Task<GetWorkflowMetaDataResult> GetWorkflowMetaDataAsync (string key)
        {
             ApiResponse<GetWorkflowMetaDataResult> localVarResponse = await GetWorkflowMetaDataAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve meta data of workflow design. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetWorkflowMetaDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWorkflowMetaDataResult>> GetWorkflowMetaDataAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflowMetaData");

            var localVarPath = "/workflows/meta/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowMetaDataResult)));
            
        }

        /// <summary>
        /// Get workflow user state. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>GetWorkflowUsersResult</returns>
        public GetWorkflowUsersResult GetWorkflowUsers (string key, string userKey)
        {
             ApiResponse<GetWorkflowUsersResult> localVarResponse = GetWorkflowUsersWithHttpInfo(key, userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workflow user state. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of GetWorkflowUsersResult</returns>
        public ApiResponse< GetWorkflowUsersResult > GetWorkflowUsersWithHttpInfo (string key, string userKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflowUsers");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling WorkflowApi->GetWorkflowUsers");

            var localVarPath = "/workflows/{key}/users/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowUsersResult)));
            
        }

        /// <summary>
        /// Get workflow user state. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>Task of GetWorkflowUsersResult</returns>
        public async System.Threading.Tasks.Task<GetWorkflowUsersResult> GetWorkflowUsersAsync (string key, string userKey)
        {
             ApiResponse<GetWorkflowUsersResult> localVarResponse = await GetWorkflowUsersAsyncWithHttpInfo(key, userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workflow user state. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (GetWorkflowUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWorkflowUsersResult>> GetWorkflowUsersAsyncWithHttpInfo (string key, string userKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->GetWorkflowUsers");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling WorkflowApi->GetWorkflowUsers");

            var localVarPath = "/workflows/{key}/users/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWorkflowUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWorkflowUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWorkflowUsersResult)));
            
        }

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>ListPayloadResult</returns>
        public ListPayloadResult ListPayload (string key)
        {
             ApiResponse<ListPayloadResult> localVarResponse = ListPayloadWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>ApiResponse of ListPayloadResult</returns>
        public ApiResponse< ListPayloadResult > ListPayloadWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->ListPayload");

            var localVarPath = "/workflows/{key}/payloads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPayloadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPayloadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPayloadResult)));
            
        }

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>Task of ListPayloadResult</returns>
        public async System.Threading.Tasks.Task<ListPayloadResult> ListPayloadAsync (string key)
        {
             ApiResponse<ListPayloadResult> localVarResponse = await ListPayloadAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payloads applicable to the user in the current state of a workflow. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Workflow key.</param>
        /// <returns>Task of ApiResponse (ListPayloadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPayloadResult>> ListPayloadAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->ListPayload");

            var localVarPath = "/workflows/{key}/payloads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPayloadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPayloadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPayloadResult)));
            
        }

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>PerformWorkflowActionResult</returns>
        public PerformWorkflowActionResult PerformWorkflowAction (string key, PerformWorkflowActionInput input)
        {
             ApiResponse<PerformWorkflowActionResult> localVarResponse = PerformWorkflowActionWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>ApiResponse of PerformWorkflowActionResult</returns>
        public ApiResponse< PerformWorkflowActionResult > PerformWorkflowActionWithHttpInfo (string key, PerformWorkflowActionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->PerformWorkflowAction");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->PerformWorkflowAction");

            var localVarPath = "/workflows/{key}/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformWorkflowAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformWorkflowActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformWorkflowActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformWorkflowActionResult)));
            
        }

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>Task of PerformWorkflowActionResult</returns>
        public async System.Threading.Tasks.Task<PerformWorkflowActionResult> PerformWorkflowActionAsync (string key, PerformWorkflowActionInput input)
        {
             ApiResponse<PerformWorkflowActionResult> localVarResponse = await PerformWorkflowActionAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute an action for a participant on a workflow.Get back list of available actions after successful execution. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">PerformWorkflowAction Input</param>
        /// <returns>Task of ApiResponse (PerformWorkflowActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PerformWorkflowActionResult>> PerformWorkflowActionAsyncWithHttpInfo (string key, PerformWorkflowActionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->PerformWorkflowAction");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->PerformWorkflowAction");

            var localVarPath = "/workflows/{key}/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformWorkflowAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformWorkflowActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformWorkflowActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformWorkflowActionResult)));
            
        }

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>PublishLaunchableResult</returns>
        public PublishLaunchableResult PublishLaunchable (string key, string target, PublishLaunchableInput input)
        {
             ApiResponse<PublishLaunchableResult> localVarResponse = PublishLaunchableWithHttpInfo(key, target, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>ApiResponse of PublishLaunchableResult</returns>
        public ApiResponse< PublishLaunchableResult > PublishLaunchableWithHttpInfo (string key, string target, PublishLaunchableInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->PublishLaunchable");
            // verify the required parameter 'target' is set
            if (target == null)
                throw new ApiException(400, "Missing required parameter 'target' when calling WorkflowApi->PublishLaunchable");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->PublishLaunchable");

            var localVarPath = "/workflows/launchables/{key}/publish/{target}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (target != null) localVarPathParams.Add("target", Configuration.ApiClient.ParameterToString(target)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublishLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishLaunchableResult)));
            
        }

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>Task of PublishLaunchableResult</returns>
        public async System.Threading.Tasks.Task<PublishLaunchableResult> PublishLaunchableAsync (string key, string target, PublishLaunchableInput input)
        {
             ApiResponse<PublishLaunchableResult> localVarResponse = await PublishLaunchableAsyncWithHttpInfo(key, target, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish workflow launchable.Only admin of workflow can publish it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow definition.</param>
        /// <param name="target">Key of target location.</param>
        /// <param name="input">PublishLaunchable Input</param>
        /// <returns>Task of ApiResponse (PublishLaunchableResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublishLaunchableResult>> PublishLaunchableAsyncWithHttpInfo (string key, string target, PublishLaunchableInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->PublishLaunchable");
            // verify the required parameter 'target' is set
            if (target == null)
                throw new ApiException(400, "Missing required parameter 'target' when calling WorkflowApi->PublishLaunchable");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->PublishLaunchable");

            var localVarPath = "/workflows/launchables/{key}/publish/{target}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (target != null) localVarPathParams.Add("target", Configuration.ApiClient.ParameterToString(target)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLaunchable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishLaunchableResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublishLaunchableResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishLaunchableResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>StartWorkflowResult</returns>
        public StartWorkflowResult StartWorkflow (StartWorkflowInput input)
        {
             ApiResponse<StartWorkflowResult> localVarResponse = StartWorkflowWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>ApiResponse of StartWorkflowResult</returns>
        public ApiResponse< StartWorkflowResult > StartWorkflowWithHttpInfo (StartWorkflowInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->StartWorkflow");

            var localVarPath = "/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartWorkflowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartWorkflowResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartWorkflowResult)));
            
        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>Task of StartWorkflowResult</returns>
        public async System.Threading.Tasks.Task<StartWorkflowResult> StartWorkflowAsync (StartWorkflowInput input)
        {
             ApiResponse<StartWorkflowResult> localVarResponse = await StartWorkflowAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workflow launchable from an uploaded workflow xml file andadditional meta data. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">StartWorkflow Input</param>
        /// <returns>Task of ApiResponse (StartWorkflowResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartWorkflowResult>> StartWorkflowAsyncWithHttpInfo (StartWorkflowInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->StartWorkflow");

            var localVarPath = "/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartWorkflowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartWorkflowResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartWorkflowResult)));
            
        }

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>UpdateRolesResult</returns>
        public UpdateRolesResult UpdateRoles (string key, UpdateRolesInput input)
        {
             ApiResponse<UpdateRolesResult> localVarResponse = UpdateRolesWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>ApiResponse of UpdateRolesResult</returns>
        public ApiResponse< UpdateRolesResult > UpdateRolesWithHttpInfo (string key, UpdateRolesInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->UpdateRoles");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->UpdateRoles");

            var localVarPath = "/workflows/{key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRolesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRolesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRolesResult)));
            
        }

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>Task of UpdateRolesResult</returns>
        public async System.Threading.Tasks.Task<UpdateRolesResult> UpdateRolesAsync (string key, UpdateRolesInput input)
        {
             ApiResponse<UpdateRolesResult> localVarResponse = await UpdateRolesAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update roles assignment of a workflow or a workflow step. Anincremental/delta update applies additional assignment overcurrent one; it also tolerates an invalid resulting assignment(as whole). A WorkflowRolesRecord with empty role list effectivelyremoves a participant. Only participant of an admin role mayupdate roles.Usually a workflow step just uses the role assignment of theworkflow whole. When this API is called on a step for thefirst time, a snapshot is made of the current assignment of the 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRoles Input</param>
        /// <returns>Task of ApiResponse (UpdateRolesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateRolesResult>> UpdateRolesAsyncWithHttpInfo (string key, UpdateRolesInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling WorkflowApi->UpdateRoles");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling WorkflowApi->UpdateRoles");

            var localVarPath = "/workflows/{key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRolesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRolesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRolesResult)));
            
        }

    }
}
