/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRuleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>CreateRuleResult</returns>
        CreateRuleResult CreateRule (CreateRuleInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>ApiResponse of CreateRuleResult</returns>
        ApiResponse<CreateRuleResult> CreateRuleWithHttpInfo (CreateRuleInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>DeleteRuleResult</returns>
        DeleteRuleResult DeleteRule (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of DeleteRuleResult</returns>
        ApiResponse<DeleteRuleResult> DeleteRuleWithHttpInfo (string key);
        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>GetAttributesResult</returns>
        GetAttributesResult GetAttributes (string zone);

        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>ApiResponse of GetAttributesResult</returns>
        ApiResponse<GetAttributesResult> GetAttributesWithHttpInfo (string zone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>GetByNameResult</returns>
        GetByNameResult GetByName (string name, string ruleGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>ApiResponse of GetByNameResult</returns>
        ApiResponse<GetByNameResult> GetByNameWithHttpInfo (string name, string ruleGroup);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>GetDefaultPresetRulesResult</returns>
        GetDefaultPresetRulesResult GetDefaultPresetRules (string ruleGroup, string pg = null, string contentKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>ApiResponse of GetDefaultPresetRulesResult</returns>
        ApiResponse<GetDefaultPresetRulesResult> GetDefaultPresetRulesWithHttpInfo (string ruleGroup, string pg = null, string contentKey = null);
        /// <summary>
        /// Returns Filters for given zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>GetFiltersResult</returns>
        GetFiltersResult GetFilters (string zone, string type = null);

        /// <summary>
        /// Returns Filters for given zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>ApiResponse of GetFiltersResult</returns>
        ApiResponse<GetFiltersResult> GetFiltersWithHttpInfo (string zone, string type = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLocationsDefaultRulesResult</returns>
        GetLocationsDefaultRulesResult GetLocationsDefaultRules ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLocationsDefaultRulesResult</returns>
        ApiResponse<GetLocationsDefaultRulesResult> GetLocationsDefaultRulesWithHttpInfo ();
        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>GetMetaDataResult</returns>
        GetMetaDataResult GetMetaData (string ruleAttributeGroupName = null);

        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>ApiResponse of GetMetaDataResult</returns>
        ApiResponse<GetMetaDataResult> GetMetaDataWithHttpInfo (string ruleAttributeGroupName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetPresetRulesResult</returns>
        GetPresetRulesResult GetPresetRules (string presetType, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetPresetRulesResult</returns>
        ApiResponse<GetPresetRulesResult> GetPresetRulesWithHttpInfo (string presetType, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>GetPushMetaDataResult</returns>
        GetPushMetaDataResult GetPushMetaData (string ruleKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>ApiResponse of GetPushMetaDataResult</returns>
        ApiResponse<GetPushMetaDataResult> GetPushMetaDataWithHttpInfo (string ruleKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetRedNutDefaultRulesResult</returns>
        GetRedNutDefaultRulesResult GetRedNutDefaultRules ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetRedNutDefaultRulesResult</returns>
        ApiResponse<GetRedNutDefaultRulesResult> GetRedNutDefaultRulesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetRuleResult</returns>
        GetRuleResult GetRule (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetRuleResult</returns>
        ApiResponse<GetRuleResult> GetRuleWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>GetRuleMetaDataResult</returns>
        GetRuleMetaDataResult GetRuleMetaData (string ruleKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>ApiResponse of GetRuleMetaDataResult</returns>
        ApiResponse<GetRuleMetaDataResult> GetRuleMetaDataWithHttpInfo (string ruleKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>GetRulesResult</returns>
        GetRulesResult GetRules (string options, string pg, string contentKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>ApiResponse of GetRulesResult</returns>
        ApiResponse<GetRulesResult> GetRulesWithHttpInfo (string options, string pg, string contentKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>GetTypesMetaDataResult</returns>
        GetTypesMetaDataResult GetTypesMetaData (string ruleAttributeGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>ApiResponse of GetTypesMetaDataResult</returns>
        ApiResponse<GetTypesMetaDataResult> GetTypesMetaDataWithHttpInfo (string ruleAttributeGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>UpdateRuleResult</returns>
        UpdateRuleResult UpdateRule (string key, UpdateRuleInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>ApiResponse of UpdateRuleResult</returns>
        ApiResponse<UpdateRuleResult> UpdateRuleWithHttpInfo (string key, UpdateRuleInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>Task of CreateRuleResult</returns>
        System.Threading.Tasks.Task<CreateRuleResult> CreateRuleAsync (CreateRuleInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>Task of ApiResponse (CreateRuleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRuleResult>> CreateRuleAsyncWithHttpInfo (CreateRuleInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of DeleteRuleResult</returns>
        System.Threading.Tasks.Task<DeleteRuleResult> DeleteRuleAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (DeleteRuleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRuleResult>> DeleteRuleAsyncWithHttpInfo (string key);
        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>Task of GetAttributesResult</returns>
        System.Threading.Tasks.Task<GetAttributesResult> GetAttributesAsync (string zone);

        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>Task of ApiResponse (GetAttributesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAttributesResult>> GetAttributesAsyncWithHttpInfo (string zone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>Task of GetByNameResult</returns>
        System.Threading.Tasks.Task<GetByNameResult> GetByNameAsync (string name, string ruleGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>Task of ApiResponse (GetByNameResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetByNameResult>> GetByNameAsyncWithHttpInfo (string name, string ruleGroup);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of GetDefaultPresetRulesResult</returns>
        System.Threading.Tasks.Task<GetDefaultPresetRulesResult> GetDefaultPresetRulesAsync (string ruleGroup, string pg = null, string contentKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetDefaultPresetRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDefaultPresetRulesResult>> GetDefaultPresetRulesAsyncWithHttpInfo (string ruleGroup, string pg = null, string contentKey = null);
        /// <summary>
        /// Returns Filters for given zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>Task of GetFiltersResult</returns>
        System.Threading.Tasks.Task<GetFiltersResult> GetFiltersAsync (string zone, string type = null);

        /// <summary>
        /// Returns Filters for given zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>Task of ApiResponse (GetFiltersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFiltersResult>> GetFiltersAsyncWithHttpInfo (string zone, string type = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLocationsDefaultRulesResult</returns>
        System.Threading.Tasks.Task<GetLocationsDefaultRulesResult> GetLocationsDefaultRulesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLocationsDefaultRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLocationsDefaultRulesResult>> GetLocationsDefaultRulesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>Task of GetMetaDataResult</returns>
        System.Threading.Tasks.Task<GetMetaDataResult> GetMetaDataAsync (string ruleAttributeGroupName = null);

        /// <summary>
        /// Returns MetaData for Rule Attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>Task of ApiResponse (GetMetaDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetaDataResult>> GetMetaDataAsyncWithHttpInfo (string ruleAttributeGroupName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetPresetRulesResult</returns>
        System.Threading.Tasks.Task<GetPresetRulesResult> GetPresetRulesAsync (string presetType, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetPresetRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPresetRulesResult>> GetPresetRulesAsyncWithHttpInfo (string presetType, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of GetPushMetaDataResult</returns>
        System.Threading.Tasks.Task<GetPushMetaDataResult> GetPushMetaDataAsync (string ruleKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetPushMetaDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPushMetaDataResult>> GetPushMetaDataAsyncWithHttpInfo (string ruleKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetRedNutDefaultRulesResult</returns>
        System.Threading.Tasks.Task<GetRedNutDefaultRulesResult> GetRedNutDefaultRulesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetRedNutDefaultRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRedNutDefaultRulesResult>> GetRedNutDefaultRulesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetRuleResult</returns>
        System.Threading.Tasks.Task<GetRuleResult> GetRuleAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetRuleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRuleResult>> GetRuleAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of GetRuleMetaDataResult</returns>
        System.Threading.Tasks.Task<GetRuleMetaDataResult> GetRuleMetaDataAsync (string ruleKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRuleMetaDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRuleMetaDataResult>> GetRuleMetaDataAsyncWithHttpInfo (string ruleKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of GetRulesResult</returns>
        System.Threading.Tasks.Task<GetRulesResult> GetRulesAsync (string options, string pg, string contentKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRulesResult>> GetRulesAsyncWithHttpInfo (string options, string pg, string contentKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>Task of GetTypesMetaDataResult</returns>
        System.Threading.Tasks.Task<GetTypesMetaDataResult> GetTypesMetaDataAsync (string ruleAttributeGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>Task of ApiResponse (GetTypesMetaDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTypesMetaDataResult>> GetTypesMetaDataAsyncWithHttpInfo (string ruleAttributeGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>Task of UpdateRuleResult</returns>
        System.Threading.Tasks.Task<UpdateRuleResult> UpdateRuleAsync (string key, UpdateRuleInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>Task of ApiResponse (UpdateRuleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRuleResult>> UpdateRuleAsyncWithHttpInfo (string key, UpdateRuleInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RuleApi : IRuleApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public RuleApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public RuleApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RuleApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>CreateRuleResult</returns>
        public CreateRuleResult CreateRule (CreateRuleInput input)
        {
             ApiResponse<CreateRuleResult> localVarResponse = CreateRuleWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>ApiResponse of CreateRuleResult</returns>
        public ApiResponse< CreateRuleResult > CreateRuleWithHttpInfo (CreateRuleInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling RuleApi->CreateRule");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>Task of CreateRuleResult</returns>
        public async System.Threading.Tasks.Task<CreateRuleResult> CreateRuleAsync (CreateRuleInput input)
        {
             ApiResponse<CreateRuleResult> localVarResponse = await CreateRuleAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateRule Input</param>
        /// <returns>Task of ApiResponse (CreateRuleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateRuleResult>> CreateRuleAsyncWithHttpInfo (CreateRuleInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling RuleApi->CreateRule");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>DeleteRuleResult</returns>
        public DeleteRuleResult DeleteRule (string key)
        {
             ApiResponse<DeleteRuleResult> localVarResponse = DeleteRuleWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of DeleteRuleResult</returns>
        public ApiResponse< DeleteRuleResult > DeleteRuleWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->DeleteRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of DeleteRuleResult</returns>
        public async System.Threading.Tasks.Task<DeleteRuleResult> DeleteRuleAsync (string key)
        {
             ApiResponse<DeleteRuleResult> localVarResponse = await DeleteRuleAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (DeleteRuleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteRuleResult>> DeleteRuleAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->DeleteRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteRuleResult)));
            
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>GetAttributesResult</returns>
        public GetAttributesResult GetAttributes (string zone)
        {
             ApiResponse<GetAttributesResult> localVarResponse = GetAttributesWithHttpInfo(zone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>ApiResponse of GetAttributesResult</returns>
        public ApiResponse< GetAttributesResult > GetAttributesWithHttpInfo (string zone)
        {
            // verify the required parameter 'zone' is set
            if (zone == null)
                throw new ApiException(400, "Missing required parameter 'zone' when calling RuleApi->GetAttributes");

            var localVarPath = "/rulesv2/metadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (zone != null) localVarQueryParams.Add("zone", Configuration.ApiClient.ParameterToString(zone)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttributesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributesResult)));
            
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>Task of GetAttributesResult</returns>
        public async System.Threading.Tasks.Task<GetAttributesResult> GetAttributesAsync (string zone)
        {
             ApiResponse<GetAttributesResult> localVarResponse = await GetAttributesAsyncWithHttpInfo(zone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <returns>Task of ApiResponse (GetAttributesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttributesResult>> GetAttributesAsyncWithHttpInfo (string zone)
        {
            // verify the required parameter 'zone' is set
            if (zone == null)
                throw new ApiException(400, "Missing required parameter 'zone' when calling RuleApi->GetAttributes");

            var localVarPath = "/rulesv2/metadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (zone != null) localVarQueryParams.Add("zone", Configuration.ApiClient.ParameterToString(zone)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttributesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>GetByNameResult</returns>
        public GetByNameResult GetByName (string name, string ruleGroup)
        {
             ApiResponse<GetByNameResult> localVarResponse = GetByNameWithHttpInfo(name, ruleGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>ApiResponse of GetByNameResult</returns>
        public ApiResponse< GetByNameResult > GetByNameWithHttpInfo (string name, string ruleGroup)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RuleApi->GetByName");
            // verify the required parameter 'ruleGroup' is set
            if (ruleGroup == null)
                throw new ApiException(400, "Missing required parameter 'ruleGroup' when calling RuleApi->GetByName");

            var localVarPath = "/rules/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (ruleGroup != null) localVarQueryParams.Add("ruleGroup", Configuration.ApiClient.ParameterToString(ruleGroup)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetByNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetByNameResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetByNameResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>Task of GetByNameResult</returns>
        public async System.Threading.Tasks.Task<GetByNameResult> GetByNameAsync (string name, string ruleGroup)
        {
             ApiResponse<GetByNameResult> localVarResponse = await GetByNameAsyncWithHttpInfo(name, ruleGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="ruleGroup"></param>
        /// <returns>Task of ApiResponse (GetByNameResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetByNameResult>> GetByNameAsyncWithHttpInfo (string name, string ruleGroup)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RuleApi->GetByName");
            // verify the required parameter 'ruleGroup' is set
            if (ruleGroup == null)
                throw new ApiException(400, "Missing required parameter 'ruleGroup' when calling RuleApi->GetByName");

            var localVarPath = "/rules/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (ruleGroup != null) localVarQueryParams.Add("ruleGroup", Configuration.ApiClient.ParameterToString(ruleGroup)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetByNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetByNameResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetByNameResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>GetDefaultPresetRulesResult</returns>
        public GetDefaultPresetRulesResult GetDefaultPresetRules (string ruleGroup, string pg = null, string contentKey = null)
        {
             ApiResponse<GetDefaultPresetRulesResult> localVarResponse = GetDefaultPresetRulesWithHttpInfo(ruleGroup, pg, contentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>ApiResponse of GetDefaultPresetRulesResult</returns>
        public ApiResponse< GetDefaultPresetRulesResult > GetDefaultPresetRulesWithHttpInfo (string ruleGroup, string pg = null, string contentKey = null)
        {
            // verify the required parameter 'ruleGroup' is set
            if (ruleGroup == null)
                throw new ApiException(400, "Missing required parameter 'ruleGroup' when calling RuleApi->GetDefaultPresetRules");

            var localVarPath = "/rules/defaultpreset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleGroup != null) localVarQueryParams.Add("ruleGroup", Configuration.ApiClient.ParameterToString(ruleGroup)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultPresetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefaultPresetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefaultPresetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefaultPresetRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of GetDefaultPresetRulesResult</returns>
        public async System.Threading.Tasks.Task<GetDefaultPresetRulesResult> GetDefaultPresetRulesAsync (string ruleGroup, string pg = null, string contentKey = null)
        {
             ApiResponse<GetDefaultPresetRulesResult> localVarResponse = await GetDefaultPresetRulesAsyncWithHttpInfo(ruleGroup, pg, contentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleGroup"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetDefaultPresetRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDefaultPresetRulesResult>> GetDefaultPresetRulesAsyncWithHttpInfo (string ruleGroup, string pg = null, string contentKey = null)
        {
            // verify the required parameter 'ruleGroup' is set
            if (ruleGroup == null)
                throw new ApiException(400, "Missing required parameter 'ruleGroup' when calling RuleApi->GetDefaultPresetRules");

            var localVarPath = "/rules/defaultpreset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleGroup != null) localVarQueryParams.Add("ruleGroup", Configuration.ApiClient.ParameterToString(ruleGroup)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultPresetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefaultPresetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefaultPresetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefaultPresetRulesResult)));
            
        }

        /// <summary>
        /// Returns Filters for given zone 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>GetFiltersResult</returns>
        public GetFiltersResult GetFilters (string zone, string type = null)
        {
             ApiResponse<GetFiltersResult> localVarResponse = GetFiltersWithHttpInfo(zone, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Filters for given zone 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>ApiResponse of GetFiltersResult</returns>
        public ApiResponse< GetFiltersResult > GetFiltersWithHttpInfo (string zone, string type = null)
        {
            // verify the required parameter 'zone' is set
            if (zone == null)
                throw new ApiException(400, "Missing required parameter 'zone' when calling RuleApi->GetFilters");

            var localVarPath = "/rulesv2/filters/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (zone != null) localVarQueryParams.Add("zone", Configuration.ApiClient.ParameterToString(zone)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFiltersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFiltersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFiltersResult)));
            
        }

        /// <summary>
        /// Returns Filters for given zone 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>Task of GetFiltersResult</returns>
        public async System.Threading.Tasks.Task<GetFiltersResult> GetFiltersAsync (string zone, string type = null)
        {
             ApiResponse<GetFiltersResult> localVarResponse = await GetFiltersAsyncWithHttpInfo(zone, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns Filters for given zone 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">- zone(activities/people/locations/comment) for which filters are requested</param>
        /// <param name="type">- Type of filters basic (BFS)/preset (PFS) (optional)</param>
        /// <returns>Task of ApiResponse (GetFiltersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFiltersResult>> GetFiltersAsyncWithHttpInfo (string zone, string type = null)
        {
            // verify the required parameter 'zone' is set
            if (zone == null)
                throw new ApiException(400, "Missing required parameter 'zone' when calling RuleApi->GetFilters");

            var localVarPath = "/rulesv2/filters/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (zone != null) localVarQueryParams.Add("zone", Configuration.ApiClient.ParameterToString(zone)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFiltersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFiltersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFiltersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLocationsDefaultRulesResult</returns>
        public GetLocationsDefaultRulesResult GetLocationsDefaultRules ()
        {
             ApiResponse<GetLocationsDefaultRulesResult> localVarResponse = GetLocationsDefaultRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLocationsDefaultRulesResult</returns>
        public ApiResponse< GetLocationsDefaultRulesResult > GetLocationsDefaultRulesWithHttpInfo ()
        {

            var localVarPath = "/rules/locations/default/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationsDefaultRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLocationsDefaultRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLocationsDefaultRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLocationsDefaultRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLocationsDefaultRulesResult</returns>
        public async System.Threading.Tasks.Task<GetLocationsDefaultRulesResult> GetLocationsDefaultRulesAsync ()
        {
             ApiResponse<GetLocationsDefaultRulesResult> localVarResponse = await GetLocationsDefaultRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLocationsDefaultRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLocationsDefaultRulesResult>> GetLocationsDefaultRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/rules/locations/default/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationsDefaultRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLocationsDefaultRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLocationsDefaultRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLocationsDefaultRulesResult)));
            
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>GetMetaDataResult</returns>
        public GetMetaDataResult GetMetaData (string ruleAttributeGroupName = null)
        {
             ApiResponse<GetMetaDataResult> localVarResponse = GetMetaDataWithHttpInfo(ruleAttributeGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>ApiResponse of GetMetaDataResult</returns>
        public ApiResponse< GetMetaDataResult > GetMetaDataWithHttpInfo (string ruleAttributeGroupName = null)
        {

            var localVarPath = "/rules/metadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleAttributeGroupName != null) localVarQueryParams.Add("ruleAttributeGroupName", Configuration.ApiClient.ParameterToString(ruleAttributeGroupName)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMetaDataResult)));
            
        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>Task of GetMetaDataResult</returns>
        public async System.Threading.Tasks.Task<GetMetaDataResult> GetMetaDataAsync (string ruleAttributeGroupName = null)
        {
             ApiResponse<GetMetaDataResult> localVarResponse = await GetMetaDataAsyncWithHttpInfo(ruleAttributeGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns MetaData for Rule Attributes 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"> (optional)</param>
        /// <returns>Task of ApiResponse (GetMetaDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMetaDataResult>> GetMetaDataAsyncWithHttpInfo (string ruleAttributeGroupName = null)
        {

            var localVarPath = "/rules/metadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleAttributeGroupName != null) localVarQueryParams.Add("ruleAttributeGroupName", Configuration.ApiClient.ParameterToString(ruleAttributeGroupName)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetPresetRulesResult</returns>
        public GetPresetRulesResult GetPresetRules (string presetType, string pg = null)
        {
             ApiResponse<GetPresetRulesResult> localVarResponse = GetPresetRulesWithHttpInfo(presetType, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetPresetRulesResult</returns>
        public ApiResponse< GetPresetRulesResult > GetPresetRulesWithHttpInfo (string presetType, string pg = null)
        {
            // verify the required parameter 'presetType' is set
            if (presetType == null)
                throw new ApiException(400, "Missing required parameter 'presetType' when calling RuleApi->GetPresetRules");

            var localVarPath = "/rules/preset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (presetType != null) localVarQueryParams.Add("preset_type", Configuration.ApiClient.ParameterToString(presetType)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPresetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPresetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPresetRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetPresetRulesResult</returns>
        public async System.Threading.Tasks.Task<GetPresetRulesResult> GetPresetRulesAsync (string presetType, string pg = null)
        {
             ApiResponse<GetPresetRulesResult> localVarResponse = await GetPresetRulesAsyncWithHttpInfo(presetType, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetPresetRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPresetRulesResult>> GetPresetRulesAsyncWithHttpInfo (string presetType, string pg = null)
        {
            // verify the required parameter 'presetType' is set
            if (presetType == null)
                throw new ApiException(400, "Missing required parameter 'presetType' when calling RuleApi->GetPresetRules");

            var localVarPath = "/rules/preset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (presetType != null) localVarQueryParams.Add("preset_type", Configuration.ApiClient.ParameterToString(presetType)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPresetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPresetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPresetRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>GetPushMetaDataResult</returns>
        public GetPushMetaDataResult GetPushMetaData (string ruleKey = null)
        {
             ApiResponse<GetPushMetaDataResult> localVarResponse = GetPushMetaDataWithHttpInfo(ruleKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>ApiResponse of GetPushMetaDataResult</returns>
        public ApiResponse< GetPushMetaDataResult > GetPushMetaDataWithHttpInfo (string ruleKey = null)
        {

            var localVarPath = "/rules/pushmetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleKey != null) localVarQueryParams.Add("ruleKey", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of GetPushMetaDataResult</returns>
        public async System.Threading.Tasks.Task<GetPushMetaDataResult> GetPushMetaDataAsync (string ruleKey = null)
        {
             ApiResponse<GetPushMetaDataResult> localVarResponse = await GetPushMetaDataAsyncWithHttpInfo(ruleKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetPushMetaDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPushMetaDataResult>> GetPushMetaDataAsyncWithHttpInfo (string ruleKey = null)
        {

            var localVarPath = "/rules/pushmetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleKey != null) localVarQueryParams.Add("ruleKey", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetRedNutDefaultRulesResult</returns>
        public GetRedNutDefaultRulesResult GetRedNutDefaultRules ()
        {
             ApiResponse<GetRedNutDefaultRulesResult> localVarResponse = GetRedNutDefaultRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetRedNutDefaultRulesResult</returns>
        public ApiResponse< GetRedNutDefaultRulesResult > GetRedNutDefaultRulesWithHttpInfo ()
        {

            var localVarPath = "/rules/rednut/default/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedNutDefaultRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRedNutDefaultRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRedNutDefaultRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRedNutDefaultRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetRedNutDefaultRulesResult</returns>
        public async System.Threading.Tasks.Task<GetRedNutDefaultRulesResult> GetRedNutDefaultRulesAsync ()
        {
             ApiResponse<GetRedNutDefaultRulesResult> localVarResponse = await GetRedNutDefaultRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetRedNutDefaultRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRedNutDefaultRulesResult>> GetRedNutDefaultRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/rules/rednut/default/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedNutDefaultRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRedNutDefaultRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRedNutDefaultRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRedNutDefaultRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetRuleResult</returns>
        public GetRuleResult GetRule (string key)
        {
             ApiResponse<GetRuleResult> localVarResponse = GetRuleWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetRuleResult</returns>
        public ApiResponse< GetRuleResult > GetRuleWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->GetRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetRuleResult</returns>
        public async System.Threading.Tasks.Task<GetRuleResult> GetRuleAsync (string key)
        {
             ApiResponse<GetRuleResult> localVarResponse = await GetRuleAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetRuleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRuleResult>> GetRuleAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->GetRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>GetRuleMetaDataResult</returns>
        public GetRuleMetaDataResult GetRuleMetaData (string ruleKey = null)
        {
             ApiResponse<GetRuleMetaDataResult> localVarResponse = GetRuleMetaDataWithHttpInfo(ruleKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>ApiResponse of GetRuleMetaDataResult</returns>
        public ApiResponse< GetRuleMetaDataResult > GetRuleMetaDataWithHttpInfo (string ruleKey = null)
        {

            var localVarPath = "/rules/rulemetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleKey != null) localVarQueryParams.Add("ruleKey", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of GetRuleMetaDataResult</returns>
        public async System.Threading.Tasks.Task<GetRuleMetaDataResult> GetRuleMetaDataAsync (string ruleKey = null)
        {
             ApiResponse<GetRuleMetaDataResult> localVarResponse = await GetRuleMetaDataAsyncWithHttpInfo(ruleKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRuleMetaDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRuleMetaDataResult>> GetRuleMetaDataAsyncWithHttpInfo (string ruleKey = null)
        {

            var localVarPath = "/rules/rulemetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleKey != null) localVarQueryParams.Add("ruleKey", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>GetRulesResult</returns>
        public GetRulesResult GetRules (string options, string pg, string contentKey = null)
        {
             ApiResponse<GetRulesResult> localVarResponse = GetRulesWithHttpInfo(options, pg, contentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>ApiResponse of GetRulesResult</returns>
        public ApiResponse< GetRulesResult > GetRulesWithHttpInfo (string options, string pg, string contentKey = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling RuleApi->GetRules");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling RuleApi->GetRules");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of GetRulesResult</returns>
        public async System.Threading.Tasks.Task<GetRulesResult> GetRulesAsync (string options, string pg, string contentKey = null)
        {
             ApiResponse<GetRulesResult> localVarResponse = await GetRulesAsyncWithHttpInfo(options, pg, contentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;RuleOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="contentKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRulesResult>> GetRulesAsyncWithHttpInfo (string options, string pg, string contentKey = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling RuleApi->GetRules");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling RuleApi->GetRules");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>GetTypesMetaDataResult</returns>
        public GetTypesMetaDataResult GetTypesMetaData (string ruleAttributeGroupName)
        {
             ApiResponse<GetTypesMetaDataResult> localVarResponse = GetTypesMetaDataWithHttpInfo(ruleAttributeGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>ApiResponse of GetTypesMetaDataResult</returns>
        public ApiResponse< GetTypesMetaDataResult > GetTypesMetaDataWithHttpInfo (string ruleAttributeGroupName)
        {
            // verify the required parameter 'ruleAttributeGroupName' is set
            if (ruleAttributeGroupName == null)
                throw new ApiException(400, "Missing required parameter 'ruleAttributeGroupName' when calling RuleApi->GetTypesMetaData");

            var localVarPath = "/rules/typesmetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleAttributeGroupName != null) localVarQueryParams.Add("ruleAttributeGroupName", Configuration.ApiClient.ParameterToString(ruleAttributeGroupName)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypesMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTypesMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTypesMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTypesMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>Task of GetTypesMetaDataResult</returns>
        public async System.Threading.Tasks.Task<GetTypesMetaDataResult> GetTypesMetaDataAsync (string ruleAttributeGroupName)
        {
             ApiResponse<GetTypesMetaDataResult> localVarResponse = await GetTypesMetaDataAsyncWithHttpInfo(ruleAttributeGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleAttributeGroupName"></param>
        /// <returns>Task of ApiResponse (GetTypesMetaDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTypesMetaDataResult>> GetTypesMetaDataAsyncWithHttpInfo (string ruleAttributeGroupName)
        {
            // verify the required parameter 'ruleAttributeGroupName' is set
            if (ruleAttributeGroupName == null)
                throw new ApiException(400, "Missing required parameter 'ruleAttributeGroupName' when calling RuleApi->GetTypesMetaData");

            var localVarPath = "/rules/typesmetadata/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ruleAttributeGroupName != null) localVarQueryParams.Add("ruleAttributeGroupName", Configuration.ApiClient.ParameterToString(ruleAttributeGroupName)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypesMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTypesMetaDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTypesMetaDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTypesMetaDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>UpdateRuleResult</returns>
        public UpdateRuleResult UpdateRule (string key, UpdateRuleInput input)
        {
             ApiResponse<UpdateRuleResult> localVarResponse = UpdateRuleWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>ApiResponse of UpdateRuleResult</returns>
        public ApiResponse< UpdateRuleResult > UpdateRuleWithHttpInfo (string key, UpdateRuleInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->UpdateRule");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling RuleApi->UpdateRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>Task of UpdateRuleResult</returns>
        public async System.Threading.Tasks.Task<UpdateRuleResult> UpdateRuleAsync (string key, UpdateRuleInput input)
        {
             ApiResponse<UpdateRuleResult> localVarResponse = await UpdateRuleAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateRule Input</param>
        /// <returns>Task of ApiResponse (UpdateRuleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateRuleResult>> UpdateRuleAsyncWithHttpInfo (string key, UpdateRuleInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RuleApi->UpdateRule");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling RuleApi->UpdateRule");

            var localVarPath = "/rules/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRuleResult)));
            
        }

    }
}
