/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISparcApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets action stamp consolidated all counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>GetASCCountsResult</returns>
        GetASCCountsResult GetASCCounts (string key, string flagFilter = null);

        /// <summary>
        /// Gets action stamp consolidated all counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>ApiResponse of GetASCCountsResult</returns>
        ApiResponse<GetASCCountsResult> GetASCCountsWithHttpInfo (string key, string flagFilter = null);
        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetAttachmentUnreadCountsResult</returns>
        GetAttachmentUnreadCountsResult GetAttachmentUnreadCounts (string objectKey);

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetAttachmentUnreadCountsResult</returns>
        ApiResponse<GetAttachmentUnreadCountsResult> GetAttachmentUnreadCountsWithHttpInfo (string objectKey);
        /// <summary>
        /// Get new unread tiles count for Chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>GetChatNUTCountResult</returns>
        GetChatNUTCountResult GetChatNUTCount (string spaceKey = null);

        /// <summary>
        /// Get new unread tiles count for Chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>ApiResponse of GetChatNUTCountResult</returns>
        ApiResponse<GetChatNUTCountResult> GetChatNUTCountWithHttpInfo (string spaceKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>GetLMBCountResult</returns>
        GetLMBCountResult GetLMBCount (string objectKey, string containerKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>ApiResponse of GetLMBCountResult</returns>
        ApiResponse<GetLMBCountResult> GetLMBCountWithHttpInfo (string objectKey, string containerKey = null);
        /// <summary>
        /// Gets last action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetLatestActionResult</returns>
        GetLatestActionResult GetLatestAction (string objectKey);

        /// <summary>
        /// Gets last action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetLatestActionResult</returns>
        ApiResponse<GetLatestActionResult> GetLatestActionWithHttpInfo (string objectKey);
        /// <summary>
        /// Get new unread tiles count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetNUTCountResult</returns>
        GetNUTCountResult GetNUTCount ();

        /// <summary>
        /// Get new unread tiles count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetNUTCountResult</returns>
        ApiResponse<GetNUTCountResult> GetNUTCountWithHttpInfo ();
        /// <summary>
        /// Get skinny data of specified sparc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSkinnyDataResult</returns>
        GetSkinnyDataResult GetSkinnyData (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null);

        /// <summary>
        /// Get skinny data of specified sparc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSkinnyDataResult</returns>
        ApiResponse<GetSkinnyDataResult> GetSkinnyDataWithHttpInfo (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>GetSparcActionsResult</returns>
        GetSparcActionsResult GetSparcActions (string options, string objectKey, string pg, bool? cache = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>ApiResponse of GetSparcActionsResult</returns>
        ApiResponse<GetSparcActionsResult> GetSparcActionsWithHttpInfo (string options, string objectKey, string pg, bool? cache = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets action stamp consolidated all counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>Task of GetASCCountsResult</returns>
        System.Threading.Tasks.Task<GetASCCountsResult> GetASCCountsAsync (string key, string flagFilter = null);

        /// <summary>
        /// Gets action stamp consolidated all counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (GetASCCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetASCCountsResult>> GetASCCountsAsyncWithHttpInfo (string key, string flagFilter = null);
        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetAttachmentUnreadCountsResult</returns>
        System.Threading.Tasks.Task<GetAttachmentUnreadCountsResult> GetAttachmentUnreadCountsAsync (string objectKey);

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetAttachmentUnreadCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAttachmentUnreadCountsResult>> GetAttachmentUnreadCountsAsyncWithHttpInfo (string objectKey);
        /// <summary>
        /// Get new unread tiles count for Chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of GetChatNUTCountResult</returns>
        System.Threading.Tasks.Task<GetChatNUTCountResult> GetChatNUTCountAsync (string spaceKey = null);

        /// <summary>
        /// Get new unread tiles count for Chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetChatNUTCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChatNUTCountResult>> GetChatNUTCountAsyncWithHttpInfo (string spaceKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of GetLMBCountResult</returns>
        System.Threading.Tasks.Task<GetLMBCountResult> GetLMBCountAsync (string objectKey, string containerKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetLMBCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLMBCountResult>> GetLMBCountAsyncWithHttpInfo (string objectKey, string containerKey = null);
        /// <summary>
        /// Gets last action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetLatestActionResult</returns>
        System.Threading.Tasks.Task<GetLatestActionResult> GetLatestActionAsync (string objectKey);

        /// <summary>
        /// Gets last action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetLatestActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLatestActionResult>> GetLatestActionAsyncWithHttpInfo (string objectKey);
        /// <summary>
        /// Get new unread tiles count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetNUTCountResult</returns>
        System.Threading.Tasks.Task<GetNUTCountResult> GetNUTCountAsync ();

        /// <summary>
        /// Get new unread tiles count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetNUTCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNUTCountResult>> GetNUTCountAsyncWithHttpInfo ();
        /// <summary>
        /// Get skinny data of specified sparc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSkinnyDataResult</returns>
        System.Threading.Tasks.Task<GetSkinnyDataResult> GetSkinnyDataAsync (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null);

        /// <summary>
        /// Get skinny data of specified sparc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSkinnyDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSkinnyDataResult>> GetSkinnyDataAsyncWithHttpInfo (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>Task of GetSparcActionsResult</returns>
        System.Threading.Tasks.Task<GetSparcActionsResult> GetSparcActionsAsync (string options, string objectKey, string pg, bool? cache = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSparcActionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSparcActionsResult>> GetSparcActionsAsyncWithHttpInfo (string options, string objectKey, string pg, bool? cache = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SparcApi : ISparcApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SparcApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public SparcApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="SparcApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public SparcApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SparcApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SparcApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets action stamp consolidated all counts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>GetASCCountsResult</returns>
        public GetASCCountsResult GetASCCounts (string key, string flagFilter = null)
        {
             ApiResponse<GetASCCountsResult> localVarResponse = GetASCCountsWithHttpInfo(key, flagFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets action stamp consolidated all counts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>ApiResponse of GetASCCountsResult</returns>
        public ApiResponse< GetASCCountsResult > GetASCCountsWithHttpInfo (string key, string flagFilter = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SparcApi->GetASCCounts");

            var localVarPath = "/sparc/ASC/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (flagFilter != null) localVarQueryParams.Add("flagFilter", Configuration.ApiClient.ParameterToString(flagFilter)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetASCCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetASCCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetASCCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetASCCountsResult)));
            
        }

        /// <summary>
        /// Gets action stamp consolidated all counts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>Task of GetASCCountsResult</returns>
        public async System.Threading.Tasks.Task<GetASCCountsResult> GetASCCountsAsync (string key, string flagFilter = null)
        {
             ApiResponse<GetASCCountsResult> localVarResponse = await GetASCCountsAsyncWithHttpInfo(key, flagFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets action stamp consolidated all counts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="flagFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (GetASCCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetASCCountsResult>> GetASCCountsAsyncWithHttpInfo (string key, string flagFilter = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SparcApi->GetASCCounts");

            var localVarPath = "/sparc/ASC/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (flagFilter != null) localVarQueryParams.Add("flagFilter", Configuration.ApiClient.ParameterToString(flagFilter)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetASCCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetASCCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetASCCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetASCCountsResult)));
            
        }

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetAttachmentUnreadCountsResult</returns>
        public GetAttachmentUnreadCountsResult GetAttachmentUnreadCounts (string objectKey)
        {
             ApiResponse<GetAttachmentUnreadCountsResult> localVarResponse = GetAttachmentUnreadCountsWithHttpInfo(objectKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetAttachmentUnreadCountsResult</returns>
        public ApiResponse< GetAttachmentUnreadCountsResult > GetAttachmentUnreadCountsWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetAttachmentUnreadCounts");

            var localVarPath = "/sparc/ASC/counts/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentUnreadCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentUnreadCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentUnreadCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentUnreadCountsResult)));
            
        }

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetAttachmentUnreadCountsResult</returns>
        public async System.Threading.Tasks.Task<GetAttachmentUnreadCountsResult> GetAttachmentUnreadCountsAsync (string objectKey)
        {
             ApiResponse<GetAttachmentUnreadCountsResult> localVarResponse = await GetAttachmentUnreadCountsAsyncWithHttpInfo(objectKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets attachment action consolidated unread counts for a given object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetAttachmentUnreadCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttachmentUnreadCountsResult>> GetAttachmentUnreadCountsAsyncWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetAttachmentUnreadCounts");

            var localVarPath = "/sparc/ASC/counts/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentUnreadCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttachmentUnreadCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAttachmentUnreadCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttachmentUnreadCountsResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count for Chat. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>GetChatNUTCountResult</returns>
        public GetChatNUTCountResult GetChatNUTCount (string spaceKey = null)
        {
             ApiResponse<GetChatNUTCountResult> localVarResponse = GetChatNUTCountWithHttpInfo(spaceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new unread tiles count for Chat. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>ApiResponse of GetChatNUTCountResult</returns>
        public ApiResponse< GetChatNUTCountResult > GetChatNUTCountWithHttpInfo (string spaceKey = null)
        {

            var localVarPath = "/sparc/getNUTCount/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spaceKey != null) localVarQueryParams.Add("spaceKey", Configuration.ApiClient.ParameterToString(spaceKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatNUTCountResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count for Chat. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of GetChatNUTCountResult</returns>
        public async System.Threading.Tasks.Task<GetChatNUTCountResult> GetChatNUTCountAsync (string spaceKey = null)
        {
             ApiResponse<GetChatNUTCountResult> localVarResponse = await GetChatNUTCountAsyncWithHttpInfo(spaceKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new unread tiles count for Chat. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetChatNUTCountResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChatNUTCountResult>> GetChatNUTCountAsyncWithHttpInfo (string spaceKey = null)
        {

            var localVarPath = "/sparc/getNUTCount/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spaceKey != null) localVarQueryParams.Add("spaceKey", Configuration.ApiClient.ParameterToString(spaceKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatNUTCountResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>GetLMBCountResult</returns>
        public GetLMBCountResult GetLMBCount (string objectKey, string containerKey = null)
        {
             ApiResponse<GetLMBCountResult> localVarResponse = GetLMBCountWithHttpInfo(objectKey, containerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>ApiResponse of GetLMBCountResult</returns>
        public ApiResponse< GetLMBCountResult > GetLMBCountWithHttpInfo (string objectKey, string containerKey = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetLMBCount");

            var localVarPath = "/sparc/LMB/count/{objectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLMBCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLMBCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLMBCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLMBCountResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of GetLMBCountResult</returns>
        public async System.Threading.Tasks.Task<GetLMBCountResult> GetLMBCountAsync (string objectKey, string containerKey = null)
        {
             ApiResponse<GetLMBCountResult> localVarResponse = await GetLMBCountAsyncWithHttpInfo(objectKey, containerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetLMBCountResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLMBCountResult>> GetLMBCountAsyncWithHttpInfo (string objectKey, string containerKey = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetLMBCount");

            var localVarPath = "/sparc/LMB/count/{objectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLMBCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLMBCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLMBCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLMBCountResult)));
            
        }

        /// <summary>
        /// Gets last action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetLatestActionResult</returns>
        public GetLatestActionResult GetLatestAction (string objectKey)
        {
             ApiResponse<GetLatestActionResult> localVarResponse = GetLatestActionWithHttpInfo(objectKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets last action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetLatestActionResult</returns>
        public ApiResponse< GetLatestActionResult > GetLatestActionWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetLatestAction");

            var localVarPath = "/sparc/lastAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLatestActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLatestActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLatestActionResult)));
            
        }

        /// <summary>
        /// Gets last action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetLatestActionResult</returns>
        public async System.Threading.Tasks.Task<GetLatestActionResult> GetLatestActionAsync (string objectKey)
        {
             ApiResponse<GetLatestActionResult> localVarResponse = await GetLatestActionAsyncWithHttpInfo(objectKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets last action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetLatestActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLatestActionResult>> GetLatestActionAsyncWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetLatestAction");

            var localVarPath = "/sparc/lastAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLatestActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLatestActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLatestActionResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetNUTCountResult</returns>
        public GetNUTCountResult GetNUTCount ()
        {
             ApiResponse<GetNUTCountResult> localVarResponse = GetNUTCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new unread tiles count. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetNUTCountResult</returns>
        public ApiResponse< GetNUTCountResult > GetNUTCountWithHttpInfo ()
        {

            var localVarPath = "/sparc/getNUTCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetNUTCountResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetNUTCountResult</returns>
        public async System.Threading.Tasks.Task<GetNUTCountResult> GetNUTCountAsync ()
        {
             ApiResponse<GetNUTCountResult> localVarResponse = await GetNUTCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new unread tiles count. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetNUTCountResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetNUTCountResult>> GetNUTCountAsyncWithHttpInfo ()
        {

            var localVarPath = "/sparc/getNUTCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetNUTCountResult)));
            
        }

        /// <summary>
        /// Get skinny data of specified sparc 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSkinnyDataResult</returns>
        public GetSkinnyDataResult GetSkinnyData (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null)
        {
             ApiResponse<GetSkinnyDataResult> localVarResponse = GetSkinnyDataWithHttpInfo(type, key, sparcType, sparcSubType, pg, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get skinny data of specified sparc 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSkinnyDataResult</returns>
        public ApiResponse< GetSkinnyDataResult > GetSkinnyDataWithHttpInfo (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling SparcApi->GetSkinnyData");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SparcApi->GetSkinnyData");
            // verify the required parameter 'sparcType' is set
            if (sparcType == null)
                throw new ApiException(400, "Missing required parameter 'sparcType' when calling SparcApi->GetSkinnyData");

            var localVarPath = "/sparc/tiny/{type}/{key}/{sparcType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (sparcType != null) localVarPathParams.Add("sparcType", Configuration.ApiClient.ParameterToString(sparcType)); // path parameter
            if (sparcSubType != null) localVarQueryParams.Add("sparcSubType", Configuration.ApiClient.ParameterToString(sparcSubType)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSkinnyData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSkinnyDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSkinnyDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSkinnyDataResult)));
            
        }

        /// <summary>
        /// Get skinny data of specified sparc 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSkinnyDataResult</returns>
        public async System.Threading.Tasks.Task<GetSkinnyDataResult> GetSkinnyDataAsync (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null)
        {
             ApiResponse<GetSkinnyDataResult> localVarResponse = await GetSkinnyDataAsyncWithHttpInfo(type, key, sparcType, sparcSubType, pg, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get skinny data of specified sparc 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">object type</param>
        /// <param name="key"></param>
        /// <param name="sparcType"></param>
        /// <param name="sparcSubType"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSkinnyDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSkinnyDataResult>> GetSkinnyDataAsyncWithHttpInfo (string type, string key, string sparcType, string sparcSubType = null, string pg = null, string format = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling SparcApi->GetSkinnyData");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SparcApi->GetSkinnyData");
            // verify the required parameter 'sparcType' is set
            if (sparcType == null)
                throw new ApiException(400, "Missing required parameter 'sparcType' when calling SparcApi->GetSkinnyData");

            var localVarPath = "/sparc/tiny/{type}/{key}/{sparcType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (sparcType != null) localVarPathParams.Add("sparcType", Configuration.ApiClient.ParameterToString(sparcType)); // path parameter
            if (sparcSubType != null) localVarQueryParams.Add("sparcSubType", Configuration.ApiClient.ParameterToString(sparcSubType)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSkinnyData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSkinnyDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSkinnyDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSkinnyDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>GetSparcActionsResult</returns>
        public GetSparcActionsResult GetSparcActions (string options, string objectKey, string pg, bool? cache = null)
        {
             ApiResponse<GetSparcActionsResult> localVarResponse = GetSparcActionsWithHttpInfo(options, objectKey, pg, cache);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>ApiResponse of GetSparcActionsResult</returns>
        public ApiResponse< GetSparcActionsResult > GetSparcActionsWithHttpInfo (string options, string objectKey, string pg, bool? cache = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling SparcApi->GetSparcActions");
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetSparcActions");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling SparcApi->GetSparcActions");

            var localVarPath = "/sparc/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (cache != null) localVarQueryParams.Add("cache", Configuration.ApiClient.ParameterToString(cache)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSparcActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSparcActionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSparcActionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSparcActionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>Task of GetSparcActionsResult</returns>
        public async System.Threading.Tasks.Task<GetSparcActionsResult> GetSparcActionsAsync (string options, string objectKey, string pg, bool? cache = null)
        {
             ApiResponse<GetSparcActionsResult> localVarResponse = await GetSparcActionsAsyncWithHttpInfo(options, objectKey, pg, cache);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;ActionOptionsRecord&gt;&gt;)</param>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="cache"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSparcActionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSparcActionsResult>> GetSparcActionsAsyncWithHttpInfo (string options, string objectKey, string pg, bool? cache = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling SparcApi->GetSparcActions");
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling SparcApi->GetSparcActions");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling SparcApi->GetSparcActions");

            var localVarPath = "/sparc/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (cache != null) localVarQueryParams.Add("cache", Configuration.ApiClient.ParameterToString(cache)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSparcActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSparcActionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSparcActionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSparcActionsResult)));
            
        }

    }
}
