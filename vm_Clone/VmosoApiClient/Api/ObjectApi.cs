/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// change owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>ChangeOwnerResult</returns>
        ChangeOwnerResult ChangeOwner (string objectKey, string userKey);

        /// <summary>
        /// change owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of ChangeOwnerResult</returns>
        ApiResponse<ChangeOwnerResult> ChangeOwnerWithHttpInfo (string objectKey, string userKey);
        /// <summary>
        /// mark unread to read for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>ClearAllForListResult</returns>
        ClearAllForListResult ClearAllForList (ClearAllForListInput input);

        /// <summary>
        /// mark unread to read for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>ApiResponse of ClearAllForListResult</returns>
        ApiResponse<ClearAllForListResult> ClearAllForListWithHttpInfo (ClearAllForListInput input);
        /// <summary>
        /// get assignment action read state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetAssignmentReadStateResult</returns>
        GetAssignmentReadStateResult GetAssignmentReadState (string objectKey);

        /// <summary>
        /// get assignment action read state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetAssignmentReadStateResult</returns>
        ApiResponse<GetAssignmentReadStateResult> GetAssignmentReadStateWithHttpInfo (string objectKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>GetFollowersResult</returns>
        GetFollowersResult GetFollowers (string objectKey, string pg);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetFollowersResult</returns>
        ApiResponse<GetFollowersResult> GetFollowersWithHttpInfo (string objectKey, string pg);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetReadersResult</returns>
        GetReadersResult GetReaders (string objectKey, string options = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetReadersResult</returns>
        ApiResponse<GetReadersResult> GetReadersWithHttpInfo (string objectKey, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ListMarksResult</returns>
        ListMarksResult ListMarks (string markType, string pg, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ListMarksResult</returns>
        ApiResponse<ListMarksResult> ListMarksWithHttpInfo (string markType, string pg, string format = null);
        /// <summary>
        /// Mark all actions read for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>MarkAllTilesReadResult</returns>
        MarkAllTilesReadResult MarkAllTilesRead (string key);

        /// <summary>
        /// Mark all actions read for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of MarkAllTilesReadResult</returns>
        ApiResponse<MarkAllTilesReadResult> MarkAllTilesReadWithHttpInfo (string key);
        /// <summary>
        /// mark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>MarkFlagResult</returns>
        MarkFlagResult MarkFlag (string itemKey, string markType);

        /// <summary>
        /// mark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>ApiResponse of MarkFlagResult</returns>
        ApiResponse<MarkFlagResult> MarkFlagWithHttpInfo (string itemKey, string markType);
        /// <summary>
        /// mark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>MarkFlagsResult</returns>
        MarkFlagsResult MarkFlags (string markType, MarkFlagsInput input);

        /// <summary>
        /// mark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>ApiResponse of MarkFlagsResult</returns>
        ApiResponse<MarkFlagsResult> MarkFlagsWithHttpInfo (string markType, MarkFlagsInput input);
        /// <summary>
        /// Mark read for actions of specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>MarkTilesReadResult</returns>
        MarkTilesReadResult MarkTilesRead (MarkTilesReadInput input);

        /// <summary>
        /// Mark read for actions of specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>ApiResponse of MarkTilesReadResult</returns>
        ApiResponse<MarkTilesReadResult> MarkTilesReadWithHttpInfo (MarkTilesReadInput input);
        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchAutocompleteResult</returns>
        SearchAutocompleteResult SearchAutocomplete (string options, string pg);

        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchAutocompleteResult</returns>
        ApiResponse<SearchAutocompleteResult> SearchAutocompleteWithHttpInfo (string options, string pg);
        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchObjectsResult</returns>
        SearchObjectsResult SearchObjects (string options, string pg);

        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchObjectsResult</returns>
        ApiResponse<SearchObjectsResult> SearchObjectsWithHttpInfo (string options, string pg);
        /// <summary>
        /// Set new time for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>SetActionNewTimeResult</returns>
        SetActionNewTimeResult SetActionNewTime (SetActionNewTimeInput input);

        /// <summary>
        /// Set new time for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>ApiResponse of SetActionNewTimeResult</returns>
        ApiResponse<SetActionNewTimeResult> SetActionNewTimeWithHttpInfo (SetActionNewTimeInput input);
        /// <summary>
        /// mark new unread to old unread for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>SetActionNewTimeForListResult</returns>
        SetActionNewTimeForListResult SetActionNewTimeForList (SetActionNewTimeForListInput input);

        /// <summary>
        /// mark new unread to old unread for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>ApiResponse of SetActionNewTimeForListResult</returns>
        ApiResponse<SetActionNewTimeForListResult> SetActionNewTimeForListWithHttpInfo (SetActionNewTimeForListInput input);
        /// <summary>
        /// unmark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>UnmarkFlagResult</returns>
        UnmarkFlagResult UnmarkFlag (string itemKey, string markType);

        /// <summary>
        /// unmark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>ApiResponse of UnmarkFlagResult</returns>
        ApiResponse<UnmarkFlagResult> UnmarkFlagWithHttpInfo (string itemKey, string markType);
        /// <summary>
        /// unmark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>UnmarkFlagsResult</returns>
        UnmarkFlagsResult UnmarkFlags (string markType, UnmarkFlagsInput input);

        /// <summary>
        /// unmark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>ApiResponse of UnmarkFlagsResult</returns>
        ApiResponse<UnmarkFlagsResult> UnmarkFlagsWithHttpInfo (string markType, UnmarkFlagsInput input);
        /// <summary>
        /// Update read info for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>UpdateReadInfoResult</returns>
        UpdateReadInfoResult UpdateReadInfo (UpdateReadInfoInput input);

        /// <summary>
        /// Update read info for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>ApiResponse of UpdateReadInfoResult</returns>
        ApiResponse<UpdateReadInfoResult> UpdateReadInfoWithHttpInfo (UpdateReadInfoInput input);
        /// <summary>
        /// Update read info by email for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>UpdateReadInfoByEmailResult</returns>
        UpdateReadInfoByEmailResult UpdateReadInfoByEmail (string userKey, string id, string objectKey);

        /// <summary>
        /// Update read info by email for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of UpdateReadInfoByEmailResult</returns>
        ApiResponse<UpdateReadInfoByEmailResult> UpdateReadInfoByEmailWithHttpInfo (string userKey, string id, string objectKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// change owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>Task of ChangeOwnerResult</returns>
        System.Threading.Tasks.Task<ChangeOwnerResult> ChangeOwnerAsync (string objectKey, string userKey);

        /// <summary>
        /// change owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (ChangeOwnerResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeOwnerResult>> ChangeOwnerAsyncWithHttpInfo (string objectKey, string userKey);
        /// <summary>
        /// mark unread to read for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>Task of ClearAllForListResult</returns>
        System.Threading.Tasks.Task<ClearAllForListResult> ClearAllForListAsync (ClearAllForListInput input);

        /// <summary>
        /// mark unread to read for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>Task of ApiResponse (ClearAllForListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClearAllForListResult>> ClearAllForListAsyncWithHttpInfo (ClearAllForListInput input);
        /// <summary>
        /// get assignment action read state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetAssignmentReadStateResult</returns>
        System.Threading.Tasks.Task<GetAssignmentReadStateResult> GetAssignmentReadStateAsync (string objectKey);

        /// <summary>
        /// get assignment action read state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetAssignmentReadStateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssignmentReadStateResult>> GetAssignmentReadStateAsyncWithHttpInfo (string objectKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of GetFollowersResult</returns>
        System.Threading.Tasks.Task<GetFollowersResult> GetFollowersAsync (string objectKey, string pg);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetFollowersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFollowersResult>> GetFollowersAsyncWithHttpInfo (string objectKey, string pg);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetReadersResult</returns>
        System.Threading.Tasks.Task<GetReadersResult> GetReadersAsync (string objectKey, string options = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetReadersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReadersResult>> GetReadersAsyncWithHttpInfo (string objectKey, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ListMarksResult</returns>
        System.Threading.Tasks.Task<ListMarksResult> ListMarksAsync (string markType, string pg, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ListMarksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMarksResult>> ListMarksAsyncWithHttpInfo (string markType, string pg, string format = null);
        /// <summary>
        /// Mark all actions read for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of MarkAllTilesReadResult</returns>
        System.Threading.Tasks.Task<MarkAllTilesReadResult> MarkAllTilesReadAsync (string key);

        /// <summary>
        /// Mark all actions read for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (MarkAllTilesReadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkAllTilesReadResult>> MarkAllTilesReadAsyncWithHttpInfo (string key);
        /// <summary>
        /// mark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of MarkFlagResult</returns>
        System.Threading.Tasks.Task<MarkFlagResult> MarkFlagAsync (string itemKey, string markType);

        /// <summary>
        /// mark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of ApiResponse (MarkFlagResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkFlagResult>> MarkFlagAsyncWithHttpInfo (string itemKey, string markType);
        /// <summary>
        /// mark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>Task of MarkFlagsResult</returns>
        System.Threading.Tasks.Task<MarkFlagsResult> MarkFlagsAsync (string markType, MarkFlagsInput input);

        /// <summary>
        /// mark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>Task of ApiResponse (MarkFlagsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkFlagsResult>> MarkFlagsAsyncWithHttpInfo (string markType, MarkFlagsInput input);
        /// <summary>
        /// Mark read for actions of specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>Task of MarkTilesReadResult</returns>
        System.Threading.Tasks.Task<MarkTilesReadResult> MarkTilesReadAsync (MarkTilesReadInput input);

        /// <summary>
        /// Mark read for actions of specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>Task of ApiResponse (MarkTilesReadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkTilesReadResult>> MarkTilesReadAsyncWithHttpInfo (MarkTilesReadInput input);
        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchAutocompleteResult</returns>
        System.Threading.Tasks.Task<SearchAutocompleteResult> SearchAutocompleteAsync (string options, string pg);

        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchAutocompleteResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchAutocompleteResult>> SearchAutocompleteAsyncWithHttpInfo (string options, string pg);
        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchObjectsResult</returns>
        System.Threading.Tasks.Task<SearchObjectsResult> SearchObjectsAsync (string options, string pg);

        /// <summary>
        /// Gets users from keyword entered by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchObjectsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchObjectsResult>> SearchObjectsAsyncWithHttpInfo (string options, string pg);
        /// <summary>
        /// Set new time for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>Task of SetActionNewTimeResult</returns>
        System.Threading.Tasks.Task<SetActionNewTimeResult> SetActionNewTimeAsync (SetActionNewTimeInput input);

        /// <summary>
        /// Set new time for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>Task of ApiResponse (SetActionNewTimeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetActionNewTimeResult>> SetActionNewTimeAsyncWithHttpInfo (SetActionNewTimeInput input);
        /// <summary>
        /// mark new unread to old unread for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>Task of SetActionNewTimeForListResult</returns>
        System.Threading.Tasks.Task<SetActionNewTimeForListResult> SetActionNewTimeForListAsync (SetActionNewTimeForListInput input);

        /// <summary>
        /// mark new unread to old unread for stream list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>Task of ApiResponse (SetActionNewTimeForListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetActionNewTimeForListResult>> SetActionNewTimeForListAsyncWithHttpInfo (SetActionNewTimeForListInput input);
        /// <summary>
        /// unmark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of UnmarkFlagResult</returns>
        System.Threading.Tasks.Task<UnmarkFlagResult> UnmarkFlagAsync (string itemKey, string markType);

        /// <summary>
        /// unmark object flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of ApiResponse (UnmarkFlagResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnmarkFlagResult>> UnmarkFlagAsyncWithHttpInfo (string itemKey, string markType);
        /// <summary>
        /// unmark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>Task of UnmarkFlagsResult</returns>
        System.Threading.Tasks.Task<UnmarkFlagsResult> UnmarkFlagsAsync (string markType, UnmarkFlagsInput input);

        /// <summary>
        /// unmark object flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>Task of ApiResponse (UnmarkFlagsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnmarkFlagsResult>> UnmarkFlagsAsyncWithHttpInfo (string markType, UnmarkFlagsInput input);
        /// <summary>
        /// Update read info for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>Task of UpdateReadInfoResult</returns>
        System.Threading.Tasks.Task<UpdateReadInfoResult> UpdateReadInfoAsync (UpdateReadInfoInput input);

        /// <summary>
        /// Update read info for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>Task of ApiResponse (UpdateReadInfoResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateReadInfoResult>> UpdateReadInfoAsyncWithHttpInfo (UpdateReadInfoInput input);
        /// <summary>
        /// Update read info by email for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>Task of UpdateReadInfoByEmailResult</returns>
        System.Threading.Tasks.Task<UpdateReadInfoByEmailResult> UpdateReadInfoByEmailAsync (string userKey, string id, string objectKey);

        /// <summary>
        /// Update read info by email for specified object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (UpdateReadInfoByEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateReadInfoByEmailResult>> UpdateReadInfoByEmailAsyncWithHttpInfo (string userKey, string id, string objectKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectApi : IObjectApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public ObjectApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public ObjectApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// change owner 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>ChangeOwnerResult</returns>
        public ChangeOwnerResult ChangeOwner (string objectKey, string userKey)
        {
             ApiResponse<ChangeOwnerResult> localVarResponse = ChangeOwnerWithHttpInfo(objectKey, userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// change owner 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of ChangeOwnerResult</returns>
        public ApiResponse< ChangeOwnerResult > ChangeOwnerWithHttpInfo (string objectKey, string userKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->ChangeOwner");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling ObjectApi->ChangeOwner");

            var localVarPath = "/changeOwner/{objectKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeOwnerResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeOwnerResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeOwnerResult)));
            
        }

        /// <summary>
        /// change owner 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>Task of ChangeOwnerResult</returns>
        public async System.Threading.Tasks.Task<ChangeOwnerResult> ChangeOwnerAsync (string objectKey, string userKey)
        {
             ApiResponse<ChangeOwnerResult> localVarResponse = await ChangeOwnerAsyncWithHttpInfo(objectKey, userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// change owner 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (ChangeOwnerResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangeOwnerResult>> ChangeOwnerAsyncWithHttpInfo (string objectKey, string userKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->ChangeOwner");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling ObjectApi->ChangeOwner");

            var localVarPath = "/changeOwner/{objectKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeOwnerResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeOwnerResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeOwnerResult)));
            
        }

        /// <summary>
        /// mark unread to read for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>ClearAllForListResult</returns>
        public ClearAllForListResult ClearAllForList (ClearAllForListInput input)
        {
             ApiResponse<ClearAllForListResult> localVarResponse = ClearAllForListWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// mark unread to read for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>ApiResponse of ClearAllForListResult</returns>
        public ApiResponse< ClearAllForListResult > ClearAllForListWithHttpInfo (ClearAllForListInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->ClearAllForList");

            var localVarPath = "/objects/read/clearAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAllForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearAllForListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClearAllForListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearAllForListResult)));
            
        }

        /// <summary>
        /// mark unread to read for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>Task of ClearAllForListResult</returns>
        public async System.Threading.Tasks.Task<ClearAllForListResult> ClearAllForListAsync (ClearAllForListInput input)
        {
             ApiResponse<ClearAllForListResult> localVarResponse = await ClearAllForListAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// mark unread to read for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ClearAllForList Input</param>
        /// <returns>Task of ApiResponse (ClearAllForListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClearAllForListResult>> ClearAllForListAsyncWithHttpInfo (ClearAllForListInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->ClearAllForList");

            var localVarPath = "/objects/read/clearAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAllForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearAllForListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClearAllForListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearAllForListResult)));
            
        }

        /// <summary>
        /// get assignment action read state 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>GetAssignmentReadStateResult</returns>
        public GetAssignmentReadStateResult GetAssignmentReadState (string objectKey)
        {
             ApiResponse<GetAssignmentReadStateResult> localVarResponse = GetAssignmentReadStateWithHttpInfo(objectKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get assignment action read state 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of GetAssignmentReadStateResult</returns>
        public ApiResponse< GetAssignmentReadStateResult > GetAssignmentReadStateWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetAssignmentReadState");

            var localVarPath = "/assignment/readState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignmentReadState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAssignmentReadStateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAssignmentReadStateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAssignmentReadStateResult)));
            
        }

        /// <summary>
        /// get assignment action read state 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of GetAssignmentReadStateResult</returns>
        public async System.Threading.Tasks.Task<GetAssignmentReadStateResult> GetAssignmentReadStateAsync (string objectKey)
        {
             ApiResponse<GetAssignmentReadStateResult> localVarResponse = await GetAssignmentReadStateAsyncWithHttpInfo(objectKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get assignment action read state 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (GetAssignmentReadStateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAssignmentReadStateResult>> GetAssignmentReadStateAsyncWithHttpInfo (string objectKey)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetAssignmentReadState");

            var localVarPath = "/assignment/readState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignmentReadState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAssignmentReadStateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAssignmentReadStateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAssignmentReadStateResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>GetFollowersResult</returns>
        public GetFollowersResult GetFollowers (string objectKey, string pg)
        {
             ApiResponse<GetFollowersResult> localVarResponse = GetFollowersWithHttpInfo(objectKey, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetFollowersResult</returns>
        public ApiResponse< GetFollowersResult > GetFollowersWithHttpInfo (string objectKey, string pg)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetFollowers");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->GetFollowers");

            var localVarPath = "/{objectKey}/followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFollowersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of GetFollowersResult</returns>
        public async System.Threading.Tasks.Task<GetFollowersResult> GetFollowersAsync (string objectKey, string pg)
        {
             ApiResponse<GetFollowersResult> localVarResponse = await GetFollowersAsyncWithHttpInfo(objectKey, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetFollowersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFollowersResult>> GetFollowersAsyncWithHttpInfo (string objectKey, string pg)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetFollowers");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->GetFollowers");

            var localVarPath = "/{objectKey}/followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFollowersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetReadersResult</returns>
        public GetReadersResult GetReaders (string objectKey, string options = null, string pg = null)
        {
             ApiResponse<GetReadersResult> localVarResponse = GetReadersWithHttpInfo(objectKey, options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetReadersResult</returns>
        public ApiResponse< GetReadersResult > GetReadersWithHttpInfo (string objectKey, string options = null, string pg = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetReaders");

            var localVarPath = "/objects/read/getReaderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReadersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReadersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReadersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetReadersResult</returns>
        public async System.Threading.Tasks.Task<GetReadersResult> GetReadersAsync (string objectKey, string options = null, string pg = null)
        {
             ApiResponse<GetReadersResult> localVarResponse = await GetReadersAsyncWithHttpInfo(objectKey, options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetReadersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReadersResult>> GetReadersAsyncWithHttpInfo (string objectKey, string options = null, string pg = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->GetReaders");

            var localVarPath = "/objects/read/getReaderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReadersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReadersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReadersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ListMarksResult</returns>
        public ListMarksResult ListMarks (string markType, string pg, string format = null)
        {
             ApiResponse<ListMarksResult> localVarResponse = ListMarksWithHttpInfo(markType, pg, format);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ListMarksResult</returns>
        public ApiResponse< ListMarksResult > ListMarksWithHttpInfo (string markType, string pg, string format = null)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->ListMarks");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->ListMarks");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMarksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ListMarksResult</returns>
        public async System.Threading.Tasks.Task<ListMarksResult> ListMarksAsync (string markType, string pg, string format = null)
        {
             ApiResponse<ListMarksResult> localVarResponse = await ListMarksAsyncWithHttpInfo(markType, pg, format);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ListMarksResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMarksResult>> ListMarksAsyncWithHttpInfo (string markType, string pg, string format = null)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->ListMarks");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->ListMarks");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMarksResult)));
            
        }

        /// <summary>
        /// Mark all actions read for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>MarkAllTilesReadResult</returns>
        public MarkAllTilesReadResult MarkAllTilesRead (string key)
        {
             ApiResponse<MarkAllTilesReadResult> localVarResponse = MarkAllTilesReadWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all actions read for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of MarkAllTilesReadResult</returns>
        public ApiResponse< MarkAllTilesReadResult > MarkAllTilesReadWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObjectApi->MarkAllTilesRead");

            var localVarPath = "/objects/read/{key}/markAllTilesRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllTilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkAllTilesReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkAllTilesReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkAllTilesReadResult)));
            
        }

        /// <summary>
        /// Mark all actions read for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of MarkAllTilesReadResult</returns>
        public async System.Threading.Tasks.Task<MarkAllTilesReadResult> MarkAllTilesReadAsync (string key)
        {
             ApiResponse<MarkAllTilesReadResult> localVarResponse = await MarkAllTilesReadAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all actions read for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (MarkAllTilesReadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkAllTilesReadResult>> MarkAllTilesReadAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObjectApi->MarkAllTilesRead");

            var localVarPath = "/objects/read/{key}/markAllTilesRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllTilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkAllTilesReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkAllTilesReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkAllTilesReadResult)));
            
        }

        /// <summary>
        /// mark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>MarkFlagResult</returns>
        public MarkFlagResult MarkFlag (string itemKey, string markType)
        {
             ApiResponse<MarkFlagResult> localVarResponse = MarkFlagWithHttpInfo(itemKey, markType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// mark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>ApiResponse of MarkFlagResult</returns>
        public ApiResponse< MarkFlagResult > MarkFlagWithHttpInfo (string itemKey, string markType)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling ObjectApi->MarkFlag");
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->MarkFlag");

            var localVarPath = "/marks/{markType}/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkFlagResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkFlagResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkFlagResult)));
            
        }

        /// <summary>
        /// mark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of MarkFlagResult</returns>
        public async System.Threading.Tasks.Task<MarkFlagResult> MarkFlagAsync (string itemKey, string markType)
        {
             ApiResponse<MarkFlagResult> localVarResponse = await MarkFlagAsyncWithHttpInfo(itemKey, markType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// mark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of ApiResponse (MarkFlagResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkFlagResult>> MarkFlagAsyncWithHttpInfo (string itemKey, string markType)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling ObjectApi->MarkFlag");
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->MarkFlag");

            var localVarPath = "/marks/{markType}/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkFlagResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkFlagResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkFlagResult)));
            
        }

        /// <summary>
        /// mark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>MarkFlagsResult</returns>
        public MarkFlagsResult MarkFlags (string markType, MarkFlagsInput input)
        {
             ApiResponse<MarkFlagsResult> localVarResponse = MarkFlagsWithHttpInfo(markType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// mark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>ApiResponse of MarkFlagsResult</returns>
        public ApiResponse< MarkFlagsResult > MarkFlagsWithHttpInfo (string markType, MarkFlagsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->MarkFlags");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->MarkFlags");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkFlagsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkFlagsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkFlagsResult)));
            
        }

        /// <summary>
        /// mark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>Task of MarkFlagsResult</returns>
        public async System.Threading.Tasks.Task<MarkFlagsResult> MarkFlagsAsync (string markType, MarkFlagsInput input)
        {
             ApiResponse<MarkFlagsResult> localVarResponse = await MarkFlagsAsyncWithHttpInfo(markType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// mark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">MarkFlags Input</param>
        /// <returns>Task of ApiResponse (MarkFlagsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkFlagsResult>> MarkFlagsAsyncWithHttpInfo (string markType, MarkFlagsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->MarkFlags");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->MarkFlags");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkFlagsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkFlagsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkFlagsResult)));
            
        }

        /// <summary>
        /// Mark read for actions of specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>MarkTilesReadResult</returns>
        public MarkTilesReadResult MarkTilesRead (MarkTilesReadInput input)
        {
             ApiResponse<MarkTilesReadResult> localVarResponse = MarkTilesReadWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark read for actions of specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>ApiResponse of MarkTilesReadResult</returns>
        public ApiResponse< MarkTilesReadResult > MarkTilesReadWithHttpInfo (MarkTilesReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->MarkTilesRead");

            var localVarPath = "/objects/read/markTilesRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkTilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkTilesReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkTilesReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkTilesReadResult)));
            
        }

        /// <summary>
        /// Mark read for actions of specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>Task of MarkTilesReadResult</returns>
        public async System.Threading.Tasks.Task<MarkTilesReadResult> MarkTilesReadAsync (MarkTilesReadInput input)
        {
             ApiResponse<MarkTilesReadResult> localVarResponse = await MarkTilesReadAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark read for actions of specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkTilesRead Input</param>
        /// <returns>Task of ApiResponse (MarkTilesReadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkTilesReadResult>> MarkTilesReadAsyncWithHttpInfo (MarkTilesReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->MarkTilesRead");

            var localVarPath = "/objects/read/markTilesRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkTilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkTilesReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkTilesReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkTilesReadResult)));
            
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchAutocompleteResult</returns>
        public SearchAutocompleteResult SearchAutocomplete (string options, string pg)
        {
             ApiResponse<SearchAutocompleteResult> localVarResponse = SearchAutocompleteWithHttpInfo(options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchAutocompleteResult</returns>
        public ApiResponse< SearchAutocompleteResult > SearchAutocompleteWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ObjectApi->SearchAutocomplete");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->SearchAutocomplete");

            var localVarPath = "/search/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchAutocompleteResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchAutocompleteResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchAutocompleteResult)));
            
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchAutocompleteResult</returns>
        public async System.Threading.Tasks.Task<SearchAutocompleteResult> SearchAutocompleteAsync (string options, string pg)
        {
             ApiResponse<SearchAutocompleteResult> localVarResponse = await SearchAutocompleteAsyncWithHttpInfo(options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsV2Record&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchAutocompleteResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchAutocompleteResult>> SearchAutocompleteAsyncWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ObjectApi->SearchAutocomplete");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->SearchAutocomplete");

            var localVarPath = "/search/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchAutocompleteResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchAutocompleteResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchAutocompleteResult)));
            
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchObjectsResult</returns>
        public SearchObjectsResult SearchObjects (string options, string pg)
        {
             ApiResponse<SearchObjectsResult> localVarResponse = SearchObjectsWithHttpInfo(options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchObjectsResult</returns>
        public ApiResponse< SearchObjectsResult > SearchObjectsWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ObjectApi->SearchObjects");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->SearchObjects");

            var localVarPath = "/search/objectpicker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchObjectsResult)));
            
        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchObjectsResult</returns>
        public async System.Threading.Tasks.Task<SearchObjectsResult> SearchObjectsAsync (string options, string pg)
        {
             ApiResponse<SearchObjectsResult> localVarResponse = await SearchObjectsAsyncWithHttpInfo(options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets users from keyword entered by user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SearchStreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchObjectsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchObjectsResult>> SearchObjectsAsyncWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ObjectApi->SearchObjects");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling ObjectApi->SearchObjects");

            var localVarPath = "/search/objectpicker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchObjectsResult)));
            
        }

        /// <summary>
        /// Set new time for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>SetActionNewTimeResult</returns>
        public SetActionNewTimeResult SetActionNewTime (SetActionNewTimeInput input)
        {
             ApiResponse<SetActionNewTimeResult> localVarResponse = SetActionNewTimeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set new time for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>ApiResponse of SetActionNewTimeResult</returns>
        public ApiResponse< SetActionNewTimeResult > SetActionNewTimeWithHttpInfo (SetActionNewTimeInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->SetActionNewTime");

            var localVarPath = "/new/setActionNewTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActionNewTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetActionNewTimeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetActionNewTimeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetActionNewTimeResult)));
            
        }

        /// <summary>
        /// Set new time for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>Task of SetActionNewTimeResult</returns>
        public async System.Threading.Tasks.Task<SetActionNewTimeResult> SetActionNewTimeAsync (SetActionNewTimeInput input)
        {
             ApiResponse<SetActionNewTimeResult> localVarResponse = await SetActionNewTimeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set new time for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTime Input</param>
        /// <returns>Task of ApiResponse (SetActionNewTimeResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetActionNewTimeResult>> SetActionNewTimeAsyncWithHttpInfo (SetActionNewTimeInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->SetActionNewTime");

            var localVarPath = "/new/setActionNewTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActionNewTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetActionNewTimeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetActionNewTimeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetActionNewTimeResult)));
            
        }

        /// <summary>
        /// mark new unread to old unread for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>SetActionNewTimeForListResult</returns>
        public SetActionNewTimeForListResult SetActionNewTimeForList (SetActionNewTimeForListInput input)
        {
             ApiResponse<SetActionNewTimeForListResult> localVarResponse = SetActionNewTimeForListWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// mark new unread to old unread for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>ApiResponse of SetActionNewTimeForListResult</returns>
        public ApiResponse< SetActionNewTimeForListResult > SetActionNewTimeForListWithHttpInfo (SetActionNewTimeForListInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->SetActionNewTimeForList");

            var localVarPath = "/new/setActionNewTimeForList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActionNewTimeForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetActionNewTimeForListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetActionNewTimeForListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetActionNewTimeForListResult)));
            
        }

        /// <summary>
        /// mark new unread to old unread for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>Task of SetActionNewTimeForListResult</returns>
        public async System.Threading.Tasks.Task<SetActionNewTimeForListResult> SetActionNewTimeForListAsync (SetActionNewTimeForListInput input)
        {
             ApiResponse<SetActionNewTimeForListResult> localVarResponse = await SetActionNewTimeForListAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// mark new unread to old unread for stream list 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetActionNewTimeForList Input</param>
        /// <returns>Task of ApiResponse (SetActionNewTimeForListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetActionNewTimeForListResult>> SetActionNewTimeForListAsyncWithHttpInfo (SetActionNewTimeForListInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->SetActionNewTimeForList");

            var localVarPath = "/new/setActionNewTimeForList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActionNewTimeForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetActionNewTimeForListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetActionNewTimeForListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetActionNewTimeForListResult)));
            
        }

        /// <summary>
        /// unmark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>UnmarkFlagResult</returns>
        public UnmarkFlagResult UnmarkFlag (string itemKey, string markType)
        {
             ApiResponse<UnmarkFlagResult> localVarResponse = UnmarkFlagWithHttpInfo(itemKey, markType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unmark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>ApiResponse of UnmarkFlagResult</returns>
        public ApiResponse< UnmarkFlagResult > UnmarkFlagWithHttpInfo (string itemKey, string markType)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling ObjectApi->UnmarkFlag");
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->UnmarkFlag");

            var localVarPath = "/marks/{markType}/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkFlagResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkFlagResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkFlagResult)));
            
        }

        /// <summary>
        /// unmark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of UnmarkFlagResult</returns>
        public async System.Threading.Tasks.Task<UnmarkFlagResult> UnmarkFlagAsync (string itemKey, string markType)
        {
             ApiResponse<UnmarkFlagResult> localVarResponse = await UnmarkFlagAsyncWithHttpInfo(itemKey, markType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unmark object flag 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <returns>Task of ApiResponse (UnmarkFlagResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnmarkFlagResult>> UnmarkFlagAsyncWithHttpInfo (string itemKey, string markType)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling ObjectApi->UnmarkFlag");
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->UnmarkFlag");

            var localVarPath = "/marks/{markType}/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkFlagResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkFlagResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkFlagResult)));
            
        }

        /// <summary>
        /// unmark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>UnmarkFlagsResult</returns>
        public UnmarkFlagsResult UnmarkFlags (string markType, UnmarkFlagsInput input)
        {
             ApiResponse<UnmarkFlagsResult> localVarResponse = UnmarkFlagsWithHttpInfo(markType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unmark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>ApiResponse of UnmarkFlagsResult</returns>
        public ApiResponse< UnmarkFlagsResult > UnmarkFlagsWithHttpInfo (string markType, UnmarkFlagsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->UnmarkFlags");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->UnmarkFlags");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkFlagsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkFlagsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkFlagsResult)));
            
        }

        /// <summary>
        /// unmark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>Task of UnmarkFlagsResult</returns>
        public async System.Threading.Tasks.Task<UnmarkFlagsResult> UnmarkFlagsAsync (string markType, UnmarkFlagsInput input)
        {
             ApiResponse<UnmarkFlagsResult> localVarResponse = await UnmarkFlagsAsyncWithHttpInfo(markType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unmark object flags 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType">favorite|important|pin|hide</param>
        /// <param name="input">UnmarkFlags Input</param>
        /// <returns>Task of ApiResponse (UnmarkFlagsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnmarkFlagsResult>> UnmarkFlagsAsyncWithHttpInfo (string markType, UnmarkFlagsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling ObjectApi->UnmarkFlags");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->UnmarkFlags");

            var localVarPath = "/marks/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkFlagsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkFlagsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkFlagsResult)));
            
        }

        /// <summary>
        /// Update read info for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>UpdateReadInfoResult</returns>
        public UpdateReadInfoResult UpdateReadInfo (UpdateReadInfoInput input)
        {
             ApiResponse<UpdateReadInfoResult> localVarResponse = UpdateReadInfoWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update read info for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>ApiResponse of UpdateReadInfoResult</returns>
        public ApiResponse< UpdateReadInfoResult > UpdateReadInfoWithHttpInfo (UpdateReadInfoInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->UpdateReadInfo");

            var localVarPath = "/objects/read/updateReadInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReadInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReadInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReadInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReadInfoResult)));
            
        }

        /// <summary>
        /// Update read info for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>Task of UpdateReadInfoResult</returns>
        public async System.Threading.Tasks.Task<UpdateReadInfoResult> UpdateReadInfoAsync (UpdateReadInfoInput input)
        {
             ApiResponse<UpdateReadInfoResult> localVarResponse = await UpdateReadInfoAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update read info for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateReadInfo Input</param>
        /// <returns>Task of ApiResponse (UpdateReadInfoResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateReadInfoResult>> UpdateReadInfoAsyncWithHttpInfo (UpdateReadInfoInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ObjectApi->UpdateReadInfo");

            var localVarPath = "/objects/read/updateReadInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReadInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReadInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReadInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReadInfoResult)));
            
        }

        /// <summary>
        /// Update read info by email for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>UpdateReadInfoByEmailResult</returns>
        public UpdateReadInfoByEmailResult UpdateReadInfoByEmail (string userKey, string id, string objectKey)
        {
             ApiResponse<UpdateReadInfoByEmailResult> localVarResponse = UpdateReadInfoByEmailWithHttpInfo(userKey, id, objectKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update read info by email for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>ApiResponse of UpdateReadInfoByEmailResult</returns>
        public ApiResponse< UpdateReadInfoByEmailResult > UpdateReadInfoByEmailWithHttpInfo (string userKey, string id, string objectKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling ObjectApi->UpdateReadInfoByEmail");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectApi->UpdateReadInfoByEmail");
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->UpdateReadInfoByEmail");

            var localVarPath = "/objects/read/updateReadInfoByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReadInfoByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReadInfoByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReadInfoByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReadInfoByEmailResult)));
            
        }

        /// <summary>
        /// Update read info by email for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>Task of UpdateReadInfoByEmailResult</returns>
        public async System.Threading.Tasks.Task<UpdateReadInfoByEmailResult> UpdateReadInfoByEmailAsync (string userKey, string id, string objectKey)
        {
             ApiResponse<UpdateReadInfoByEmailResult> localVarResponse = await UpdateReadInfoByEmailAsyncWithHttpInfo(userKey, id, objectKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update read info by email for specified object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="id"></param>
        /// <param name="objectKey"></param>
        /// <returns>Task of ApiResponse (UpdateReadInfoByEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateReadInfoByEmailResult>> UpdateReadInfoByEmailAsyncWithHttpInfo (string userKey, string id, string objectKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling ObjectApi->UpdateReadInfoByEmail");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectApi->UpdateReadInfoByEmail");
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ObjectApi->UpdateReadInfoByEmail");

            var localVarPath = "/objects/read/updateReadInfoByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReadInfoByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReadInfoByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReadInfoByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReadInfoByEmailResult)));
            
        }

    }
}
