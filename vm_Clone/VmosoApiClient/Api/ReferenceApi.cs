/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>GetLinksResult</returns>
        GetLinksResult GetLinks (string referenceID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetLinksResult</returns>
        ApiResponse<GetLinksResult> GetLinksWithHttpInfo (string referenceID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>GetObjectResult</returns>
        GetObjectResult GetObject (string link);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>ApiResponse of GetObjectResult</returns>
        ApiResponse<GetObjectResult> GetObjectWithHttpInfo (string link);
        /// <summary>
        /// get reference records for given object and type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetReferencesResult</returns>
        GetReferencesResult GetReferences (string objectKey, string type, string pg = null);

        /// <summary>
        /// get reference records for given object and type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetReferencesResult</returns>
        ApiResponse<GetReferencesResult> GetReferencesWithHttpInfo (string objectKey, string type, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetTopologyResult</returns>
        GetTopologyResult GetTopology (string key, string type, string filter = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetTopologyResult</returns>
        ApiResponse<GetTopologyResult> GetTopologyWithHttpInfo (string key, string type, string filter = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>ReplaceAhaResult</returns>
        ReplaceAhaResult ReplaceAha (string rawText);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>ApiResponse of ReplaceAhaResult</returns>
        ApiResponse<ReplaceAhaResult> ReplaceAhaWithHttpInfo (string rawText);
        /// <summary>
        /// update references of an object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>UpdateReferencesResult</returns>
        UpdateReferencesResult UpdateReferences (string parentKey, UpdateReferencesInput input);

        /// <summary>
        /// update references of an object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>ApiResponse of UpdateReferencesResult</returns>
        ApiResponse<UpdateReferencesResult> UpdateReferencesWithHttpInfo (string parentKey, UpdateReferencesInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>Task of GetLinksResult</returns>
        System.Threading.Tasks.Task<GetLinksResult> GetLinksAsync (string referenceID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetLinksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLinksResult>> GetLinksAsyncWithHttpInfo (string referenceID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>Task of GetObjectResult</returns>
        System.Threading.Tasks.Task<GetObjectResult> GetObjectAsync (string link);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>Task of ApiResponse (GetObjectResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetObjectResult>> GetObjectAsyncWithHttpInfo (string link);
        /// <summary>
        /// get reference records for given object and type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetReferencesResult</returns>
        System.Threading.Tasks.Task<GetReferencesResult> GetReferencesAsync (string objectKey, string type, string pg = null);

        /// <summary>
        /// get reference records for given object and type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetReferencesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReferencesResult>> GetReferencesAsyncWithHttpInfo (string objectKey, string type, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetTopologyResult</returns>
        System.Threading.Tasks.Task<GetTopologyResult> GetTopologyAsync (string key, string type, string filter = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetTopologyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTopologyResult>> GetTopologyAsyncWithHttpInfo (string key, string type, string filter = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>Task of ReplaceAhaResult</returns>
        System.Threading.Tasks.Task<ReplaceAhaResult> ReplaceAhaAsync (string rawText);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>Task of ApiResponse (ReplaceAhaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceAhaResult>> ReplaceAhaAsyncWithHttpInfo (string rawText);
        /// <summary>
        /// update references of an object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>Task of UpdateReferencesResult</returns>
        System.Threading.Tasks.Task<UpdateReferencesResult> UpdateReferencesAsync (string parentKey, UpdateReferencesInput input);

        /// <summary>
        /// update references of an object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>Task of ApiResponse (UpdateReferencesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateReferencesResult>> UpdateReferencesAsyncWithHttpInfo (string parentKey, UpdateReferencesInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceApi : IReferenceApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public ReferenceApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public ReferenceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>GetLinksResult</returns>
        public GetLinksResult GetLinks (string referenceID)
        {
             ApiResponse<GetLinksResult> localVarResponse = GetLinksWithHttpInfo(referenceID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetLinksResult</returns>
        public ApiResponse< GetLinksResult > GetLinksWithHttpInfo (string referenceID)
        {
            // verify the required parameter 'referenceID' is set
            if (referenceID == null)
                throw new ApiException(400, "Missing required parameter 'referenceID' when calling ReferenceApi->GetLinks");

            var localVarPath = "/reference/linking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (referenceID != null) localVarQueryParams.Add("referenceID", Configuration.ApiClient.ParameterToString(referenceID)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLinksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLinksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLinksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>Task of GetLinksResult</returns>
        public async System.Threading.Tasks.Task<GetLinksResult> GetLinksAsync (string referenceID)
        {
             ApiResponse<GetLinksResult> localVarResponse = await GetLinksAsyncWithHttpInfo(referenceID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceID">(JSON object &lt;&lt;ReferenceIdRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetLinksResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLinksResult>> GetLinksAsyncWithHttpInfo (string referenceID)
        {
            // verify the required parameter 'referenceID' is set
            if (referenceID == null)
                throw new ApiException(400, "Missing required parameter 'referenceID' when calling ReferenceApi->GetLinks");

            var localVarPath = "/reference/linking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (referenceID != null) localVarQueryParams.Add("referenceID", Configuration.ApiClient.ParameterToString(referenceID)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLinksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLinksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLinksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>GetObjectResult</returns>
        public GetObjectResult GetObject (string link)
        {
             ApiResponse<GetObjectResult> localVarResponse = GetObjectWithHttpInfo(link);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>ApiResponse of GetObjectResult</returns>
        public ApiResponse< GetObjectResult > GetObjectWithHttpInfo (string link)
        {
            // verify the required parameter 'link' is set
            if (link == null)
                throw new ApiException(400, "Missing required parameter 'link' when calling ReferenceApi->GetObject");

            var localVarPath = "/reference/object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (link != null) localVarQueryParams.Add("link", Configuration.ApiClient.ParameterToString(link)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetObjectResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>Task of GetObjectResult</returns>
        public async System.Threading.Tasks.Task<GetObjectResult> GetObjectAsync (string link)
        {
             ApiResponse<GetObjectResult> localVarResponse = await GetObjectAsyncWithHttpInfo(link);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="link"></param>
        /// <returns>Task of ApiResponse (GetObjectResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetObjectResult>> GetObjectAsyncWithHttpInfo (string link)
        {
            // verify the required parameter 'link' is set
            if (link == null)
                throw new ApiException(400, "Missing required parameter 'link' when calling ReferenceApi->GetObject");

            var localVarPath = "/reference/object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (link != null) localVarQueryParams.Add("link", Configuration.ApiClient.ParameterToString(link)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetObjectResult)));
            
        }

        /// <summary>
        /// get reference records for given object and type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetReferencesResult</returns>
        public GetReferencesResult GetReferences (string objectKey, string type, string pg = null)
        {
             ApiResponse<GetReferencesResult> localVarResponse = GetReferencesWithHttpInfo(objectKey, type, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get reference records for given object and type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetReferencesResult</returns>
        public ApiResponse< GetReferencesResult > GetReferencesWithHttpInfo (string objectKey, string type, string pg = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ReferenceApi->GetReferences");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReferenceApi->GetReferences");

            var localVarPath = "/reference/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReferencesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReferencesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReferencesResult)));
            
        }

        /// <summary>
        /// get reference records for given object and type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetReferencesResult</returns>
        public async System.Threading.Tasks.Task<GetReferencesResult> GetReferencesAsync (string objectKey, string type, string pg = null)
        {
             ApiResponse<GetReferencesResult> localVarResponse = await GetReferencesAsyncWithHttpInfo(objectKey, type, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get reference records for given object and type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="type"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetReferencesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReferencesResult>> GetReferencesAsyncWithHttpInfo (string objectKey, string type, string pg = null)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling ReferenceApi->GetReferences");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReferenceApi->GetReferences");

            var localVarPath = "/reference/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarQueryParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReferencesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReferencesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReferencesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetTopologyResult</returns>
        public GetTopologyResult GetTopology (string key, string type, string filter = null, string pg = null)
        {
             ApiResponse<GetTopologyResult> localVarResponse = GetTopologyWithHttpInfo(key, type, filter, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetTopologyResult</returns>
        public ApiResponse< GetTopologyResult > GetTopologyWithHttpInfo (string key, string type, string filter = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ReferenceApi->GetTopology");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReferenceApi->GetTopology");

            var localVarPath = "/reference/{key}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopology", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTopologyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTopologyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTopologyResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetTopologyResult</returns>
        public async System.Threading.Tasks.Task<GetTopologyResult> GetTopologyAsync (string key, string type, string filter = null, string pg = null)
        {
             ApiResponse<GetTopologyResult> localVarResponse = await GetTopologyAsyncWithHttpInfo(key, type, filter, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetTopologyResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTopologyResult>> GetTopologyAsyncWithHttpInfo (string key, string type, string filter = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ReferenceApi->GetTopology");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReferenceApi->GetTopology");

            var localVarPath = "/reference/{key}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopology", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTopologyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTopologyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTopologyResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>ReplaceAhaResult</returns>
        public ReplaceAhaResult ReplaceAha (string rawText)
        {
             ApiResponse<ReplaceAhaResult> localVarResponse = ReplaceAhaWithHttpInfo(rawText);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>ApiResponse of ReplaceAhaResult</returns>
        public ApiResponse< ReplaceAhaResult > ReplaceAhaWithHttpInfo (string rawText)
        {
            // verify the required parameter 'rawText' is set
            if (rawText == null)
                throw new ApiException(400, "Missing required parameter 'rawText' when calling ReferenceApi->ReplaceAha");

            var localVarPath = "/reference/replaceWithAHA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (rawText != null) localVarQueryParams.Add("rawText", Configuration.ApiClient.ParameterToString(rawText)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAha", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceAhaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceAhaResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceAhaResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>Task of ReplaceAhaResult</returns>
        public async System.Threading.Tasks.Task<ReplaceAhaResult> ReplaceAhaAsync (string rawText)
        {
             ApiResponse<ReplaceAhaResult> localVarResponse = await ReplaceAhaAsyncWithHttpInfo(rawText);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawText"></param>
        /// <returns>Task of ApiResponse (ReplaceAhaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplaceAhaResult>> ReplaceAhaAsyncWithHttpInfo (string rawText)
        {
            // verify the required parameter 'rawText' is set
            if (rawText == null)
                throw new ApiException(400, "Missing required parameter 'rawText' when calling ReferenceApi->ReplaceAha");

            var localVarPath = "/reference/replaceWithAHA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (rawText != null) localVarQueryParams.Add("rawText", Configuration.ApiClient.ParameterToString(rawText)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAha", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceAhaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceAhaResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceAhaResult)));
            
        }

        /// <summary>
        /// update references of an object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>UpdateReferencesResult</returns>
        public UpdateReferencesResult UpdateReferences (string parentKey, UpdateReferencesInput input)
        {
             ApiResponse<UpdateReferencesResult> localVarResponse = UpdateReferencesWithHttpInfo(parentKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update references of an object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>ApiResponse of UpdateReferencesResult</returns>
        public ApiResponse< UpdateReferencesResult > UpdateReferencesWithHttpInfo (string parentKey, UpdateReferencesInput input)
        {
            // verify the required parameter 'parentKey' is set
            if (parentKey == null)
                throw new ApiException(400, "Missing required parameter 'parentKey' when calling ReferenceApi->UpdateReferences");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ReferenceApi->UpdateReferences");

            var localVarPath = "/references/{parentKey}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentKey != null) localVarPathParams.Add("parentKey", Configuration.ApiClient.ParameterToString(parentKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReferencesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReferencesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReferencesResult)));
            
        }

        /// <summary>
        /// update references of an object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>Task of UpdateReferencesResult</returns>
        public async System.Threading.Tasks.Task<UpdateReferencesResult> UpdateReferencesAsync (string parentKey, UpdateReferencesInput input)
        {
             ApiResponse<UpdateReferencesResult> localVarResponse = await UpdateReferencesAsyncWithHttpInfo(parentKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update references of an object 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentKey"></param>
        /// <param name="input">UpdateReferences Input</param>
        /// <returns>Task of ApiResponse (UpdateReferencesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateReferencesResult>> UpdateReferencesAsyncWithHttpInfo (string parentKey, UpdateReferencesInput input)
        {
            // verify the required parameter 'parentKey' is set
            if (parentKey == null)
                throw new ApiException(400, "Missing required parameter 'parentKey' when calling ReferenceApi->UpdateReferences");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ReferenceApi->UpdateReferences");

            var localVarPath = "/references/{parentKey}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentKey != null) localVarPathParams.Add("parentKey", Configuration.ApiClient.ParameterToString(parentKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReferencesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReferencesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReferencesResult)));
            
        }

    }
}
