/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>AddAttachmentResult</returns>
        AddAttachmentResult AddAttachment (string objectKey, AddAttachmentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>ApiResponse of AddAttachmentResult</returns>
        ApiResponse<AddAttachmentResult> AddAttachmentWithHttpInfo (string objectKey, AddAttachmentInput input);
        /// <summary>
        /// Create a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>CreateFileResult</returns>
        CreateFileResult CreateFile (CreateFileInput input);

        /// <summary>
        /// Create a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>ApiResponse of CreateFileResult</returns>
        ApiResponse<CreateFileResult> CreateFileWithHttpInfo (CreateFileInput input);
        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>DeleteFileResult</returns>
        DeleteFileResult DeleteFile (string key);

        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of DeleteFileResult</returns>
        ApiResponse<DeleteFileResult> DeleteFileWithHttpInfo (string key);
        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>DeleteFilesResult</returns>
        DeleteFilesResult DeleteFiles (DeleteFilesInput input);

        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>ApiResponse of DeleteFilesResult</returns>
        ApiResponse<DeleteFilesResult> DeleteFilesWithHttpInfo (DeleteFilesInput input);
        /// <summary>
        /// Cloud Connect Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>GetCloudConnectionDataResult</returns>
        GetCloudConnectionDataResult GetCloudConnectionData (string provider);

        /// <summary>
        /// Cloud Connect Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>ApiResponse of GetCloudConnectionDataResult</returns>
        ApiResponse<GetCloudConnectionDataResult> GetCloudConnectionDataWithHttpInfo (string provider);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>GetContainerHistoryResult</returns>
        GetContainerHistoryResult GetContainerHistory (string key, string options = null, string pg = null, string containerKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>ApiResponse of GetContainerHistoryResult</returns>
        ApiResponse<GetContainerHistoryResult> GetContainerHistoryWithHttpInfo (string key, string options = null, string pg = null, string containerKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>GetContainerPermissionsResult</returns>
        GetContainerPermissionsResult GetContainerPermissions (string key, string containerKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>ApiResponse of GetContainerPermissionsResult</returns>
        ApiResponse<GetContainerPermissionsResult> GetContainerPermissionsWithHttpInfo (string key, string containerKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>GetDownloadTokenResult</returns>
        GetDownloadTokenResult GetDownloadToken (GetDownloadTokenInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>ApiResponse of GetDownloadTokenResult</returns>
        ApiResponse<GetDownloadTokenResult> GetDownloadTokenWithHttpInfo (GetDownloadTokenInput input);
        /// <summary>
        /// Retrieve file stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetFileHistoryResult</returns>
        GetFileHistoryResult GetFileHistory (string key, string options = null, string pg = null);

        /// <summary>
        /// Retrieve file stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetFileHistoryResult</returns>
        ApiResponse<GetFileHistoryResult> GetFileHistoryWithHttpInfo (string key, string options = null, string pg = null);
        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>GetFilesResult</returns>
        GetFilesResult GetFiles (List<string> keys);

        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>ApiResponse of GetFilesResult</returns>
        ApiResponse<GetFilesResult> GetFilesWithHttpInfo (List<string> keys);
        /// <summary>
        /// process preview data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetPreviewInfoResult</returns>
        GetPreviewInfoResult GetPreviewInfo (string key);

        /// <summary>
        /// process preview data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetPreviewInfoResult</returns>
        ApiResponse<GetPreviewInfoResult> GetPreviewInfoWithHttpInfo (string key);
        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetPreviewStatusResult</returns>
        GetPreviewStatusResult GetPreviewStatus (string key);

        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetPreviewStatusResult</returns>
        ApiResponse<GetPreviewStatusResult> GetPreviewStatusWithHttpInfo (string key);
        /// <summary>
        /// Get video thumbnails info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetThumbnailInfoResult</returns>
        GetThumbnailInfoResult GetThumbnailInfo (string key);

        /// <summary>
        /// Get video thumbnails info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetThumbnailInfoResult</returns>
        ApiResponse<GetThumbnailInfoResult> GetThumbnailInfoWithHttpInfo (string key);
        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>RecordFileActionResult</returns>
        RecordFileActionResult RecordFileAction (string key, RecordFileActionInput input);

        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>ApiResponse of RecordFileActionResult</returns>
        ApiResponse<RecordFileActionResult> RecordFileActionWithHttpInfo (string key, RecordFileActionInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>RemoveCSIPermissionsResult</returns>
        RemoveCSIPermissionsResult RemoveCSIPermissions (RemoveCSIPermissionsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>ApiResponse of RemoveCSIPermissionsResult</returns>
        ApiResponse<RemoveCSIPermissionsResult> RemoveCSIPermissionsWithHttpInfo (RemoveCSIPermissionsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>RemoveFileAttachmentsResult</returns>
        RemoveFileAttachmentsResult RemoveFileAttachments (string objectKey, RemoveFileAttachmentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>ApiResponse of RemoveFileAttachmentsResult</returns>
        ApiResponse<RemoveFileAttachmentsResult> RemoveFileAttachmentsWithHttpInfo (string objectKey, RemoveFileAttachmentsInput input);
        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>SetCSIAccessResult</returns>
        SetCSIAccessResult SetCSIAccess (string key, string containerKey = null);

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>ApiResponse of SetCSIAccessResult</returns>
        ApiResponse<SetCSIAccessResult> SetCSIAccessWithHttpInfo (string key, string containerKey = null);
        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>SetCSITokenResult</returns>
        SetCSITokenResult SetCSIToken (SetCSITokenInput input);

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>ApiResponse of SetCSITokenResult</returns>
        ApiResponse<SetCSITokenResult> SetCSITokenWithHttpInfo (SetCSITokenInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>SetContainerPermissionsResult</returns>
        SetContainerPermissionsResult SetContainerPermissions (string key, string containerKey, SetContainerPermissionsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>ApiResponse of SetContainerPermissionsResult</returns>
        ApiResponse<SetContainerPermissionsResult> SetContainerPermissionsWithHttpInfo (string key, string containerKey, SetContainerPermissionsInput input);
        /// <summary>
        /// Mark file as Favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>SetFavoriteResult</returns>
        SetFavoriteResult SetFavorite (SetFavoriteInput input);

        /// <summary>
        /// Mark file as Favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>ApiResponse of SetFavoriteResult</returns>
        ApiResponse<SetFavoriteResult> SetFavoriteWithHttpInfo (SetFavoriteInput input);
        /// <summary>
        /// Mark file as important
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>SetImportantResult</returns>
        SetImportantResult SetImportant (SetImportantInput input);

        /// <summary>
        /// Mark file as important
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>ApiResponse of SetImportantResult</returns>
        ApiResponse<SetImportantResult> SetImportantWithHttpInfo (SetImportantInput input);
        /// <summary>
        /// Update a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>UpdateFileResult</returns>
        UpdateFileResult UpdateFile (string key, UpdateFileInput input);

        /// <summary>
        /// Update a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>ApiResponse of UpdateFileResult</returns>
        ApiResponse<UpdateFileResult> UpdateFileWithHttpInfo (string key, UpdateFileInput input);
        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>ViewFileResult</returns>
        ViewFileResult ViewFile (string key, string containerKey = null, int? version = null);

        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>ApiResponse of ViewFileResult</returns>
        ApiResponse<ViewFileResult> ViewFileWithHttpInfo (string key, string containerKey = null, int? version = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>Task of AddAttachmentResult</returns>
        System.Threading.Tasks.Task<AddAttachmentResult> AddAttachmentAsync (string objectKey, AddAttachmentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>Task of ApiResponse (AddAttachmentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddAttachmentResult>> AddAttachmentAsyncWithHttpInfo (string objectKey, AddAttachmentInput input);
        /// <summary>
        /// Create a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>Task of CreateFileResult</returns>
        System.Threading.Tasks.Task<CreateFileResult> CreateFileAsync (CreateFileInput input);

        /// <summary>
        /// Create a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>Task of ApiResponse (CreateFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFileResult>> CreateFileAsyncWithHttpInfo (CreateFileInput input);
        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of DeleteFileResult</returns>
        System.Threading.Tasks.Task<DeleteFileResult> DeleteFileAsync (string key);

        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (DeleteFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteFileResult>> DeleteFileAsyncWithHttpInfo (string key);
        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>Task of DeleteFilesResult</returns>
        System.Threading.Tasks.Task<DeleteFilesResult> DeleteFilesAsync (DeleteFilesInput input);

        /// <summary>
        /// Api to delete multiple files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>Task of ApiResponse (DeleteFilesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteFilesResult>> DeleteFilesAsyncWithHttpInfo (DeleteFilesInput input);
        /// <summary>
        /// Cloud Connect Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>Task of GetCloudConnectionDataResult</returns>
        System.Threading.Tasks.Task<GetCloudConnectionDataResult> GetCloudConnectionDataAsync (string provider);

        /// <summary>
        /// Cloud Connect Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>Task of ApiResponse (GetCloudConnectionDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCloudConnectionDataResult>> GetCloudConnectionDataAsyncWithHttpInfo (string provider);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of GetContainerHistoryResult</returns>
        System.Threading.Tasks.Task<GetContainerHistoryResult> GetContainerHistoryAsync (string key, string options = null, string pg = null, string containerKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetContainerHistoryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContainerHistoryResult>> GetContainerHistoryAsyncWithHttpInfo (string key, string options = null, string pg = null, string containerKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>Task of GetContainerPermissionsResult</returns>
        System.Threading.Tasks.Task<GetContainerPermissionsResult> GetContainerPermissionsAsync (string key, string containerKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>Task of ApiResponse (GetContainerPermissionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContainerPermissionsResult>> GetContainerPermissionsAsyncWithHttpInfo (string key, string containerKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>Task of GetDownloadTokenResult</returns>
        System.Threading.Tasks.Task<GetDownloadTokenResult> GetDownloadTokenAsync (GetDownloadTokenInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>Task of ApiResponse (GetDownloadTokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDownloadTokenResult>> GetDownloadTokenAsyncWithHttpInfo (GetDownloadTokenInput input);
        /// <summary>
        /// Retrieve file stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetFileHistoryResult</returns>
        System.Threading.Tasks.Task<GetFileHistoryResult> GetFileHistoryAsync (string key, string options = null, string pg = null);

        /// <summary>
        /// Retrieve file stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetFileHistoryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFileHistoryResult>> GetFileHistoryAsyncWithHttpInfo (string key, string options = null, string pg = null);
        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>Task of GetFilesResult</returns>
        System.Threading.Tasks.Task<GetFilesResult> GetFilesAsync (List<string> keys);

        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>Task of ApiResponse (GetFilesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFilesResult>> GetFilesAsyncWithHttpInfo (List<string> keys);
        /// <summary>
        /// process preview data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetPreviewInfoResult</returns>
        System.Threading.Tasks.Task<GetPreviewInfoResult> GetPreviewInfoAsync (string key);

        /// <summary>
        /// process preview data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetPreviewInfoResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPreviewInfoResult>> GetPreviewInfoAsyncWithHttpInfo (string key);
        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetPreviewStatusResult</returns>
        System.Threading.Tasks.Task<GetPreviewStatusResult> GetPreviewStatusAsync (string key);

        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetPreviewStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPreviewStatusResult>> GetPreviewStatusAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get video thumbnails info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetThumbnailInfoResult</returns>
        System.Threading.Tasks.Task<GetThumbnailInfoResult> GetThumbnailInfoAsync (string key);

        /// <summary>
        /// Get video thumbnails info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetThumbnailInfoResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetThumbnailInfoResult>> GetThumbnailInfoAsyncWithHttpInfo (string key);
        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>Task of RecordFileActionResult</returns>
        System.Threading.Tasks.Task<RecordFileActionResult> RecordFileActionAsync (string key, RecordFileActionInput input);

        /// <summary>
        /// check whether preview is ready
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>Task of ApiResponse (RecordFileActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordFileActionResult>> RecordFileActionAsyncWithHttpInfo (string key, RecordFileActionInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>Task of RemoveCSIPermissionsResult</returns>
        System.Threading.Tasks.Task<RemoveCSIPermissionsResult> RemoveCSIPermissionsAsync (RemoveCSIPermissionsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>Task of ApiResponse (RemoveCSIPermissionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveCSIPermissionsResult>> RemoveCSIPermissionsAsyncWithHttpInfo (RemoveCSIPermissionsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>Task of RemoveFileAttachmentsResult</returns>
        System.Threading.Tasks.Task<RemoveFileAttachmentsResult> RemoveFileAttachmentsAsync (string objectKey, RemoveFileAttachmentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>Task of ApiResponse (RemoveFileAttachmentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveFileAttachmentsResult>> RemoveFileAttachmentsAsyncWithHttpInfo (string objectKey, RemoveFileAttachmentsInput input);
        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>Task of SetCSIAccessResult</returns>
        System.Threading.Tasks.Task<SetCSIAccessResult> SetCSIAccessAsync (string key, string containerKey = null);

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>Task of ApiResponse (SetCSIAccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetCSIAccessResult>> SetCSIAccessAsyncWithHttpInfo (string key, string containerKey = null);
        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>Task of SetCSITokenResult</returns>
        System.Threading.Tasks.Task<SetCSITokenResult> SetCSITokenAsync (SetCSITokenInput input);

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>Task of ApiResponse (SetCSITokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetCSITokenResult>> SetCSITokenAsyncWithHttpInfo (SetCSITokenInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>Task of SetContainerPermissionsResult</returns>
        System.Threading.Tasks.Task<SetContainerPermissionsResult> SetContainerPermissionsAsync (string key, string containerKey, SetContainerPermissionsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>Task of ApiResponse (SetContainerPermissionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetContainerPermissionsResult>> SetContainerPermissionsAsyncWithHttpInfo (string key, string containerKey, SetContainerPermissionsInput input);
        /// <summary>
        /// Mark file as Favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>Task of SetFavoriteResult</returns>
        System.Threading.Tasks.Task<SetFavoriteResult> SetFavoriteAsync (SetFavoriteInput input);

        /// <summary>
        /// Mark file as Favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>Task of ApiResponse (SetFavoriteResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetFavoriteResult>> SetFavoriteAsyncWithHttpInfo (SetFavoriteInput input);
        /// <summary>
        /// Mark file as important
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>Task of SetImportantResult</returns>
        System.Threading.Tasks.Task<SetImportantResult> SetImportantAsync (SetImportantInput input);

        /// <summary>
        /// Mark file as important
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>Task of ApiResponse (SetImportantResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetImportantResult>> SetImportantAsyncWithHttpInfo (SetImportantInput input);
        /// <summary>
        /// Update a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>Task of UpdateFileResult</returns>
        System.Threading.Tasks.Task<UpdateFileResult> UpdateFileAsync (string key, UpdateFileInput input);

        /// <summary>
        /// Update a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>Task of ApiResponse (UpdateFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFileResult>> UpdateFileAsyncWithHttpInfo (string key, UpdateFileInput input);
        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>Task of ViewFileResult</returns>
        System.Threading.Tasks.Task<ViewFileResult> ViewFileAsync (string key, string containerKey = null, int? version = null);

        /// <summary>
        /// Get Files by keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewFileResult>> ViewFileAsyncWithHttpInfo (string key, string containerKey = null, int? version = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileApi : IFileApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public FileApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public FileApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>AddAttachmentResult</returns>
        public AddAttachmentResult AddAttachment (string objectKey, AddAttachmentInput input)
        {
             ApiResponse<AddAttachmentResult> localVarResponse = AddAttachmentWithHttpInfo(objectKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>ApiResponse of AddAttachmentResult</returns>
        public ApiResponse< AddAttachmentResult > AddAttachmentWithHttpInfo (string objectKey, AddAttachmentInput input)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling FileApi->AddAttachment");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->AddAttachment");

            var localVarPath = "/files/{objectKey}/addFileAsAttachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddAttachmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddAttachmentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddAttachmentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>Task of AddAttachmentResult</returns>
        public async System.Threading.Tasks.Task<AddAttachmentResult> AddAttachmentAsync (string objectKey, AddAttachmentInput input)
        {
             ApiResponse<AddAttachmentResult> localVarResponse = await AddAttachmentAsyncWithHttpInfo(objectKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">AddAttachment Input</param>
        /// <returns>Task of ApiResponse (AddAttachmentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddAttachmentResult>> AddAttachmentAsyncWithHttpInfo (string objectKey, AddAttachmentInput input)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling FileApi->AddAttachment");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->AddAttachment");

            var localVarPath = "/files/{objectKey}/addFileAsAttachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddAttachmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddAttachmentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddAttachmentResult)));
            
        }

        /// <summary>
        /// Create a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>CreateFileResult</returns>
        public CreateFileResult CreateFile (CreateFileInput input)
        {
             ApiResponse<CreateFileResult> localVarResponse = CreateFileWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>ApiResponse of CreateFileResult</returns>
        public ApiResponse< CreateFileResult > CreateFileWithHttpInfo (CreateFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->CreateFile");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFileResult)));
            
        }

        /// <summary>
        /// Create a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>Task of CreateFileResult</returns>
        public async System.Threading.Tasks.Task<CreateFileResult> CreateFileAsync (CreateFileInput input)
        {
             ApiResponse<CreateFileResult> localVarResponse = await CreateFileAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateFile Input</param>
        /// <returns>Task of ApiResponse (CreateFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFileResult>> CreateFileAsyncWithHttpInfo (CreateFileInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->CreateFile");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFileResult)));
            
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>DeleteFileResult</returns>
        public DeleteFileResult DeleteFile (string key)
        {
             ApiResponse<DeleteFileResult> localVarResponse = DeleteFileWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of DeleteFileResult</returns>
        public ApiResponse< DeleteFileResult > DeleteFileWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->DeleteFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteFileResult)));
            
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of DeleteFileResult</returns>
        public async System.Threading.Tasks.Task<DeleteFileResult> DeleteFileAsync (string key)
        {
             ApiResponse<DeleteFileResult> localVarResponse = await DeleteFileAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (DeleteFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteFileResult>> DeleteFileAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->DeleteFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteFileResult)));
            
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>DeleteFilesResult</returns>
        public DeleteFilesResult DeleteFiles (DeleteFilesInput input)
        {
             ApiResponse<DeleteFilesResult> localVarResponse = DeleteFilesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>ApiResponse of DeleteFilesResult</returns>
        public ApiResponse< DeleteFilesResult > DeleteFilesWithHttpInfo (DeleteFilesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->DeleteFiles");

            var localVarPath = "/files/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteFilesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteFilesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteFilesResult)));
            
        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>Task of DeleteFilesResult</returns>
        public async System.Threading.Tasks.Task<DeleteFilesResult> DeleteFilesAsync (DeleteFilesInput input)
        {
             ApiResponse<DeleteFilesResult> localVarResponse = await DeleteFilesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Api to delete multiple files 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteFiles Input</param>
        /// <returns>Task of ApiResponse (DeleteFilesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteFilesResult>> DeleteFilesAsyncWithHttpInfo (DeleteFilesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->DeleteFiles");

            var localVarPath = "/files/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteFilesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteFilesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteFilesResult)));
            
        }

        /// <summary>
        /// Cloud Connect Data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>GetCloudConnectionDataResult</returns>
        public GetCloudConnectionDataResult GetCloudConnectionData (string provider)
        {
             ApiResponse<GetCloudConnectionDataResult> localVarResponse = GetCloudConnectionDataWithHttpInfo(provider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cloud Connect Data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>ApiResponse of GetCloudConnectionDataResult</returns>
        public ApiResponse< GetCloudConnectionDataResult > GetCloudConnectionDataWithHttpInfo (string provider)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling FileApi->GetCloudConnectionData");

            var localVarPath = "/files/getCloudConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (provider != null) localVarQueryParams.Add("provider", Configuration.ApiClient.ParameterToString(provider)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCloudConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCloudConnectionDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCloudConnectionDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCloudConnectionDataResult)));
            
        }

        /// <summary>
        /// Cloud Connect Data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>Task of GetCloudConnectionDataResult</returns>
        public async System.Threading.Tasks.Task<GetCloudConnectionDataResult> GetCloudConnectionDataAsync (string provider)
        {
             ApiResponse<GetCloudConnectionDataResult> localVarResponse = await GetCloudConnectionDataAsyncWithHttpInfo(provider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cloud Connect Data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">- vender name like google, dropbox</param>
        /// <returns>Task of ApiResponse (GetCloudConnectionDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCloudConnectionDataResult>> GetCloudConnectionDataAsyncWithHttpInfo (string provider)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling FileApi->GetCloudConnectionData");

            var localVarPath = "/files/getCloudConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (provider != null) localVarQueryParams.Add("provider", Configuration.ApiClient.ParameterToString(provider)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCloudConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCloudConnectionDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCloudConnectionDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCloudConnectionDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>GetContainerHistoryResult</returns>
        public GetContainerHistoryResult GetContainerHistory (string key, string options = null, string pg = null, string containerKey = null)
        {
             ApiResponse<GetContainerHistoryResult> localVarResponse = GetContainerHistoryWithHttpInfo(key, options, pg, containerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>ApiResponse of GetContainerHistoryResult</returns>
        public ApiResponse< GetContainerHistoryResult > GetContainerHistoryWithHttpInfo (string key, string options = null, string pg = null, string containerKey = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetContainerHistory");

            var localVarPath = "/files/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContainerHistoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContainerHistoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContainerHistoryResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of GetContainerHistoryResult</returns>
        public async System.Threading.Tasks.Task<GetContainerHistoryResult> GetContainerHistoryAsync (string key, string options = null, string pg = null, string containerKey = null)
        {
             ApiResponse<GetContainerHistoryResult> localVarResponse = await GetContainerHistoryAsyncWithHttpInfo(key, options, pg, containerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="containerKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetContainerHistoryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContainerHistoryResult>> GetContainerHistoryAsyncWithHttpInfo (string key, string options = null, string pg = null, string containerKey = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetContainerHistory");

            var localVarPath = "/files/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContainerHistoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContainerHistoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContainerHistoryResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>GetContainerPermissionsResult</returns>
        public GetContainerPermissionsResult GetContainerPermissions (string key, string containerKey)
        {
             ApiResponse<GetContainerPermissionsResult> localVarResponse = GetContainerPermissionsWithHttpInfo(key, containerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>ApiResponse of GetContainerPermissionsResult</returns>
        public ApiResponse< GetContainerPermissionsResult > GetContainerPermissionsWithHttpInfo (string key, string containerKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetContainerPermissions");
            // verify the required parameter 'containerKey' is set
            if (containerKey == null)
                throw new ApiException(400, "Missing required parameter 'containerKey' when calling FileApi->GetContainerPermissions");

            var localVarPath = "/files/{key}/getpermissions/{containerKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarPathParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContainerPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContainerPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContainerPermissionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>Task of GetContainerPermissionsResult</returns>
        public async System.Threading.Tasks.Task<GetContainerPermissionsResult> GetContainerPermissionsAsync (string key, string containerKey)
        {
             ApiResponse<GetContainerPermissionsResult> localVarResponse = await GetContainerPermissionsAsyncWithHttpInfo(key, containerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <returns>Task of ApiResponse (GetContainerPermissionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContainerPermissionsResult>> GetContainerPermissionsAsyncWithHttpInfo (string key, string containerKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetContainerPermissions");
            // verify the required parameter 'containerKey' is set
            if (containerKey == null)
                throw new ApiException(400, "Missing required parameter 'containerKey' when calling FileApi->GetContainerPermissions");

            var localVarPath = "/files/{key}/getpermissions/{containerKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarPathParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContainerPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContainerPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContainerPermissionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>GetDownloadTokenResult</returns>
        public GetDownloadTokenResult GetDownloadToken (GetDownloadTokenInput input)
        {
             ApiResponse<GetDownloadTokenResult> localVarResponse = GetDownloadTokenWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>ApiResponse of GetDownloadTokenResult</returns>
        public ApiResponse< GetDownloadTokenResult > GetDownloadTokenWithHttpInfo (GetDownloadTokenInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->GetDownloadToken");

            var localVarPath = "/files/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDownloadTokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDownloadTokenResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDownloadTokenResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>Task of GetDownloadTokenResult</returns>
        public async System.Threading.Tasks.Task<GetDownloadTokenResult> GetDownloadTokenAsync (GetDownloadTokenInput input)
        {
             ApiResponse<GetDownloadTokenResult> localVarResponse = await GetDownloadTokenAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetDownloadToken Input</param>
        /// <returns>Task of ApiResponse (GetDownloadTokenResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDownloadTokenResult>> GetDownloadTokenAsyncWithHttpInfo (GetDownloadTokenInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->GetDownloadToken");

            var localVarPath = "/files/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDownloadTokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDownloadTokenResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDownloadTokenResult)));
            
        }

        /// <summary>
        /// Retrieve file stream 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetFileHistoryResult</returns>
        public GetFileHistoryResult GetFileHistory (string key, string options = null, string pg = null)
        {
             ApiResponse<GetFileHistoryResult> localVarResponse = GetFileHistoryWithHttpInfo(key, options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve file stream 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetFileHistoryResult</returns>
        public ApiResponse< GetFileHistoryResult > GetFileHistoryWithHttpInfo (string key, string options = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetFileHistory");

            var localVarPath = "/files/{key}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFileHistoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFileHistoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFileHistoryResult)));
            
        }

        /// <summary>
        /// Retrieve file stream 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetFileHistoryResult</returns>
        public async System.Threading.Tasks.Task<GetFileHistoryResult> GetFileHistoryAsync (string key, string options = null, string pg = null)
        {
             ApiResponse<GetFileHistoryResult> localVarResponse = await GetFileHistoryAsyncWithHttpInfo(key, options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve file stream 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="options">(JSON object &lt;&lt;FileListOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetFileHistoryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFileHistoryResult>> GetFileHistoryAsyncWithHttpInfo (string key, string options = null, string pg = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetFileHistory");

            var localVarPath = "/files/{key}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFileHistoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFileHistoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFileHistoryResult)));
            
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>GetFilesResult</returns>
        public GetFilesResult GetFiles (List<string> keys)
        {
             ApiResponse<GetFilesResult> localVarResponse = GetFilesWithHttpInfo(keys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>ApiResponse of GetFilesResult</returns>
        public ApiResponse< GetFilesResult > GetFilesWithHttpInfo (List<string> keys)
        {
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling FileApi->GetFiles");

            var localVarPath = "/files/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (keys != null) localVarQueryParams.Add("keys", Configuration.ApiClient.ParameterToString(keys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFilesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFilesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFilesResult)));
            
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>Task of GetFilesResult</returns>
        public async System.Threading.Tasks.Task<GetFilesResult> GetFilesAsync (List<string> keys)
        {
             ApiResponse<GetFilesResult> localVarResponse = await GetFilesAsyncWithHttpInfo(keys);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keys">List of files to retrieve, each a CVID</param>
        /// <returns>Task of ApiResponse (GetFilesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFilesResult>> GetFilesAsyncWithHttpInfo (List<string> keys)
        {
            // verify the required parameter 'keys' is set
            if (keys == null)
                throw new ApiException(400, "Missing required parameter 'keys' when calling FileApi->GetFiles");

            var localVarPath = "/files/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (keys != null) localVarQueryParams.Add("keys", Configuration.ApiClient.ParameterToString(keys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFilesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFilesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFilesResult)));
            
        }

        /// <summary>
        /// process preview data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetPreviewInfoResult</returns>
        public GetPreviewInfoResult GetPreviewInfo (string key)
        {
             ApiResponse<GetPreviewInfoResult> localVarResponse = GetPreviewInfoWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// process preview data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetPreviewInfoResult</returns>
        public ApiResponse< GetPreviewInfoResult > GetPreviewInfoWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetPreviewInfo");

            var localVarPath = "/files/{key}/pre";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreviewInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreviewInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreviewInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreviewInfoResult)));
            
        }

        /// <summary>
        /// process preview data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetPreviewInfoResult</returns>
        public async System.Threading.Tasks.Task<GetPreviewInfoResult> GetPreviewInfoAsync (string key)
        {
             ApiResponse<GetPreviewInfoResult> localVarResponse = await GetPreviewInfoAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// process preview data 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetPreviewInfoResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPreviewInfoResult>> GetPreviewInfoAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetPreviewInfo");

            var localVarPath = "/files/{key}/pre";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreviewInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreviewInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreviewInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreviewInfoResult)));
            
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetPreviewStatusResult</returns>
        public GetPreviewStatusResult GetPreviewStatus (string key)
        {
             ApiResponse<GetPreviewStatusResult> localVarResponse = GetPreviewStatusWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetPreviewStatusResult</returns>
        public ApiResponse< GetPreviewStatusResult > GetPreviewStatusWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetPreviewStatus");

            var localVarPath = "/files/{key}/pre/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreviewStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreviewStatusResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreviewStatusResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreviewStatusResult)));
            
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetPreviewStatusResult</returns>
        public async System.Threading.Tasks.Task<GetPreviewStatusResult> GetPreviewStatusAsync (string key)
        {
             ApiResponse<GetPreviewStatusResult> localVarResponse = await GetPreviewStatusAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetPreviewStatusResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPreviewStatusResult>> GetPreviewStatusAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetPreviewStatus");

            var localVarPath = "/files/{key}/pre/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreviewStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreviewStatusResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreviewStatusResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreviewStatusResult)));
            
        }

        /// <summary>
        /// Get video thumbnails info 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>GetThumbnailInfoResult</returns>
        public GetThumbnailInfoResult GetThumbnailInfo (string key)
        {
             ApiResponse<GetThumbnailInfoResult> localVarResponse = GetThumbnailInfoWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get video thumbnails info 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>ApiResponse of GetThumbnailInfoResult</returns>
        public ApiResponse< GetThumbnailInfoResult > GetThumbnailInfoWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetThumbnailInfo");

            var localVarPath = "/files/{key}/thumbnails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnailInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetThumbnailInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetThumbnailInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetThumbnailInfoResult)));
            
        }

        /// <summary>
        /// Get video thumbnails info 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of GetThumbnailInfoResult</returns>
        public async System.Threading.Tasks.Task<GetThumbnailInfoResult> GetThumbnailInfoAsync (string key)
        {
             ApiResponse<GetThumbnailInfoResult> localVarResponse = await GetThumbnailInfoAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get video thumbnails info 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <returns>Task of ApiResponse (GetThumbnailInfoResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetThumbnailInfoResult>> GetThumbnailInfoAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->GetThumbnailInfo");

            var localVarPath = "/files/{key}/thumbnails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnailInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetThumbnailInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetThumbnailInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetThumbnailInfoResult)));
            
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>RecordFileActionResult</returns>
        public RecordFileActionResult RecordFileAction (string key, RecordFileActionInput input)
        {
             ApiResponse<RecordFileActionResult> localVarResponse = RecordFileActionWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>ApiResponse of RecordFileActionResult</returns>
        public ApiResponse< RecordFileActionResult > RecordFileActionWithHttpInfo (string key, RecordFileActionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->RecordFileAction");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RecordFileAction");

            var localVarPath = "/files/{key}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordFileAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordFileActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordFileActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordFileActionResult)));
            
        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>Task of RecordFileActionResult</returns>
        public async System.Threading.Tasks.Task<RecordFileActionResult> RecordFileActionAsync (string key, RecordFileActionInput input)
        {
             ApiResponse<RecordFileActionResult> localVarResponse = await RecordFileActionAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// check whether preview is ready 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">fileKey</param>
        /// <param name="input">RecordFileAction Input</param>
        /// <returns>Task of ApiResponse (RecordFileActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordFileActionResult>> RecordFileActionAsyncWithHttpInfo (string key, RecordFileActionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->RecordFileAction");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RecordFileAction");

            var localVarPath = "/files/{key}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordFileAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordFileActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordFileActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordFileActionResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>RemoveCSIPermissionsResult</returns>
        public RemoveCSIPermissionsResult RemoveCSIPermissions (RemoveCSIPermissionsInput input)
        {
             ApiResponse<RemoveCSIPermissionsResult> localVarResponse = RemoveCSIPermissionsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>ApiResponse of RemoveCSIPermissionsResult</returns>
        public ApiResponse< RemoveCSIPermissionsResult > RemoveCSIPermissionsWithHttpInfo (RemoveCSIPermissionsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RemoveCSIPermissions");

            var localVarPath = "/files/csiRemovePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCSIPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveCSIPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveCSIPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveCSIPermissionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>Task of RemoveCSIPermissionsResult</returns>
        public async System.Threading.Tasks.Task<RemoveCSIPermissionsResult> RemoveCSIPermissionsAsync (RemoveCSIPermissionsInput input)
        {
             ApiResponse<RemoveCSIPermissionsResult> localVarResponse = await RemoveCSIPermissionsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RemoveCSIPermissions Input</param>
        /// <returns>Task of ApiResponse (RemoveCSIPermissionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveCSIPermissionsResult>> RemoveCSIPermissionsAsyncWithHttpInfo (RemoveCSIPermissionsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RemoveCSIPermissions");

            var localVarPath = "/files/csiRemovePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCSIPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveCSIPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveCSIPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveCSIPermissionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>RemoveFileAttachmentsResult</returns>
        public RemoveFileAttachmentsResult RemoveFileAttachments (string objectKey, RemoveFileAttachmentsInput input)
        {
             ApiResponse<RemoveFileAttachmentsResult> localVarResponse = RemoveFileAttachmentsWithHttpInfo(objectKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>ApiResponse of RemoveFileAttachmentsResult</returns>
        public ApiResponse< RemoveFileAttachmentsResult > RemoveFileAttachmentsWithHttpInfo (string objectKey, RemoveFileAttachmentsInput input)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling FileApi->RemoveFileAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RemoveFileAttachments");

            var localVarPath = "/files/{objectKey}/removeFileAsAttachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveFileAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveFileAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveFileAttachmentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>Task of RemoveFileAttachmentsResult</returns>
        public async System.Threading.Tasks.Task<RemoveFileAttachmentsResult> RemoveFileAttachmentsAsync (string objectKey, RemoveFileAttachmentsInput input)
        {
             ApiResponse<RemoveFileAttachmentsResult> localVarResponse = await RemoveFileAttachmentsAsyncWithHttpInfo(objectKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectKey"></param>
        /// <param name="input">RemoveFileAttachments Input</param>
        /// <returns>Task of ApiResponse (RemoveFileAttachmentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveFileAttachmentsResult>> RemoveFileAttachmentsAsyncWithHttpInfo (string objectKey, RemoveFileAttachmentsInput input)
        {
            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
                throw new ApiException(400, "Missing required parameter 'objectKey' when calling FileApi->RemoveFileAttachments");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->RemoveFileAttachments");

            var localVarPath = "/files/{objectKey}/removeFileAsAttachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectKey != null) localVarPathParams.Add("objectKey", Configuration.ApiClient.ParameterToString(objectKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveFileAttachmentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveFileAttachmentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveFileAttachmentsResult)));
            
        }

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>SetCSIAccessResult</returns>
        public SetCSIAccessResult SetCSIAccess (string key, string containerKey = null)
        {
             ApiResponse<SetCSIAccessResult> localVarResponse = SetCSIAccessWithHttpInfo(key, containerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>ApiResponse of SetCSIAccessResult</returns>
        public ApiResponse< SetCSIAccessResult > SetCSIAccessWithHttpInfo (string key, string containerKey = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->SetCSIAccess");

            var localVarPath = "/files/{key}/csi/setAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCSIAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetCSIAccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetCSIAccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetCSIAccessResult)));
            
        }

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>Task of SetCSIAccessResult</returns>
        public async System.Threading.Tasks.Task<SetCSIAccessResult> SetCSIAccessAsync (string key, string containerKey = null)
        {
             ApiResponse<SetCSIAccessResult> localVarResponse = await SetCSIAccessAsyncWithHttpInfo(key, containerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utility function that sets cloud storage file permission for a user.Vmoso permsissions, when you add a file to a (task, post, space)you are given download access by default.For google cloud storage integration, adding a file to a taskautomatically assign the task users read access to the google file.This api does it. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">- fileKey</param>
        /// <param name="containerKey">- container key (optional)</param>
        /// <returns>Task of ApiResponse (SetCSIAccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetCSIAccessResult>> SetCSIAccessAsyncWithHttpInfo (string key, string containerKey = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->SetCSIAccess");

            var localVarPath = "/files/{key}/csi/setAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCSIAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetCSIAccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetCSIAccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetCSIAccessResult)));
            
        }

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>SetCSITokenResult</returns>
        public SetCSITokenResult SetCSIToken (SetCSITokenInput input)
        {
             ApiResponse<SetCSITokenResult> localVarResponse = SetCSITokenWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>ApiResponse of SetCSITokenResult</returns>
        public ApiResponse< SetCSITokenResult > SetCSITokenWithHttpInfo (SetCSITokenInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetCSIToken");

            var localVarPath = "/files/csiSetUserToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCSIToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetCSITokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetCSITokenResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetCSITokenResult)));
            
        }

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>Task of SetCSITokenResult</returns>
        public async System.Threading.Tasks.Task<SetCSITokenResult> SetCSITokenAsync (SetCSITokenInput input)
        {
             ApiResponse<SetCSITokenResult> localVarResponse = await SetCSITokenAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utility function that associates an email address withcsi (cloud storage integration) token. Store the datain the user&#39;s vmoso db. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetCSIToken Input</param>
        /// <returns>Task of ApiResponse (SetCSITokenResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetCSITokenResult>> SetCSITokenAsyncWithHttpInfo (SetCSITokenInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetCSIToken");

            var localVarPath = "/files/csiSetUserToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCSIToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetCSITokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetCSITokenResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetCSITokenResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>SetContainerPermissionsResult</returns>
        public SetContainerPermissionsResult SetContainerPermissions (string key, string containerKey, SetContainerPermissionsInput input)
        {
             ApiResponse<SetContainerPermissionsResult> localVarResponse = SetContainerPermissionsWithHttpInfo(key, containerKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>ApiResponse of SetContainerPermissionsResult</returns>
        public ApiResponse< SetContainerPermissionsResult > SetContainerPermissionsWithHttpInfo (string key, string containerKey, SetContainerPermissionsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->SetContainerPermissions");
            // verify the required parameter 'containerKey' is set
            if (containerKey == null)
                throw new ApiException(400, "Missing required parameter 'containerKey' when calling FileApi->SetContainerPermissions");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetContainerPermissions");

            var localVarPath = "/files/{key}/setpermissions/{containerKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarPathParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetContainerPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetContainerPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetContainerPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetContainerPermissionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>Task of SetContainerPermissionsResult</returns>
        public async System.Threading.Tasks.Task<SetContainerPermissionsResult> SetContainerPermissionsAsync (string key, string containerKey, SetContainerPermissionsInput input)
        {
             ApiResponse<SetContainerPermissionsResult> localVarResponse = await SetContainerPermissionsAsyncWithHttpInfo(key, containerKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"></param>
        /// <param name="input">SetContainerPermissions Input</param>
        /// <returns>Task of ApiResponse (SetContainerPermissionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetContainerPermissionsResult>> SetContainerPermissionsAsyncWithHttpInfo (string key, string containerKey, SetContainerPermissionsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->SetContainerPermissions");
            // verify the required parameter 'containerKey' is set
            if (containerKey == null)
                throw new ApiException(400, "Missing required parameter 'containerKey' when calling FileApi->SetContainerPermissions");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetContainerPermissions");

            var localVarPath = "/files/{key}/setpermissions/{containerKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarPathParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetContainerPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetContainerPermissionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetContainerPermissionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetContainerPermissionsResult)));
            
        }

        /// <summary>
        /// Mark file as Favorite 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>SetFavoriteResult</returns>
        public SetFavoriteResult SetFavorite (SetFavoriteInput input)
        {
             ApiResponse<SetFavoriteResult> localVarResponse = SetFavoriteWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark file as Favorite 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>ApiResponse of SetFavoriteResult</returns>
        public ApiResponse< SetFavoriteResult > SetFavoriteWithHttpInfo (SetFavoriteInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetFavorite");

            var localVarPath = "/files/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetFavoriteResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetFavoriteResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetFavoriteResult)));
            
        }

        /// <summary>
        /// Mark file as Favorite 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>Task of SetFavoriteResult</returns>
        public async System.Threading.Tasks.Task<SetFavoriteResult> SetFavoriteAsync (SetFavoriteInput input)
        {
             ApiResponse<SetFavoriteResult> localVarResponse = await SetFavoriteAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark file as Favorite 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetFavorite Input</param>
        /// <returns>Task of ApiResponse (SetFavoriteResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetFavoriteResult>> SetFavoriteAsyncWithHttpInfo (SetFavoriteInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetFavorite");

            var localVarPath = "/files/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetFavoriteResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetFavoriteResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetFavoriteResult)));
            
        }

        /// <summary>
        /// Mark file as important 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>SetImportantResult</returns>
        public SetImportantResult SetImportant (SetImportantInput input)
        {
             ApiResponse<SetImportantResult> localVarResponse = SetImportantWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark file as important 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>ApiResponse of SetImportantResult</returns>
        public ApiResponse< SetImportantResult > SetImportantWithHttpInfo (SetImportantInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetImportant");

            var localVarPath = "/files/important";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetImportant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetImportantResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetImportantResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetImportantResult)));
            
        }

        /// <summary>
        /// Mark file as important 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>Task of SetImportantResult</returns>
        public async System.Threading.Tasks.Task<SetImportantResult> SetImportantAsync (SetImportantInput input)
        {
             ApiResponse<SetImportantResult> localVarResponse = await SetImportantAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark file as important 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetImportant Input</param>
        /// <returns>Task of ApiResponse (SetImportantResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetImportantResult>> SetImportantAsyncWithHttpInfo (SetImportantInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->SetImportant");

            var localVarPath = "/files/important";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetImportant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetImportantResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetImportantResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetImportantResult)));
            
        }

        /// <summary>
        /// Update a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>UpdateFileResult</returns>
        public UpdateFileResult UpdateFile (string key, UpdateFileInput input)
        {
             ApiResponse<UpdateFileResult> localVarResponse = UpdateFileWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>ApiResponse of UpdateFileResult</returns>
        public ApiResponse< UpdateFileResult > UpdateFileWithHttpInfo (string key, UpdateFileInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->UpdateFile");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->UpdateFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFileResult)));
            
        }

        /// <summary>
        /// Update a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>Task of UpdateFileResult</returns>
        public async System.Threading.Tasks.Task<UpdateFileResult> UpdateFileAsync (string key, UpdateFileInput input)
        {
             ApiResponse<UpdateFileResult> localVarResponse = await UpdateFileAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UpdateFile Input</param>
        /// <returns>Task of ApiResponse (UpdateFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateFileResult>> UpdateFileAsyncWithHttpInfo (string key, UpdateFileInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->UpdateFile");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FileApi->UpdateFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFileResult)));
            
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>ViewFileResult</returns>
        public ViewFileResult ViewFile (string key, string containerKey = null, int? version = null)
        {
             ApiResponse<ViewFileResult> localVarResponse = ViewFileWithHttpInfo(key, containerKey, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>ApiResponse of ViewFileResult</returns>
        public ApiResponse< ViewFileResult > ViewFileWithHttpInfo (string key, string containerKey = null, int? version = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->ViewFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter
            if (version != null) localVarQueryParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewFileResult)));
            
        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>Task of ViewFileResult</returns>
        public async System.Threading.Tasks.Task<ViewFileResult> ViewFileAsync (string key, string containerKey = null, int? version = null)
        {
             ApiResponse<ViewFileResult> localVarResponse = await ViewFileAsyncWithHttpInfo(key, containerKey, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Files by keys. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="containerKey"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewFileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewFileResult>> ViewFileAsyncWithHttpInfo (string key, string containerKey = null, int? version = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FileApi->ViewFile");

            var localVarPath = "/files/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (containerKey != null) localVarQueryParams.Add("containerKey", Configuration.ApiClient.ParameterToString(containerKey)); // query parameter
            if (version != null) localVarQueryParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewFileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewFileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewFileResult)));
            
        }

    }
}
