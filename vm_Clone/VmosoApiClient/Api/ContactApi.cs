/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>AcceptNewUserInvitationResult</returns>
        AcceptNewUserInvitationResult AcceptNewUserInvitation (AcceptNewUserInvitationInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>ApiResponse of AcceptNewUserInvitationResult</returns>
        ApiResponse<AcceptNewUserInvitationResult> AcceptNewUserInvitationWithHttpInfo (AcceptNewUserInvitationInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>AcceptRegisteredUserInvitationResult</returns>
        AcceptRegisteredUserInvitationResult AcceptRegisteredUserInvitation (AcceptRegisteredUserInvitationInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>ApiResponse of AcceptRegisteredUserInvitationResult</returns>
        ApiResponse<AcceptRegisteredUserInvitationResult> AcceptRegisteredUserInvitationWithHttpInfo (AcceptRegisteredUserInvitationInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>ConfirmRegistrationEmailResult</returns>
        ConfirmRegistrationEmailResult ConfirmRegistrationEmail (ConfirmRegistrationEmailInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>ApiResponse of ConfirmRegistrationEmailResult</returns>
        ApiResponse<ConfirmRegistrationEmailResult> ConfirmRegistrationEmailWithHttpInfo (ConfirmRegistrationEmailInput input);
        /// <summary>
        /// Deletes the given users as contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>DeleteContactsResult</returns>
        DeleteContactsResult DeleteContacts (DeleteContactsInput input);

        /// <summary>
        /// Deletes the given users as contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>ApiResponse of DeleteContactsResult</returns>
        ApiResponse<DeleteContactsResult> DeleteContactsWithHttpInfo (DeleteContactsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>DeleteRequestResult</returns>
        DeleteRequestResult DeleteRequest (DeleteRequestInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>ApiResponse of DeleteRequestResult</returns>
        ApiResponse<DeleteRequestResult> DeleteRequestWithHttpInfo (DeleteRequestInput input);
        /// <summary>
        /// Downgrade Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>DowngradeContactsResult</returns>
        DowngradeContactsResult DowngradeContacts (DowngradeContactsInput input);

        /// <summary>
        /// Downgrade Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>ApiResponse of DowngradeContactsResult</returns>
        ApiResponse<DowngradeContactsResult> DowngradeContactsWithHttpInfo (DowngradeContactsInput input);
        /// <summary>
        /// Check exist chat or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>GetExistingTasksResult</returns>
        GetExistingTasksResult GetExistingTasks (GetExistingTasksInput input);

        /// <summary>
        /// Check exist chat or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>ApiResponse of GetExistingTasksResult</returns>
        ApiResponse<GetExistingTasksResult> GetExistingTasksWithHttpInfo (GetExistingTasksInput input);
        /// <summary>
        /// Connect Google
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>GetGoogleConnectionDataResult</returns>
        GetGoogleConnectionDataResult GetGoogleConnectionData (string type = null, string inargs = null);

        /// <summary>
        /// Connect Google
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>ApiResponse of GetGoogleConnectionDataResult</returns>
        ApiResponse<GetGoogleConnectionDataResult> GetGoogleConnectionDataWithHttpInfo (string type = null, string inargs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>GetMutualTypesResult</returns>
        GetMutualTypesResult GetMutualTypes (List<string> contactKeys, string types, string permission = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>ApiResponse of GetMutualTypesResult</returns>
        ApiResponse<GetMutualTypesResult> GetMutualTypesWithHttpInfo (List<string> contactKeys, string types, string permission = null);
        /// <summary>
        /// Get user profile by user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetProfileResult</returns>
        GetProfileResult GetProfile (string key);

        /// <summary>
        /// Get user profile by user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetProfileResult</returns>
        ApiResponse<GetProfileResult> GetProfileWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>ImportAcquaintancesResult</returns>
        ImportAcquaintancesResult ImportAcquaintances (ImportAcquaintancesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>ApiResponse of ImportAcquaintancesResult</returns>
        ApiResponse<ImportAcquaintancesResult> ImportAcquaintancesWithHttpInfo (ImportAcquaintancesInput input);
        /// <summary>
        /// Import users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ImportContactsResult</returns>
        ImportContactsResult ImportContacts (string type, string args = null, string pg = null);

        /// <summary>
        /// Import users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ImportContactsResult</returns>
        ApiResponse<ImportContactsResult> ImportContactsWithHttpInfo (string type, string args = null, string pg = null);
        /// <summary>
        /// Invite new users or request connection with an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>InviteEmailAddressResult</returns>
        InviteEmailAddressResult InviteEmailAddress (InviteEmailAddressInput input);

        /// <summary>
        /// Invite new users or request connection with an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>ApiResponse of InviteEmailAddressResult</returns>
        ApiResponse<InviteEmailAddressResult> InviteEmailAddressWithHttpInfo (InviteEmailAddressInput input);
        /// <summary>
        /// Invite invite selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>InviteUsersResult</returns>
        InviteUsersResult InviteUsers (InviteUsersInput input);

        /// <summary>
        /// Invite invite selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>ApiResponse of InviteUsersResult</returns>
        ApiResponse<InviteUsersResult> InviteUsersWithHttpInfo (InviteUsersInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>ProcessActionResult</returns>
        ProcessActionResult ProcessAction (ProcessActionInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>ApiResponse of ProcessActionResult</returns>
        ApiResponse<ProcessActionResult> ProcessActionWithHttpInfo (ProcessActionInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>Task of AcceptNewUserInvitationResult</returns>
        System.Threading.Tasks.Task<AcceptNewUserInvitationResult> AcceptNewUserInvitationAsync (AcceptNewUserInvitationInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>Task of ApiResponse (AcceptNewUserInvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptNewUserInvitationResult>> AcceptNewUserInvitationAsyncWithHttpInfo (AcceptNewUserInvitationInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>Task of AcceptRegisteredUserInvitationResult</returns>
        System.Threading.Tasks.Task<AcceptRegisteredUserInvitationResult> AcceptRegisteredUserInvitationAsync (AcceptRegisteredUserInvitationInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>Task of ApiResponse (AcceptRegisteredUserInvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptRegisteredUserInvitationResult>> AcceptRegisteredUserInvitationAsyncWithHttpInfo (AcceptRegisteredUserInvitationInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>Task of ConfirmRegistrationEmailResult</returns>
        System.Threading.Tasks.Task<ConfirmRegistrationEmailResult> ConfirmRegistrationEmailAsync (ConfirmRegistrationEmailInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>Task of ApiResponse (ConfirmRegistrationEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmRegistrationEmailResult>> ConfirmRegistrationEmailAsyncWithHttpInfo (ConfirmRegistrationEmailInput input);
        /// <summary>
        /// Deletes the given users as contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>Task of DeleteContactsResult</returns>
        System.Threading.Tasks.Task<DeleteContactsResult> DeleteContactsAsync (DeleteContactsInput input);

        /// <summary>
        /// Deletes the given users as contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>Task of ApiResponse (DeleteContactsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteContactsResult>> DeleteContactsAsyncWithHttpInfo (DeleteContactsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>Task of DeleteRequestResult</returns>
        System.Threading.Tasks.Task<DeleteRequestResult> DeleteRequestAsync (DeleteRequestInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>Task of ApiResponse (DeleteRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRequestResult>> DeleteRequestAsyncWithHttpInfo (DeleteRequestInput input);
        /// <summary>
        /// Downgrade Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>Task of DowngradeContactsResult</returns>
        System.Threading.Tasks.Task<DowngradeContactsResult> DowngradeContactsAsync (DowngradeContactsInput input);

        /// <summary>
        /// Downgrade Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>Task of ApiResponse (DowngradeContactsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DowngradeContactsResult>> DowngradeContactsAsyncWithHttpInfo (DowngradeContactsInput input);
        /// <summary>
        /// Check exist chat or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>Task of GetExistingTasksResult</returns>
        System.Threading.Tasks.Task<GetExistingTasksResult> GetExistingTasksAsync (GetExistingTasksInput input);

        /// <summary>
        /// Check exist chat or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>Task of ApiResponse (GetExistingTasksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExistingTasksResult>> GetExistingTasksAsyncWithHttpInfo (GetExistingTasksInput input);
        /// <summary>
        /// Connect Google
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>Task of GetGoogleConnectionDataResult</returns>
        System.Threading.Tasks.Task<GetGoogleConnectionDataResult> GetGoogleConnectionDataAsync (string type = null, string inargs = null);

        /// <summary>
        /// Connect Google
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>Task of ApiResponse (GetGoogleConnectionDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoogleConnectionDataResult>> GetGoogleConnectionDataAsyncWithHttpInfo (string type = null, string inargs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>Task of GetMutualTypesResult</returns>
        System.Threading.Tasks.Task<GetMutualTypesResult> GetMutualTypesAsync (List<string> contactKeys, string types, string permission = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>Task of ApiResponse (GetMutualTypesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMutualTypesResult>> GetMutualTypesAsyncWithHttpInfo (List<string> contactKeys, string types, string permission = null);
        /// <summary>
        /// Get user profile by user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetProfileResult</returns>
        System.Threading.Tasks.Task<GetProfileResult> GetProfileAsync (string key);

        /// <summary>
        /// Get user profile by user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetProfileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileResult>> GetProfileAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>Task of ImportAcquaintancesResult</returns>
        System.Threading.Tasks.Task<ImportAcquaintancesResult> ImportAcquaintancesAsync (ImportAcquaintancesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>Task of ApiResponse (ImportAcquaintancesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportAcquaintancesResult>> ImportAcquaintancesAsyncWithHttpInfo (ImportAcquaintancesInput input);
        /// <summary>
        /// Import users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ImportContactsResult</returns>
        System.Threading.Tasks.Task<ImportContactsResult> ImportContactsAsync (string type, string args = null, string pg = null);

        /// <summary>
        /// Import users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ImportContactsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportContactsResult>> ImportContactsAsyncWithHttpInfo (string type, string args = null, string pg = null);
        /// <summary>
        /// Invite new users or request connection with an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>Task of InviteEmailAddressResult</returns>
        System.Threading.Tasks.Task<InviteEmailAddressResult> InviteEmailAddressAsync (InviteEmailAddressInput input);

        /// <summary>
        /// Invite new users or request connection with an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>Task of ApiResponse (InviteEmailAddressResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteEmailAddressResult>> InviteEmailAddressAsyncWithHttpInfo (InviteEmailAddressInput input);
        /// <summary>
        /// Invite invite selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>Task of InviteUsersResult</returns>
        System.Threading.Tasks.Task<InviteUsersResult> InviteUsersAsync (InviteUsersInput input);

        /// <summary>
        /// Invite invite selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>Task of ApiResponse (InviteUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteUsersResult>> InviteUsersAsyncWithHttpInfo (InviteUsersInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>Task of ProcessActionResult</returns>
        System.Threading.Tasks.Task<ProcessActionResult> ProcessActionAsync (ProcessActionInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>Task of ApiResponse (ProcessActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessActionResult>> ProcessActionAsyncWithHttpInfo (ProcessActionInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactApi : IContactApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public ContactApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public ContactApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>AcceptNewUserInvitationResult</returns>
        public AcceptNewUserInvitationResult AcceptNewUserInvitation (AcceptNewUserInvitationInput input)
        {
             ApiResponse<AcceptNewUserInvitationResult> localVarResponse = AcceptNewUserInvitationWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>ApiResponse of AcceptNewUserInvitationResult</returns>
        public ApiResponse< AcceptNewUserInvitationResult > AcceptNewUserInvitationWithHttpInfo (AcceptNewUserInvitationInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->AcceptNewUserInvitation");

            var localVarPath = "/contacts/newUserAcceptInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptNewUserInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptNewUserInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptNewUserInvitationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptNewUserInvitationResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>Task of AcceptNewUserInvitationResult</returns>
        public async System.Threading.Tasks.Task<AcceptNewUserInvitationResult> AcceptNewUserInvitationAsync (AcceptNewUserInvitationInput input)
        {
             ApiResponse<AcceptNewUserInvitationResult> localVarResponse = await AcceptNewUserInvitationAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptNewUserInvitation Input</param>
        /// <returns>Task of ApiResponse (AcceptNewUserInvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptNewUserInvitationResult>> AcceptNewUserInvitationAsyncWithHttpInfo (AcceptNewUserInvitationInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->AcceptNewUserInvitation");

            var localVarPath = "/contacts/newUserAcceptInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptNewUserInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptNewUserInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptNewUserInvitationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptNewUserInvitationResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>AcceptRegisteredUserInvitationResult</returns>
        public AcceptRegisteredUserInvitationResult AcceptRegisteredUserInvitation (AcceptRegisteredUserInvitationInput input)
        {
             ApiResponse<AcceptRegisteredUserInvitationResult> localVarResponse = AcceptRegisteredUserInvitationWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>ApiResponse of AcceptRegisteredUserInvitationResult</returns>
        public ApiResponse< AcceptRegisteredUserInvitationResult > AcceptRegisteredUserInvitationWithHttpInfo (AcceptRegisteredUserInvitationInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->AcceptRegisteredUserInvitation");

            var localVarPath = "/contacts/registeredUserAcceptInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptRegisteredUserInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptRegisteredUserInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptRegisteredUserInvitationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptRegisteredUserInvitationResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>Task of AcceptRegisteredUserInvitationResult</returns>
        public async System.Threading.Tasks.Task<AcceptRegisteredUserInvitationResult> AcceptRegisteredUserInvitationAsync (AcceptRegisteredUserInvitationInput input)
        {
             ApiResponse<AcceptRegisteredUserInvitationResult> localVarResponse = await AcceptRegisteredUserInvitationAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">AcceptRegisteredUserInvitation Input</param>
        /// <returns>Task of ApiResponse (AcceptRegisteredUserInvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptRegisteredUserInvitationResult>> AcceptRegisteredUserInvitationAsyncWithHttpInfo (AcceptRegisteredUserInvitationInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->AcceptRegisteredUserInvitation");

            var localVarPath = "/contacts/registeredUserAcceptInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptRegisteredUserInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptRegisteredUserInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptRegisteredUserInvitationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptRegisteredUserInvitationResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>ConfirmRegistrationEmailResult</returns>
        public ConfirmRegistrationEmailResult ConfirmRegistrationEmail (ConfirmRegistrationEmailInput input)
        {
             ApiResponse<ConfirmRegistrationEmailResult> localVarResponse = ConfirmRegistrationEmailWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>ApiResponse of ConfirmRegistrationEmailResult</returns>
        public ApiResponse< ConfirmRegistrationEmailResult > ConfirmRegistrationEmailWithHttpInfo (ConfirmRegistrationEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ConfirmRegistrationEmail");

            var localVarPath = "/contacts/registrationEmailConfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmRegistrationEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmRegistrationEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmRegistrationEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmRegistrationEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>Task of ConfirmRegistrationEmailResult</returns>
        public async System.Threading.Tasks.Task<ConfirmRegistrationEmailResult> ConfirmRegistrationEmailAsync (ConfirmRegistrationEmailInput input)
        {
             ApiResponse<ConfirmRegistrationEmailResult> localVarResponse = await ConfirmRegistrationEmailAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmRegistrationEmail Input</param>
        /// <returns>Task of ApiResponse (ConfirmRegistrationEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmRegistrationEmailResult>> ConfirmRegistrationEmailAsyncWithHttpInfo (ConfirmRegistrationEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ConfirmRegistrationEmail");

            var localVarPath = "/contacts/registrationEmailConfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmRegistrationEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmRegistrationEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmRegistrationEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmRegistrationEmailResult)));
            
        }

        /// <summary>
        /// Deletes the given users as contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>DeleteContactsResult</returns>
        public DeleteContactsResult DeleteContacts (DeleteContactsInput input)
        {
             ApiResponse<DeleteContactsResult> localVarResponse = DeleteContactsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given users as contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>ApiResponse of DeleteContactsResult</returns>
        public ApiResponse< DeleteContactsResult > DeleteContactsWithHttpInfo (DeleteContactsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DeleteContacts");

            var localVarPath = "/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteContactsResult)));
            
        }

        /// <summary>
        /// Deletes the given users as contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>Task of DeleteContactsResult</returns>
        public async System.Threading.Tasks.Task<DeleteContactsResult> DeleteContactsAsync (DeleteContactsInput input)
        {
             ApiResponse<DeleteContactsResult> localVarResponse = await DeleteContactsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given users as contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteContacts Input</param>
        /// <returns>Task of ApiResponse (DeleteContactsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteContactsResult>> DeleteContactsAsyncWithHttpInfo (DeleteContactsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DeleteContacts");

            var localVarPath = "/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteContactsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>DeleteRequestResult</returns>
        public DeleteRequestResult DeleteRequest (DeleteRequestInput input)
        {
             ApiResponse<DeleteRequestResult> localVarResponse = DeleteRequestWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>ApiResponse of DeleteRequestResult</returns>
        public ApiResponse< DeleteRequestResult > DeleteRequestWithHttpInfo (DeleteRequestInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DeleteRequest");

            var localVarPath = "/contacts/cancelRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteRequestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteRequestResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteRequestResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>Task of DeleteRequestResult</returns>
        public async System.Threading.Tasks.Task<DeleteRequestResult> DeleteRequestAsync (DeleteRequestInput input)
        {
             ApiResponse<DeleteRequestResult> localVarResponse = await DeleteRequestAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteRequest Input</param>
        /// <returns>Task of ApiResponse (DeleteRequestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteRequestResult>> DeleteRequestAsyncWithHttpInfo (DeleteRequestInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DeleteRequest");

            var localVarPath = "/contacts/cancelRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteRequestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteRequestResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteRequestResult)));
            
        }

        /// <summary>
        /// Downgrade Contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>DowngradeContactsResult</returns>
        public DowngradeContactsResult DowngradeContacts (DowngradeContactsInput input)
        {
             ApiResponse<DowngradeContactsResult> localVarResponse = DowngradeContactsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downgrade Contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>ApiResponse of DowngradeContactsResult</returns>
        public ApiResponse< DowngradeContactsResult > DowngradeContactsWithHttpInfo (DowngradeContactsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DowngradeContacts");

            var localVarPath = "/contacts/downgrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DowngradeContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DowngradeContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DowngradeContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DowngradeContactsResult)));
            
        }

        /// <summary>
        /// Downgrade Contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>Task of DowngradeContactsResult</returns>
        public async System.Threading.Tasks.Task<DowngradeContactsResult> DowngradeContactsAsync (DowngradeContactsInput input)
        {
             ApiResponse<DowngradeContactsResult> localVarResponse = await DowngradeContactsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downgrade Contacts 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DowngradeContacts Input</param>
        /// <returns>Task of ApiResponse (DowngradeContactsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DowngradeContactsResult>> DowngradeContactsAsyncWithHttpInfo (DowngradeContactsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->DowngradeContacts");

            var localVarPath = "/contacts/downgrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DowngradeContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DowngradeContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DowngradeContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DowngradeContactsResult)));
            
        }

        /// <summary>
        /// Check exist chat or not 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>GetExistingTasksResult</returns>
        public GetExistingTasksResult GetExistingTasks (GetExistingTasksInput input)
        {
             ApiResponse<GetExistingTasksResult> localVarResponse = GetExistingTasksWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check exist chat or not 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>ApiResponse of GetExistingTasksResult</returns>
        public ApiResponse< GetExistingTasksResult > GetExistingTasksWithHttpInfo (GetExistingTasksInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->GetExistingTasks");

            var localVarPath = "/contacts/checkExistingChats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExistingTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExistingTasksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetExistingTasksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExistingTasksResult)));
            
        }

        /// <summary>
        /// Check exist chat or not 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>Task of GetExistingTasksResult</returns>
        public async System.Threading.Tasks.Task<GetExistingTasksResult> GetExistingTasksAsync (GetExistingTasksInput input)
        {
             ApiResponse<GetExistingTasksResult> localVarResponse = await GetExistingTasksAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check exist chat or not 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetExistingTasks Input</param>
        /// <returns>Task of ApiResponse (GetExistingTasksResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExistingTasksResult>> GetExistingTasksAsyncWithHttpInfo (GetExistingTasksInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->GetExistingTasks");

            var localVarPath = "/contacts/checkExistingChats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExistingTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExistingTasksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetExistingTasksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExistingTasksResult)));
            
        }

        /// <summary>
        /// Connect Google 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>GetGoogleConnectionDataResult</returns>
        public GetGoogleConnectionDataResult GetGoogleConnectionData (string type = null, string inargs = null)
        {
             ApiResponse<GetGoogleConnectionDataResult> localVarResponse = GetGoogleConnectionDataWithHttpInfo(type, inargs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Connect Google 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>ApiResponse of GetGoogleConnectionDataResult</returns>
        public ApiResponse< GetGoogleConnectionDataResult > GetGoogleConnectionDataWithHttpInfo (string type = null, string inargs = null)
        {

            var localVarPath = "/contacts/getGoogleConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (inargs != null) localVarQueryParams.Add("inargs", Configuration.ApiClient.ParameterToString(inargs)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoogleConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoogleConnectionDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGoogleConnectionDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoogleConnectionDataResult)));
            
        }

        /// <summary>
        /// Connect Google 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>Task of GetGoogleConnectionDataResult</returns>
        public async System.Threading.Tasks.Task<GetGoogleConnectionDataResult> GetGoogleConnectionDataAsync (string type = null, string inargs = null)
        {
             ApiResponse<GetGoogleConnectionDataResult> localVarResponse = await GetGoogleConnectionDataAsyncWithHttpInfo(type, inargs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Connect Google 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type (optional)</param>
        /// <param name="inargs"> (optional)</param>
        /// <returns>Task of ApiResponse (GetGoogleConnectionDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoogleConnectionDataResult>> GetGoogleConnectionDataAsyncWithHttpInfo (string type = null, string inargs = null)
        {

            var localVarPath = "/contacts/getGoogleConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (inargs != null) localVarQueryParams.Add("inargs", Configuration.ApiClient.ParameterToString(inargs)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoogleConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoogleConnectionDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGoogleConnectionDataResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoogleConnectionDataResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>GetMutualTypesResult</returns>
        public GetMutualTypesResult GetMutualTypes (List<string> contactKeys, string types, string permission = null)
        {
             ApiResponse<GetMutualTypesResult> localVarResponse = GetMutualTypesWithHttpInfo(contactKeys, types, permission);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>ApiResponse of GetMutualTypesResult</returns>
        public ApiResponse< GetMutualTypesResult > GetMutualTypesWithHttpInfo (List<string> contactKeys, string types, string permission = null)
        {
            // verify the required parameter 'contactKeys' is set
            if (contactKeys == null)
                throw new ApiException(400, "Missing required parameter 'contactKeys' when calling ContactApi->GetMutualTypes");
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling ContactApi->GetMutualTypes");

            var localVarPath = "/contacts/mutual/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactKeys != null) localVarQueryParams.Add("contactKeys", Configuration.ApiClient.ParameterToString(contactKeys)); // query parameter
            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter
            if (permission != null) localVarQueryParams.Add("permission", Configuration.ApiClient.ParameterToString(permission)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMutualTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMutualTypesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMutualTypesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMutualTypesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>Task of GetMutualTypesResult</returns>
        public async System.Threading.Tasks.Task<GetMutualTypesResult> GetMutualTypesAsync (List<string> contactKeys, string types, string permission = null)
        {
             ApiResponse<GetMutualTypesResult> localVarResponse = await GetMutualTypesAsyncWithHttpInfo(contactKeys, types, permission);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactKeys"></param>
        /// <param name="types">(JSON object &lt;&lt;ObjectTypeRecord[]&gt;&gt;)</param>
        /// <param name="permission"> (optional)</param>
        /// <returns>Task of ApiResponse (GetMutualTypesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMutualTypesResult>> GetMutualTypesAsyncWithHttpInfo (List<string> contactKeys, string types, string permission = null)
        {
            // verify the required parameter 'contactKeys' is set
            if (contactKeys == null)
                throw new ApiException(400, "Missing required parameter 'contactKeys' when calling ContactApi->GetMutualTypes");
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling ContactApi->GetMutualTypes");

            var localVarPath = "/contacts/mutual/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactKeys != null) localVarQueryParams.Add("contactKeys", Configuration.ApiClient.ParameterToString(contactKeys)); // query parameter
            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter
            if (permission != null) localVarQueryParams.Add("permission", Configuration.ApiClient.ParameterToString(permission)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMutualTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMutualTypesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMutualTypesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMutualTypesResult)));
            
        }

        /// <summary>
        /// Get user profile by user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetProfileResult</returns>
        public GetProfileResult GetProfile (string key)
        {
             ApiResponse<GetProfileResult> localVarResponse = GetProfileWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile by user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetProfileResult</returns>
        public ApiResponse< GetProfileResult > GetProfileWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ContactApi->GetProfile");

            var localVarPath = "/contacts/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetProfileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfileResult)));
            
        }

        /// <summary>
        /// Get user profile by user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetProfileResult</returns>
        public async System.Threading.Tasks.Task<GetProfileResult> GetProfileAsync (string key)
        {
             ApiResponse<GetProfileResult> localVarResponse = await GetProfileAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user profile by user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetProfileResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetProfileResult>> GetProfileAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ContactApi->GetProfile");

            var localVarPath = "/contacts/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfileResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetProfileResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfileResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>ImportAcquaintancesResult</returns>
        public ImportAcquaintancesResult ImportAcquaintances (ImportAcquaintancesInput input)
        {
             ApiResponse<ImportAcquaintancesResult> localVarResponse = ImportAcquaintancesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>ApiResponse of ImportAcquaintancesResult</returns>
        public ApiResponse< ImportAcquaintancesResult > ImportAcquaintancesWithHttpInfo (ImportAcquaintancesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ImportAcquaintances");

            var localVarPath = "/contacts/importAsAcquaintance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportAcquaintances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportAcquaintancesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportAcquaintancesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportAcquaintancesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>Task of ImportAcquaintancesResult</returns>
        public async System.Threading.Tasks.Task<ImportAcquaintancesResult> ImportAcquaintancesAsync (ImportAcquaintancesInput input)
        {
             ApiResponse<ImportAcquaintancesResult> localVarResponse = await ImportAcquaintancesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ImportAcquaintances Input</param>
        /// <returns>Task of ApiResponse (ImportAcquaintancesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportAcquaintancesResult>> ImportAcquaintancesAsyncWithHttpInfo (ImportAcquaintancesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ImportAcquaintances");

            var localVarPath = "/contacts/importAsAcquaintance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportAcquaintances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportAcquaintancesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportAcquaintancesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportAcquaintancesResult)));
            
        }

        /// <summary>
        /// Import users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ImportContactsResult</returns>
        public ImportContactsResult ImportContacts (string type, string args = null, string pg = null)
        {
             ApiResponse<ImportContactsResult> localVarResponse = ImportContactsWithHttpInfo(type, args, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ImportContactsResult</returns>
        public ApiResponse< ImportContactsResult > ImportContactsWithHttpInfo (string type, string args = null, string pg = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContactApi->ImportContacts");

            var localVarPath = "/contacts/importContacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (args != null) localVarQueryParams.Add("args", Configuration.ApiClient.ParameterToString(args)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportContactsResult)));
            
        }

        /// <summary>
        /// Import users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ImportContactsResult</returns>
        public async System.Threading.Tasks.Task<ImportContactsResult> ImportContactsAsync (string type, string args = null, string pg = null)
        {
             ApiResponse<ImportContactsResult> localVarResponse = await ImportContactsAsyncWithHttpInfo(type, args, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">- Import type</param>
        /// <param name="args">- Import file id (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ImportContactsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportContactsResult>> ImportContactsAsyncWithHttpInfo (string type, string args = null, string pg = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContactApi->ImportContacts");

            var localVarPath = "/contacts/importContacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (args != null) localVarQueryParams.Add("args", Configuration.ApiClient.ParameterToString(args)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportContactsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportContactsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportContactsResult)));
            
        }

        /// <summary>
        /// Invite new users or request connection with an existing user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>InviteEmailAddressResult</returns>
        public InviteEmailAddressResult InviteEmailAddress (InviteEmailAddressInput input)
        {
             ApiResponse<InviteEmailAddressResult> localVarResponse = InviteEmailAddressWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite new users or request connection with an existing user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>ApiResponse of InviteEmailAddressResult</returns>
        public ApiResponse< InviteEmailAddressResult > InviteEmailAddressWithHttpInfo (InviteEmailAddressInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->InviteEmailAddress");

            var localVarPath = "/contacts/inviteByEmailAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteEmailAddressResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InviteEmailAddressResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteEmailAddressResult)));
            
        }

        /// <summary>
        /// Invite new users or request connection with an existing user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>Task of InviteEmailAddressResult</returns>
        public async System.Threading.Tasks.Task<InviteEmailAddressResult> InviteEmailAddressAsync (InviteEmailAddressInput input)
        {
             ApiResponse<InviteEmailAddressResult> localVarResponse = await InviteEmailAddressAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite new users or request connection with an existing user 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteEmailAddress Input</param>
        /// <returns>Task of ApiResponse (InviteEmailAddressResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InviteEmailAddressResult>> InviteEmailAddressAsyncWithHttpInfo (InviteEmailAddressInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->InviteEmailAddress");

            var localVarPath = "/contacts/inviteByEmailAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteEmailAddressResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InviteEmailAddressResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteEmailAddressResult)));
            
        }

        /// <summary>
        /// Invite invite selected users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>InviteUsersResult</returns>
        public InviteUsersResult InviteUsers (InviteUsersInput input)
        {
             ApiResponse<InviteUsersResult> localVarResponse = InviteUsersWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite invite selected users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>ApiResponse of InviteUsersResult</returns>
        public ApiResponse< InviteUsersResult > InviteUsersWithHttpInfo (InviteUsersInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->InviteUsers");

            var localVarPath = "/contacts/inviteByKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InviteUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteUsersResult)));
            
        }

        /// <summary>
        /// Invite invite selected users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>Task of InviteUsersResult</returns>
        public async System.Threading.Tasks.Task<InviteUsersResult> InviteUsersAsync (InviteUsersInput input)
        {
             ApiResponse<InviteUsersResult> localVarResponse = await InviteUsersAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite invite selected users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">InviteUsers Input</param>
        /// <returns>Task of ApiResponse (InviteUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InviteUsersResult>> InviteUsersAsyncWithHttpInfo (InviteUsersInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->InviteUsers");

            var localVarPath = "/contacts/inviteByKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InviteUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteUsersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>ProcessActionResult</returns>
        public ProcessActionResult ProcessAction (ProcessActionInput input)
        {
             ApiResponse<ProcessActionResult> localVarResponse = ProcessActionWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>ApiResponse of ProcessActionResult</returns>
        public ApiResponse< ProcessActionResult > ProcessActionWithHttpInfo (ProcessActionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ProcessAction");

            var localVarPath = "/contacts/processRequestAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessActionResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>Task of ProcessActionResult</returns>
        public async System.Threading.Tasks.Task<ProcessActionResult> ProcessActionAsync (ProcessActionInput input)
        {
             ApiResponse<ProcessActionResult> localVarResponse = await ProcessActionAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ProcessAction Input</param>
        /// <returns>Task of ApiResponse (ProcessActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessActionResult>> ProcessActionAsyncWithHttpInfo (ProcessActionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling ContactApi->ProcessAction");

            var localVarPath = "/contacts/processRequestAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessActionResult)));
            
        }

    }
}
