/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>CheckRuleResult</returns>
        CheckRuleResult CheckRule (string options, string format = null, bool? getACL = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>ApiResponse of CheckRuleResult</returns>
        ApiResponse<CheckRuleResult> CheckRuleWithHttpInfo (string options, string format = null, bool? getACL = null);
        /// <summary>
        /// Gets Stream Item Record for given Object Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>GetItemResult</returns>
        GetItemResult GetItem (string key, string format = null, bool? getACL = null);

        /// <summary>
        /// Gets Stream Item Record for given Object Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>ApiResponse of GetItemResult</returns>
        ApiResponse<GetItemResult> GetItemWithHttpInfo (string key, string format = null, bool? getACL = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetLastActionsNoACLResult</returns>
        GetLastActionsNoACLResult GetLastActionsNoACL (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetLastActionsNoACLResult</returns>
        ApiResponse<GetLastActionsNoACLResult> GetLastActionsNoACLWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>GetRuleCountsResult</returns>
        GetRuleCountsResult GetRuleCounts (string options, List<string> ruleKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>ApiResponse of GetRuleCountsResult</returns>
        ApiResponse<GetRuleCountsResult> GetRuleCountsWithHttpInfo (string options, List<string> ruleKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>GetStreamCountsResult</returns>
        GetStreamCountsResult GetStreamCounts (string options, string dimensions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetStreamCountsResult</returns>
        ApiResponse<GetStreamCountsResult> GetStreamCountsWithHttpInfo (string options, string dimensions = null);
        /// <summary>
        /// Get new unread tiles count for given zone type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>GetStreamNUTCountResult</returns>
        GetStreamNUTCountResult GetStreamNUTCount (string countOption);

        /// <summary>
        /// Get new unread tiles count for given zone type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetStreamNUTCountResult</returns>
        ApiResponse<GetStreamNUTCountResult> GetStreamNUTCountWithHttpInfo (string countOption);
        /// <summary>
        /// Get badge counts for given objectKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetTileCountsResult</returns>
        GetTileCountsResult GetTileCounts (string key);

        /// <summary>
        /// Get badge counts for given objectKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetTileCountsResult</returns>
        ApiResponse<GetTileCountsResult> GetTileCountsWithHttpInfo (string key);
        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>GetVutCountsResult</returns>
        GetVutCountsResult GetVutCounts (string options, List<string> ruleKey);

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>ApiResponse of GetVutCountsResult</returns>
        ApiResponse<GetVutCountsResult> GetVutCountsWithHttpInfo (string options, List<string> ruleKey);
        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>GetVutCountsV2Result</returns>
        GetVutCountsV2Result GetVutCountsV2 (string options);

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>ApiResponse of GetVutCountsV2Result</returns>
        ApiResponse<GetVutCountsV2Result> GetVutCountsV2WithHttpInfo (string options);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchStreamKeyRankResult</returns>
        SearchStreamKeyRankResult SearchStreamKeyRank (string options, string pg);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchStreamKeyRankResult</returns>
        ApiResponse<SearchStreamKeyRankResult> SearchStreamKeyRankWithHttpInfo (string options, string pg);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>SearchWallResult</returns>
        SearchWallResult SearchWall (string options, string pg, string format = null);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of SearchWallResult</returns>
        ApiResponse<SearchWallResult> SearchWallWithHttpInfo (string options, string pg, string format = null);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>StreamSearchResult</returns>
        StreamSearchResult StreamSearch (string options, string pg, string format = null);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of StreamSearchResult</returns>
        ApiResponse<StreamSearchResult> StreamSearchWithHttpInfo (string options, string pg, string format = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of CheckRuleResult</returns>
        System.Threading.Tasks.Task<CheckRuleResult> CheckRuleAsync (string options, string format = null, bool? getACL = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of ApiResponse (CheckRuleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckRuleResult>> CheckRuleAsyncWithHttpInfo (string options, string format = null, bool? getACL = null);
        /// <summary>
        /// Gets Stream Item Record for given Object Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of GetItemResult</returns>
        System.Threading.Tasks.Task<GetItemResult> GetItemAsync (string key, string format = null, bool? getACL = null);

        /// <summary>
        /// Gets Stream Item Record for given Object Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of ApiResponse (GetItemResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetItemResult>> GetItemAsyncWithHttpInfo (string key, string format = null, bool? getACL = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetLastActionsNoACLResult</returns>
        System.Threading.Tasks.Task<GetLastActionsNoACLResult> GetLastActionsNoACLAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetLastActionsNoACLResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLastActionsNoACLResult>> GetLastActionsNoACLAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of GetRuleCountsResult</returns>
        System.Threading.Tasks.Task<GetRuleCountsResult> GetRuleCountsAsync (string options, List<string> ruleKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of ApiResponse (GetRuleCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRuleCountsResult>> GetRuleCountsAsyncWithHttpInfo (string options, List<string> ruleKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>Task of GetStreamCountsResult</returns>
        System.Threading.Tasks.Task<GetStreamCountsResult> GetStreamCountsAsync (string options, string dimensions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetStreamCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStreamCountsResult>> GetStreamCountsAsyncWithHttpInfo (string options, string dimensions = null);
        /// <summary>
        /// Get new unread tiles count for given zone type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>Task of GetStreamNUTCountResult</returns>
        System.Threading.Tasks.Task<GetStreamNUTCountResult> GetStreamNUTCountAsync (string countOption);

        /// <summary>
        /// Get new unread tiles count for given zone type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetStreamNUTCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStreamNUTCountResult>> GetStreamNUTCountAsyncWithHttpInfo (string countOption);
        /// <summary>
        /// Get badge counts for given objectKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetTileCountsResult</returns>
        System.Threading.Tasks.Task<GetTileCountsResult> GetTileCountsAsync (string key);

        /// <summary>
        /// Get badge counts for given objectKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetTileCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTileCountsResult>> GetTileCountsAsyncWithHttpInfo (string key);
        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of GetVutCountsResult</returns>
        System.Threading.Tasks.Task<GetVutCountsResult> GetVutCountsAsync (string options, List<string> ruleKey);

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of ApiResponse (GetVutCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVutCountsResult>> GetVutCountsAsyncWithHttpInfo (string options, List<string> ruleKey);
        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>Task of GetVutCountsV2Result</returns>
        System.Threading.Tasks.Task<GetVutCountsV2Result> GetVutCountsV2Async (string options);

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetVutCountsV2Result)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVutCountsV2Result>> GetVutCountsV2AsyncWithHttpInfo (string options);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchStreamKeyRankResult</returns>
        System.Threading.Tasks.Task<SearchStreamKeyRankResult> SearchStreamKeyRankAsync (string options, string pg);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchStreamKeyRankResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchStreamKeyRankResult>> SearchStreamKeyRankAsyncWithHttpInfo (string options, string pg);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of SearchWallResult</returns>
        System.Threading.Tasks.Task<SearchWallResult> SearchWallAsync (string options, string pg, string format = null);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (SearchWallResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchWallResult>> SearchWallAsyncWithHttpInfo (string options, string pg, string format = null);
        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of StreamSearchResult</returns>
        System.Threading.Tasks.Task<StreamSearchResult> StreamSearchAsync (string options, string pg, string format = null);

        /// <summary>
        /// Gets keys from a namespaced stream for a space
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (StreamSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamSearchResult>> StreamSearchAsyncWithHttpInfo (string options, string pg, string format = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamApi : IStreamApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public StreamApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public StreamApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>CheckRuleResult</returns>
        public CheckRuleResult CheckRule (string options, string format = null, bool? getACL = null)
        {
             ApiResponse<CheckRuleResult> localVarResponse = CheckRuleWithHttpInfo(options, format, getACL);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>ApiResponse of CheckRuleResult</returns>
        public ApiResponse< CheckRuleResult > CheckRuleWithHttpInfo (string options, string format = null, bool? getACL = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->CheckRule");

            var localVarPath = "/stream/rule/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (getACL != null) localVarQueryParams.Add("getACL", Configuration.ApiClient.ParameterToString(getACL)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckRuleResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of CheckRuleResult</returns>
        public async System.Threading.Tasks.Task<CheckRuleResult> CheckRuleAsync (string options, string format = null, bool? getACL = null)
        {
             ApiResponse<CheckRuleResult> localVarResponse = await CheckRuleAsyncWithHttpInfo(options, format, getACL);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(objectKey should be set to the id of the object which needs(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of ApiResponse (CheckRuleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckRuleResult>> CheckRuleAsyncWithHttpInfo (string options, string format = null, bool? getACL = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->CheckRule");

            var localVarPath = "/stream/rule/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (getACL != null) localVarQueryParams.Add("getACL", Configuration.ApiClient.ParameterToString(getACL)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckRuleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckRuleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckRuleResult)));
            
        }

        /// <summary>
        /// Gets Stream Item Record for given Object Key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>GetItemResult</returns>
        public GetItemResult GetItem (string key, string format = null, bool? getACL = null)
        {
             ApiResponse<GetItemResult> localVarResponse = GetItemWithHttpInfo(key, format, getACL);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Stream Item Record for given Object Key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>ApiResponse of GetItemResult</returns>
        public ApiResponse< GetItemResult > GetItemWithHttpInfo (string key, string format = null, bool? getACL = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetItem");

            var localVarPath = "/stream/{key}/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (getACL != null) localVarQueryParams.Add("getACL", Configuration.ApiClient.ParameterToString(getACL)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetItemResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetItemResult)));
            
        }

        /// <summary>
        /// Gets Stream Item Record for given Object Key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of GetItemResult</returns>
        public async System.Threading.Tasks.Task<GetItemResult> GetItemAsync (string key, string format = null, bool? getACL = null)
        {
             ApiResponse<GetItemResult> localVarResponse = await GetItemAsyncWithHttpInfo(key, format, getACL);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Stream Item Record for given Object Key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="getACL"> (optional)</param>
        /// <returns>Task of ApiResponse (GetItemResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetItemResult>> GetItemAsyncWithHttpInfo (string key, string format = null, bool? getACL = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetItem");

            var localVarPath = "/stream/{key}/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (getACL != null) localVarQueryParams.Add("getACL", Configuration.ApiClient.ParameterToString(getACL)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetItemResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetItemResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetLastActionsNoACLResult</returns>
        public GetLastActionsNoACLResult GetLastActionsNoACL (string key)
        {
             ApiResponse<GetLastActionsNoACLResult> localVarResponse = GetLastActionsNoACLWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetLastActionsNoACLResult</returns>
        public ApiResponse< GetLastActionsNoACLResult > GetLastActionsNoACLWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetLastActionsNoACL");

            var localVarPath = "/stream/lastActions/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastActionsNoACL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLastActionsNoACLResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLastActionsNoACLResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLastActionsNoACLResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetLastActionsNoACLResult</returns>
        public async System.Threading.Tasks.Task<GetLastActionsNoACLResult> GetLastActionsNoACLAsync (string key)
        {
             ApiResponse<GetLastActionsNoACLResult> localVarResponse = await GetLastActionsNoACLAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetLastActionsNoACLResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLastActionsNoACLResult>> GetLastActionsNoACLAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetLastActionsNoACL");

            var localVarPath = "/stream/lastActions/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastActionsNoACL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLastActionsNoACLResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLastActionsNoACLResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLastActionsNoACLResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>GetRuleCountsResult</returns>
        public GetRuleCountsResult GetRuleCounts (string options, List<string> ruleKey)
        {
             ApiResponse<GetRuleCountsResult> localVarResponse = GetRuleCountsWithHttpInfo(options, ruleKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>ApiResponse of GetRuleCountsResult</returns>
        public ApiResponse< GetRuleCountsResult > GetRuleCountsWithHttpInfo (string options, List<string> ruleKey)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetRuleCounts");
            // verify the required parameter 'ruleKey' is set
            if (ruleKey == null)
                throw new ApiException(400, "Missing required parameter 'ruleKey' when calling StreamApi->GetRuleCounts");

            var localVarPath = "/stream/rule/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (ruleKey != null) localVarQueryParams.Add("rule_key", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of GetRuleCountsResult</returns>
        public async System.Threading.Tasks.Task<GetRuleCountsResult> GetRuleCountsAsync (string options, List<string> ruleKey)
        {
             ApiResponse<GetRuleCountsResult> localVarResponse = await GetRuleCountsAsyncWithHttpInfo(options, ruleKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of ApiResponse (GetRuleCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRuleCountsResult>> GetRuleCountsAsyncWithHttpInfo (string options, List<string> ruleKey)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetRuleCounts");
            // verify the required parameter 'ruleKey' is set
            if (ruleKey == null)
                throw new ApiException(400, "Missing required parameter 'ruleKey' when calling StreamApi->GetRuleCounts");

            var localVarPath = "/stream/rule/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (ruleKey != null) localVarQueryParams.Add("rule_key", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRuleCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRuleCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRuleCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>GetStreamCountsResult</returns>
        public GetStreamCountsResult GetStreamCounts (string options, string dimensions = null)
        {
             ApiResponse<GetStreamCountsResult> localVarResponse = GetStreamCountsWithHttpInfo(options, dimensions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetStreamCountsResult</returns>
        public ApiResponse< GetStreamCountsResult > GetStreamCountsWithHttpInfo (string options, string dimensions = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetStreamCounts");

            var localVarPath = "/stream/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (dimensions != null) localVarQueryParams.Add("dimensions", Configuration.ApiClient.ParameterToString(dimensions)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStreamCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStreamCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStreamCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStreamCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>Task of GetStreamCountsResult</returns>
        public async System.Threading.Tasks.Task<GetStreamCountsResult> GetStreamCountsAsync (string options, string dimensions = null)
        {
             ApiResponse<GetStreamCountsResult> localVarResponse = await GetStreamCountsAsyncWithHttpInfo(options, dimensions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="dimensions">(JSON object &lt;&lt;CountDimensionRecord[]&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetStreamCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStreamCountsResult>> GetStreamCountsAsyncWithHttpInfo (string options, string dimensions = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetStreamCounts");

            var localVarPath = "/stream/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (dimensions != null) localVarQueryParams.Add("dimensions", Configuration.ApiClient.ParameterToString(dimensions)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStreamCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStreamCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStreamCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStreamCountsResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count for given zone type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>GetStreamNUTCountResult</returns>
        public GetStreamNUTCountResult GetStreamNUTCount (string countOption)
        {
             ApiResponse<GetStreamNUTCountResult> localVarResponse = GetStreamNUTCountWithHttpInfo(countOption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new unread tiles count for given zone type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of GetStreamNUTCountResult</returns>
        public ApiResponse< GetStreamNUTCountResult > GetStreamNUTCountWithHttpInfo (string countOption)
        {
            // verify the required parameter 'countOption' is set
            if (countOption == null)
                throw new ApiException(400, "Missing required parameter 'countOption' when calling StreamApi->GetStreamNUTCount");

            var localVarPath = "/stream/nut/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countOption != null) localVarQueryParams.Add("countOption", Configuration.ApiClient.ParameterToString(countOption)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStreamNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStreamNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStreamNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStreamNUTCountResult)));
            
        }

        /// <summary>
        /// Get new unread tiles count for given zone type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>Task of GetStreamNUTCountResult</returns>
        public async System.Threading.Tasks.Task<GetStreamNUTCountResult> GetStreamNUTCountAsync (string countOption)
        {
             ApiResponse<GetStreamNUTCountResult> localVarResponse = await GetStreamNUTCountAsyncWithHttpInfo(countOption);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new unread tiles count for given zone type 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countOption">(JSON object &lt;&lt;NewUnreadTilesCountOptionRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetStreamNUTCountResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStreamNUTCountResult>> GetStreamNUTCountAsyncWithHttpInfo (string countOption)
        {
            // verify the required parameter 'countOption' is set
            if (countOption == null)
                throw new ApiException(400, "Missing required parameter 'countOption' when calling StreamApi->GetStreamNUTCount");

            var localVarPath = "/stream/nut/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countOption != null) localVarQueryParams.Add("countOption", Configuration.ApiClient.ParameterToString(countOption)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStreamNUTCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStreamNUTCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStreamNUTCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStreamNUTCountResult)));
            
        }

        /// <summary>
        /// Get badge counts for given objectKey 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetTileCountsResult</returns>
        public GetTileCountsResult GetTileCounts (string key)
        {
             ApiResponse<GetTileCountsResult> localVarResponse = GetTileCountsWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get badge counts for given objectKey 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetTileCountsResult</returns>
        public ApiResponse< GetTileCountsResult > GetTileCountsWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetTileCounts");

            var localVarPath = "/stream/{key}/badgecounts/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTileCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTileCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTileCountsResult)));
            
        }

        /// <summary>
        /// Get badge counts for given objectKey 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetTileCountsResult</returns>
        public async System.Threading.Tasks.Task<GetTileCountsResult> GetTileCountsAsync (string key)
        {
             ApiResponse<GetTileCountsResult> localVarResponse = await GetTileCountsAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get badge counts for given objectKey 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetTileCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTileCountsResult>> GetTileCountsAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling StreamApi->GetTileCounts");

            var localVarPath = "/stream/{key}/badgecounts/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTileCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTileCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTileCountsResult)));
            
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>GetVutCountsResult</returns>
        public GetVutCountsResult GetVutCounts (string options, List<string> ruleKey)
        {
             ApiResponse<GetVutCountsResult> localVarResponse = GetVutCountsWithHttpInfo(options, ruleKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>ApiResponse of GetVutCountsResult</returns>
        public ApiResponse< GetVutCountsResult > GetVutCountsWithHttpInfo (string options, List<string> ruleKey)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetVutCounts");
            // verify the required parameter 'ruleKey' is set
            if (ruleKey == null)
                throw new ApiException(400, "Missing required parameter 'ruleKey' when calling StreamApi->GetVutCounts");

            var localVarPath = "/stream/vut/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (ruleKey != null) localVarQueryParams.Add("rule_key", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVutCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVutCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVutCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVutCountsResult)));
            
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of GetVutCountsResult</returns>
        public async System.Threading.Tasks.Task<GetVutCountsResult> GetVutCountsAsync (string options, List<string> ruleKey)
        {
             ApiResponse<GetVutCountsResult> localVarResponse = await GetVutCountsAsyncWithHttpInfo(options, ruleKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="ruleKey"></param>
        /// <returns>Task of ApiResponse (GetVutCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVutCountsResult>> GetVutCountsAsyncWithHttpInfo (string options, List<string> ruleKey)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetVutCounts");
            // verify the required parameter 'ruleKey' is set
            if (ruleKey == null)
                throw new ApiException(400, "Missing required parameter 'ruleKey' when calling StreamApi->GetVutCounts");

            var localVarPath = "/stream/vut/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (ruleKey != null) localVarQueryParams.Add("rule_key", Configuration.ApiClient.ParameterToString(ruleKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVutCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVutCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVutCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVutCountsResult)));
            
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>GetVutCountsV2Result</returns>
        public GetVutCountsV2Result GetVutCountsV2 (string options)
        {
             ApiResponse<GetVutCountsV2Result> localVarResponse = GetVutCountsV2WithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>ApiResponse of GetVutCountsV2Result</returns>
        public ApiResponse< GetVutCountsV2Result > GetVutCountsV2WithHttpInfo (string options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetVutCountsV2");

            var localVarPath = "/stream/vut/countv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVutCountsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVutCountsV2Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVutCountsV2Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVutCountsV2Result)));
            
        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>Task of GetVutCountsV2Result</returns>
        public async System.Threading.Tasks.Task<GetVutCountsV2Result> GetVutCountsV2Async (string options)
        {
             ApiResponse<GetVutCountsV2Result> localVarResponse = await GetVutCountsV2AsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This api returns the counts for a given rule for all 4 zones (activities/people/locations/search).search is the same as All. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord[]&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (GetVutCountsV2Result)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVutCountsV2Result>> GetVutCountsV2AsyncWithHttpInfo (string options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->GetVutCountsV2");

            var localVarPath = "/stream/vut/countv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVutCountsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVutCountsV2Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVutCountsV2Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVutCountsV2Result)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>SearchStreamKeyRankResult</returns>
        public SearchStreamKeyRankResult SearchStreamKeyRank (string options, string pg)
        {
             ApiResponse<SearchStreamKeyRankResult> localVarResponse = SearchStreamKeyRankWithHttpInfo(options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>ApiResponse of SearchStreamKeyRankResult</returns>
        public ApiResponse< SearchStreamKeyRankResult > SearchStreamKeyRankWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->SearchStreamKeyRank");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->SearchStreamKeyRank");

            var localVarPath = "/stream/search/keyrank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchStreamKeyRank", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchStreamKeyRankResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchStreamKeyRankResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchStreamKeyRankResult)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of SearchStreamKeyRankResult</returns>
        public async System.Threading.Tasks.Task<SearchStreamKeyRankResult> SearchStreamKeyRankAsync (string options, string pg)
        {
             ApiResponse<SearchStreamKeyRankResult> localVarResponse = await SearchStreamKeyRankAsyncWithHttpInfo(options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <returns>Task of ApiResponse (SearchStreamKeyRankResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchStreamKeyRankResult>> SearchStreamKeyRankAsyncWithHttpInfo (string options, string pg)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->SearchStreamKeyRank");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->SearchStreamKeyRank");

            var localVarPath = "/stream/search/keyrank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchStreamKeyRank", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchStreamKeyRankResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchStreamKeyRankResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchStreamKeyRankResult)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>SearchWallResult</returns>
        public SearchWallResult SearchWall (string options, string pg, string format = null)
        {
             ApiResponse<SearchWallResult> localVarResponse = SearchWallWithHttpInfo(options, pg, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of SearchWallResult</returns>
        public ApiResponse< SearchWallResult > SearchWallWithHttpInfo (string options, string pg, string format = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->SearchWall");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->SearchWall");

            var localVarPath = "/stream/search/wall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchWall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchWallResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchWallResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchWallResult)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of SearchWallResult</returns>
        public async System.Threading.Tasks.Task<SearchWallResult> SearchWallAsync (string options, string pg, string format = null)
        {
             ApiResponse<SearchWallResult> localVarResponse = await SearchWallAsyncWithHttpInfo(options, pg, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (SearchWallResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchWallResult>> SearchWallAsyncWithHttpInfo (string options, string pg, string format = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->SearchWall");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->SearchWall");

            var localVarPath = "/stream/search/wall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchWall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchWallResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchWallResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchWallResult)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>StreamSearchResult</returns>
        public StreamSearchResult StreamSearch (string options, string pg, string format = null)
        {
             ApiResponse<StreamSearchResult> localVarResponse = StreamSearchWithHttpInfo(options, pg, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of StreamSearchResult</returns>
        public ApiResponse< StreamSearchResult > StreamSearchWithHttpInfo (string options, string pg, string format = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->StreamSearch");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->StreamSearch");

            var localVarPath = "/stream/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSearchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSearchResult)));
            
        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of StreamSearchResult</returns>
        public async System.Threading.Tasks.Task<StreamSearchResult> StreamSearchAsync (string options, string pg, string format = null)
        {
             ApiResponse<StreamSearchResult> localVarResponse = await StreamSearchAsyncWithHttpInfo(options, pg, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets keys from a namespaced stream for a space 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (StreamSearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamSearchResult>> StreamSearchAsyncWithHttpInfo (string options, string pg, string format = null)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling StreamApi->StreamSearch");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling StreamApi->StreamSearch");

            var localVarPath = "/stream/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamSearchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamSearchResult)));
            
        }

    }
}
