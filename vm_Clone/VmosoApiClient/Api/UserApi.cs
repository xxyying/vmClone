/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a session belonging to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>DeleteSessionResult</returns>
        DeleteSessionResult DeleteSession (string index);

        /// <summary>
        /// Delete a session belonging to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>ApiResponse of DeleteSessionResult</returns>
        ApiResponse<DeleteSessionResult> DeleteSessionWithHttpInfo (string index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetFollowCountsResult</returns>
        GetFollowCountsResult GetFollowCounts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetFollowCountsResult</returns>
        ApiResponse<GetFollowCountsResult> GetFollowCountsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetInvitationsResult</returns>
        GetInvitationsResult GetInvitations (string creatorFilter = null, string state = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetInvitationsResult</returns>
        ApiResponse<GetInvitationsResult> GetInvitationsWithHttpInfo (string creatorFilter = null, string state = null, string pg = null);
        /// <summary>
        /// This API is used for NMA default home page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLandingPageResult</returns>
        GetLandingPageResult GetLandingPage ();

        /// <summary>
        /// This API is used for NMA default home page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLandingPageResult</returns>
        ApiResponse<GetLandingPageResult> GetLandingPageWithHttpInfo ();
        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMeResult</returns>
        GetMeResult GetMe ();

        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMeResult</returns>
        ApiResponse<GetMeResult> GetMeWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>GetMeMwaResult</returns>
        GetMeMwaResult GetMeMwa (string cid, string corpid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>ApiResponse of GetMeMwaResult</returns>
        ApiResponse<GetMeMwaResult> GetMeMwaWithHttpInfo (string cid, string corpid);
        /// <summary>
        /// Deletes suggested users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>GetRequestAndPendingUsersCountsResult</returns>
        GetRequestAndPendingUsersCountsResult GetRequestAndPendingUsersCounts (string mode = null);

        /// <summary>
        /// Deletes suggested users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>ApiResponse of GetRequestAndPendingUsersCountsResult</returns>
        ApiResponse<GetRequestAndPendingUsersCountsResult> GetRequestAndPendingUsersCountsWithHttpInfo (string mode = null);
        /// <summary>
        /// Get information of sessions belonging to a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSessionsResult</returns>
        GetSessionsResult GetSessions (string pg = null);

        /// <summary>
        /// Get information of sessions belonging to a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSessionsResult</returns>
        ApiResponse<GetSessionsResult> GetSessionsWithHttpInfo (string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSuggestFollowersCountsResult</returns>
        GetSuggestFollowersCountsResult GetSuggestFollowersCounts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSuggestFollowersCountsResult</returns>
        ApiResponse<GetSuggestFollowersCountsResult> GetSuggestFollowersCountsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSuggestedUsersCountsResult</returns>
        GetSuggestedUsersCountsResult GetSuggestedUsersCounts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSuggestedUsersCountsResult</returns>
        ApiResponse<GetSuggestedUsersCountsResult> GetSuggestedUsersCountsWithHttpInfo ();
        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>GetUserResult</returns>
        GetUserResult GetUser (string userKey);

        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of GetUserResult</returns>
        ApiResponse<GetUserResult> GetUserWithHttpInfo (string userKey);
        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>GetUserByEmailResult</returns>
        GetUserByEmailResult GetUserByEmail (string userName);

        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>ApiResponse of GetUserByEmailResult</returns>
        ApiResponse<GetUserByEmailResult> GetUserByEmailWithHttpInfo (string userName);
        /// <summary>
        /// Gets user status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>GetUserStatusResult</returns>
        GetUserStatusResult GetUserStatus (GetUserStatusInput input);

        /// <summary>
        /// Gets user status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>ApiResponse of GetUserStatusResult</returns>
        ApiResponse<GetUserStatusResult> GetUserStatusWithHttpInfo (GetUserStatusInput input);
        /// <summary>
        /// Gets users by keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>GetUsersResult</returns>
        GetUsersResult GetUsers (List<string> userkeys);

        /// <summary>
        /// Gets users by keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>ApiResponse of GetUsersResult</returns>
        ApiResponse<GetUsersResult> GetUsersWithHttpInfo (List<string> userkeys);
        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>GetUsersByEmailResult</returns>
        GetUsersByEmailResult GetUsersByEmail (GetUsersByEmailInput input);

        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>ApiResponse of GetUsersByEmailResult</returns>
        ApiResponse<GetUsersByEmailResult> GetUsersByEmailWithHttpInfo (GetUsersByEmailInput input);
        /// <summary>
        /// Login action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>LoginResult</returns>
        LoginResult Login (LoginInput input);

        /// <summary>
        /// Login action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>ApiResponse of LoginResult</returns>
        ApiResponse<LoginResult> LoginWithHttpInfo (LoginInput input);
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogoutResult</returns>
        LogoutResult Logout ();

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogoutResult</returns>
        ApiResponse<LogoutResult> LogoutWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>PasswordRulesResult</returns>
        PasswordRulesResult PasswordRules (string userKey = null, string username = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of PasswordRulesResult</returns>
        ApiResponse<PasswordRulesResult> PasswordRulesWithHttpInfo (string userKey = null, string username = null);
        /// <summary>
        /// Request password by user name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>RequestPasswordResult</returns>
        RequestPasswordResult RequestPassword (RequestPasswordInput input);

        /// <summary>
        /// Request password by user name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>ApiResponse of RequestPasswordResult</returns>
        ApiResponse<RequestPasswordResult> RequestPasswordWithHttpInfo (RequestPasswordInput input);
        /// <summary>
        /// Reset password action when password expire.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>ResetExpiredPasswordResult</returns>
        ResetExpiredPasswordResult ResetExpiredPassword (ResetExpiredPasswordInput input);

        /// <summary>
        /// Reset password action when password expire.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>ApiResponse of ResetExpiredPasswordResult</returns>
        ApiResponse<ResetExpiredPasswordResult> ResetExpiredPasswordWithHttpInfo (ResetExpiredPasswordInput input);
        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>ResetPasswordactionResult</returns>
        ResetPasswordactionResult ResetPasswordaction (ResetPasswordactionInput input);

        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>ApiResponse of ResetPasswordactionResult</returns>
        ApiResponse<ResetPasswordactionResult> ResetPasswordactionWithHttpInfo (ResetPasswordactionInput input);
        /// <summary>
        /// Reset password by sms code way no matter what is the userName.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>ResetPasswordactionPhoneResult</returns>
        ResetPasswordactionPhoneResult ResetPasswordactionPhone (ResetPasswordactionPhoneInput input);

        /// <summary>
        /// Reset password by sms code way no matter what is the userName.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>ApiResponse of ResetPasswordactionPhoneResult</returns>
        ApiResponse<ResetPasswordactionPhoneResult> ResetPasswordactionPhoneWithHttpInfo (ResetPasswordactionPhoneInput input);
        /// <summary>
        /// Send SMS code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>SendSmsCodeResult</returns>
        SendSmsCodeResult SendSmsCode (SendSmsCodeInput input);

        /// <summary>
        /// Send SMS code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>ApiResponse of SendSmsCodeResult</returns>
        ApiResponse<SendSmsCodeResult> SendSmsCodeWithHttpInfo (SendSmsCodeInput input);
        /// <summary>
        /// Set login user as public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>SetPublicResult</returns>
        SetPublicResult SetPublic (SetPublicInput input);

        /// <summary>
        /// Set login user as public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>ApiResponse of SetPublicResult</returns>
        ApiResponse<SetPublicResult> SetPublicWithHttpInfo (SetPublicInput input);
        /// <summary>
        /// user register action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>SignupResult</returns>
        SignupResult Signup (SignupInput input);

        /// <summary>
        /// user register action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>ApiResponse of SignupResult</returns>
        ApiResponse<SignupResult> SignupWithHttpInfo (SignupInput input);
        /// <summary>
        /// edit user passWord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>UpdatePasswordResult</returns>
        UpdatePasswordResult UpdatePassword (UpdatePasswordInput input);

        /// <summary>
        /// edit user passWord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>ApiResponse of UpdatePasswordResult</returns>
        ApiResponse<UpdatePasswordResult> UpdatePasswordWithHttpInfo (UpdatePasswordInput input);
        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>VmcRequestPasswordResult</returns>
        VmcRequestPasswordResult VmcRequestPassword (VmcRequestPasswordInput input);

        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>ApiResponse of VmcRequestPasswordResult</returns>
        ApiResponse<VmcRequestPasswordResult> VmcRequestPasswordWithHttpInfo (VmcRequestPasswordInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a session belonging to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>Task of DeleteSessionResult</returns>
        System.Threading.Tasks.Task<DeleteSessionResult> DeleteSessionAsync (string index);

        /// <summary>
        /// Delete a session belonging to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>Task of ApiResponse (DeleteSessionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSessionResult>> DeleteSessionAsyncWithHttpInfo (string index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetFollowCountsResult</returns>
        System.Threading.Tasks.Task<GetFollowCountsResult> GetFollowCountsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetFollowCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFollowCountsResult>> GetFollowCountsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetInvitationsResult</returns>
        System.Threading.Tasks.Task<GetInvitationsResult> GetInvitationsAsync (string creatorFilter = null, string state = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetInvitationsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvitationsResult>> GetInvitationsAsyncWithHttpInfo (string creatorFilter = null, string state = null, string pg = null);
        /// <summary>
        /// This API is used for NMA default home page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLandingPageResult</returns>
        System.Threading.Tasks.Task<GetLandingPageResult> GetLandingPageAsync ();

        /// <summary>
        /// This API is used for NMA default home page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLandingPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLandingPageResult>> GetLandingPageAsyncWithHttpInfo ();
        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMeResult</returns>
        System.Threading.Tasks.Task<GetMeResult> GetMeAsync ();

        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMeResult>> GetMeAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>Task of GetMeMwaResult</returns>
        System.Threading.Tasks.Task<GetMeMwaResult> GetMeMwaAsync (string cid, string corpid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>Task of ApiResponse (GetMeMwaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMeMwaResult>> GetMeMwaAsyncWithHttpInfo (string cid, string corpid);
        /// <summary>
        /// Deletes suggested users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of GetRequestAndPendingUsersCountsResult</returns>
        System.Threading.Tasks.Task<GetRequestAndPendingUsersCountsResult> GetRequestAndPendingUsersCountsAsync (string mode = null);

        /// <summary>
        /// Deletes suggested users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRequestAndPendingUsersCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRequestAndPendingUsersCountsResult>> GetRequestAndPendingUsersCountsAsyncWithHttpInfo (string mode = null);
        /// <summary>
        /// Get information of sessions belonging to a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSessionsResult</returns>
        System.Threading.Tasks.Task<GetSessionsResult> GetSessionsAsync (string pg = null);

        /// <summary>
        /// Get information of sessions belonging to a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSessionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSessionsResult>> GetSessionsAsyncWithHttpInfo (string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSuggestFollowersCountsResult</returns>
        System.Threading.Tasks.Task<GetSuggestFollowersCountsResult> GetSuggestFollowersCountsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSuggestFollowersCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSuggestFollowersCountsResult>> GetSuggestFollowersCountsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSuggestedUsersCountsResult</returns>
        System.Threading.Tasks.Task<GetSuggestedUsersCountsResult> GetSuggestedUsersCountsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSuggestedUsersCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSuggestedUsersCountsResult>> GetSuggestedUsersCountsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>Task of GetUserResult</returns>
        System.Threading.Tasks.Task<GetUserResult> GetUserAsync (string userKey);

        /// <summary>
        /// Gets user display record for given user key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (GetUserResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserResult>> GetUserAsyncWithHttpInfo (string userKey);
        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>Task of GetUserByEmailResult</returns>
        System.Threading.Tasks.Task<GetUserByEmailResult> GetUserByEmailAsync (string userName);

        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>Task of ApiResponse (GetUserByEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserByEmailResult>> GetUserByEmailAsyncWithHttpInfo (string userName);
        /// <summary>
        /// Gets user status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>Task of GetUserStatusResult</returns>
        System.Threading.Tasks.Task<GetUserStatusResult> GetUserStatusAsync (GetUserStatusInput input);

        /// <summary>
        /// Gets user status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>Task of ApiResponse (GetUserStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserStatusResult>> GetUserStatusAsyncWithHttpInfo (GetUserStatusInput input);
        /// <summary>
        /// Gets users by keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>Task of GetUsersResult</returns>
        System.Threading.Tasks.Task<GetUsersResult> GetUsersAsync (List<string> userkeys);

        /// <summary>
        /// Gets users by keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>Task of ApiResponse (GetUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersResult>> GetUsersAsyncWithHttpInfo (List<string> userkeys);
        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>Task of GetUsersByEmailResult</returns>
        System.Threading.Tasks.Task<GetUsersByEmailResult> GetUsersByEmailAsync (GetUsersByEmailInput input);

        /// <summary>
        /// get User Display Record by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>Task of ApiResponse (GetUsersByEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersByEmailResult>> GetUsersByEmailAsyncWithHttpInfo (GetUsersByEmailInput input);
        /// <summary>
        /// Login action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>Task of LoginResult</returns>
        System.Threading.Tasks.Task<LoginResult> LoginAsync (LoginInput input);

        /// <summary>
        /// Login action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>Task of ApiResponse (LoginResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResult>> LoginAsyncWithHttpInfo (LoginInput input);
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LogoutResult</returns>
        System.Threading.Tasks.Task<LogoutResult> LogoutAsync ();

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LogoutResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutResult>> LogoutAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of PasswordRulesResult</returns>
        System.Threading.Tasks.Task<PasswordRulesResult> PasswordRulesAsync (string userKey = null, string username = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of ApiResponse (PasswordRulesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PasswordRulesResult>> PasswordRulesAsyncWithHttpInfo (string userKey = null, string username = null);
        /// <summary>
        /// Request password by user name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>Task of RequestPasswordResult</returns>
        System.Threading.Tasks.Task<RequestPasswordResult> RequestPasswordAsync (RequestPasswordInput input);

        /// <summary>
        /// Request password by user name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>Task of ApiResponse (RequestPasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestPasswordResult>> RequestPasswordAsyncWithHttpInfo (RequestPasswordInput input);
        /// <summary>
        /// Reset password action when password expire.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>Task of ResetExpiredPasswordResult</returns>
        System.Threading.Tasks.Task<ResetExpiredPasswordResult> ResetExpiredPasswordAsync (ResetExpiredPasswordInput input);

        /// <summary>
        /// Reset password action when password expire.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>Task of ApiResponse (ResetExpiredPasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetExpiredPasswordResult>> ResetExpiredPasswordAsyncWithHttpInfo (ResetExpiredPasswordInput input);
        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>Task of ResetPasswordactionResult</returns>
        System.Threading.Tasks.Task<ResetPasswordactionResult> ResetPasswordactionAsync (ResetPasswordactionInput input);

        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>Task of ApiResponse (ResetPasswordactionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetPasswordactionResult>> ResetPasswordactionAsyncWithHttpInfo (ResetPasswordactionInput input);
        /// <summary>
        /// Reset password by sms code way no matter what is the userName.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>Task of ResetPasswordactionPhoneResult</returns>
        System.Threading.Tasks.Task<ResetPasswordactionPhoneResult> ResetPasswordactionPhoneAsync (ResetPasswordactionPhoneInput input);

        /// <summary>
        /// Reset password by sms code way no matter what is the userName.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>Task of ApiResponse (ResetPasswordactionPhoneResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetPasswordactionPhoneResult>> ResetPasswordactionPhoneAsyncWithHttpInfo (ResetPasswordactionPhoneInput input);
        /// <summary>
        /// Send SMS code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>Task of SendSmsCodeResult</returns>
        System.Threading.Tasks.Task<SendSmsCodeResult> SendSmsCodeAsync (SendSmsCodeInput input);

        /// <summary>
        /// Send SMS code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>Task of ApiResponse (SendSmsCodeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendSmsCodeResult>> SendSmsCodeAsyncWithHttpInfo (SendSmsCodeInput input);
        /// <summary>
        /// Set login user as public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>Task of SetPublicResult</returns>
        System.Threading.Tasks.Task<SetPublicResult> SetPublicAsync (SetPublicInput input);

        /// <summary>
        /// Set login user as public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>Task of ApiResponse (SetPublicResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPublicResult>> SetPublicAsyncWithHttpInfo (SetPublicInput input);
        /// <summary>
        /// user register action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>Task of SignupResult</returns>
        System.Threading.Tasks.Task<SignupResult> SignupAsync (SignupInput input);

        /// <summary>
        /// user register action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>Task of ApiResponse (SignupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignupResult>> SignupAsyncWithHttpInfo (SignupInput input);
        /// <summary>
        /// edit user passWord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>Task of UpdatePasswordResult</returns>
        System.Threading.Tasks.Task<UpdatePasswordResult> UpdatePasswordAsync (UpdatePasswordInput input);

        /// <summary>
        /// edit user passWord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>Task of ApiResponse (UpdatePasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePasswordResult>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInput input);
        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>Task of VmcRequestPasswordResult</returns>
        System.Threading.Tasks.Task<VmcRequestPasswordResult> VmcRequestPasswordAsync (VmcRequestPasswordInput input);

        /// <summary>
        /// Reset password via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>Task of ApiResponse (VmcRequestPasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VmcRequestPasswordResult>> VmcRequestPasswordAsyncWithHttpInfo (VmcRequestPasswordInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public UserApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a session belonging to the user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>DeleteSessionResult</returns>
        public DeleteSessionResult DeleteSession (string index)
        {
             ApiResponse<DeleteSessionResult> localVarResponse = DeleteSessionWithHttpInfo(index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a session belonging to the user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>ApiResponse of DeleteSessionResult</returns>
        public ApiResponse< DeleteSessionResult > DeleteSessionWithHttpInfo (string index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling UserApi->DeleteSession");

            var localVarPath = "/sessions/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSessionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSessionResult)));
            
        }

        /// <summary>
        /// Delete a session belonging to the user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>Task of DeleteSessionResult</returns>
        public async System.Threading.Tasks.Task<DeleteSessionResult> DeleteSessionAsync (string index)
        {
             ApiResponse<DeleteSessionResult> localVarResponse = await DeleteSessionAsyncWithHttpInfo(index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a session belonging to the user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">From {@link SessionInfoRecord::$index}.</param>
        /// <returns>Task of ApiResponse (DeleteSessionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteSessionResult>> DeleteSessionAsyncWithHttpInfo (string index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling UserApi->DeleteSession");

            var localVarPath = "/sessions/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSessionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSessionResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetFollowCountsResult</returns>
        public GetFollowCountsResult GetFollowCounts ()
        {
             ApiResponse<GetFollowCountsResult> localVarResponse = GetFollowCountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetFollowCountsResult</returns>
        public ApiResponse< GetFollowCountsResult > GetFollowCountsWithHttpInfo ()
        {

            var localVarPath = "/followingAndFollowedUsers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFollowCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetFollowCountsResult</returns>
        public async System.Threading.Tasks.Task<GetFollowCountsResult> GetFollowCountsAsync ()
        {
             ApiResponse<GetFollowCountsResult> localVarResponse = await GetFollowCountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetFollowCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFollowCountsResult>> GetFollowCountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/followingAndFollowedUsers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFollowCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetInvitationsResult</returns>
        public GetInvitationsResult GetInvitations (string creatorFilter = null, string state = null, string pg = null)
        {
             ApiResponse<GetInvitationsResult> localVarResponse = GetInvitationsWithHttpInfo(creatorFilter, state, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetInvitationsResult</returns>
        public ApiResponse< GetInvitationsResult > GetInvitationsWithHttpInfo (string creatorFilter = null, string state = null, string pg = null)
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (creatorFilter != null) localVarQueryParams.Add("creatorFilter", Configuration.ApiClient.ParameterToString(creatorFilter)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvitationsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvitationsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvitationsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetInvitationsResult</returns>
        public async System.Threading.Tasks.Task<GetInvitationsResult> GetInvitationsAsync (string creatorFilter = null, string state = null, string pg = null)
        {
             ApiResponse<GetInvitationsResult> localVarResponse = await GetInvitationsAsyncWithHttpInfo(creatorFilter, state, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorFilter"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetInvitationsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInvitationsResult>> GetInvitationsAsyncWithHttpInfo (string creatorFilter = null, string state = null, string pg = null)
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (creatorFilter != null) localVarQueryParams.Add("creatorFilter", Configuration.ApiClient.ParameterToString(creatorFilter)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvitationsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvitationsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvitationsResult)));
            
        }

        /// <summary>
        /// This API is used for NMA default home page. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLandingPageResult</returns>
        public GetLandingPageResult GetLandingPage ()
        {
             ApiResponse<GetLandingPageResult> localVarResponse = GetLandingPageWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is used for NMA default home page. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLandingPageResult</returns>
        public ApiResponse< GetLandingPageResult > GetLandingPageWithHttpInfo ()
        {

            var localVarPath = "/landingPage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLandingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLandingPageResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLandingPageResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLandingPageResult)));
            
        }

        /// <summary>
        /// This API is used for NMA default home page. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLandingPageResult</returns>
        public async System.Threading.Tasks.Task<GetLandingPageResult> GetLandingPageAsync ()
        {
             ApiResponse<GetLandingPageResult> localVarResponse = await GetLandingPageAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is used for NMA default home page. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLandingPageResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLandingPageResult>> GetLandingPageAsyncWithHttpInfo ()
        {

            var localVarPath = "/landingPage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLandingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLandingPageResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLandingPageResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLandingPageResult)));
            
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMeResult</returns>
        public GetMeResult GetMe ()
        {
             ApiResponse<GetMeResult> localVarResponse = GetMeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMeResult</returns>
        public ApiResponse< GetMeResult > GetMeWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMeResult)));
            
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMeResult</returns>
        public async System.Threading.Tasks.Task<GetMeResult> GetMeAsync ()
        {
             ApiResponse<GetMeResult> localVarResponse = await GetMeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMeResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMeResult>> GetMeAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMeResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>GetMeMwaResult</returns>
        public GetMeMwaResult GetMeMwa (string cid, string corpid)
        {
             ApiResponse<GetMeMwaResult> localVarResponse = GetMeMwaWithHttpInfo(cid, corpid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>ApiResponse of GetMeMwaResult</returns>
        public ApiResponse< GetMeMwaResult > GetMeMwaWithHttpInfo (string cid, string corpid)
        {
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling UserApi->GetMeMwa");
            // verify the required parameter 'corpid' is set
            if (corpid == null)
                throw new ApiException(400, "Missing required parameter 'corpid' when calling UserApi->GetMeMwa");

            var localVarPath = "/users/me/mwa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cid != null) localVarQueryParams.Add("cid", Configuration.ApiClient.ParameterToString(cid)); // query parameter
            if (corpid != null) localVarQueryParams.Add("corpid", Configuration.ApiClient.ParameterToString(corpid)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeMwa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMeMwaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMeMwaResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMeMwaResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>Task of GetMeMwaResult</returns>
        public async System.Threading.Tasks.Task<GetMeMwaResult> GetMeMwaAsync (string cid, string corpid)
        {
             ApiResponse<GetMeMwaResult> localVarResponse = await GetMeMwaAsyncWithHttpInfo(cid, corpid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid"></param>
        /// <param name="corpid"></param>
        /// <returns>Task of ApiResponse (GetMeMwaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMeMwaResult>> GetMeMwaAsyncWithHttpInfo (string cid, string corpid)
        {
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling UserApi->GetMeMwa");
            // verify the required parameter 'corpid' is set
            if (corpid == null)
                throw new ApiException(400, "Missing required parameter 'corpid' when calling UserApi->GetMeMwa");

            var localVarPath = "/users/me/mwa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cid != null) localVarQueryParams.Add("cid", Configuration.ApiClient.ParameterToString(cid)); // query parameter
            if (corpid != null) localVarQueryParams.Add("corpid", Configuration.ApiClient.ParameterToString(corpid)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeMwa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMeMwaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMeMwaResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMeMwaResult)));
            
        }

        /// <summary>
        /// Deletes suggested users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>GetRequestAndPendingUsersCountsResult</returns>
        public GetRequestAndPendingUsersCountsResult GetRequestAndPendingUsersCounts (string mode = null)
        {
             ApiResponse<GetRequestAndPendingUsersCountsResult> localVarResponse = GetRequestAndPendingUsersCountsWithHttpInfo(mode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes suggested users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>ApiResponse of GetRequestAndPendingUsersCountsResult</returns>
        public ApiResponse< GetRequestAndPendingUsersCountsResult > GetRequestAndPendingUsersCountsWithHttpInfo (string mode = null)
        {

            var localVarPath = "/requestandpendingusers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestAndPendingUsersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRequestAndPendingUsersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRequestAndPendingUsersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRequestAndPendingUsersCountsResult)));
            
        }

        /// <summary>
        /// Deletes suggested users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of GetRequestAndPendingUsersCountsResult</returns>
        public async System.Threading.Tasks.Task<GetRequestAndPendingUsersCountsResult> GetRequestAndPendingUsersCountsAsync (string mode = null)
        {
             ApiResponse<GetRequestAndPendingUsersCountsResult> localVarResponse = await GetRequestAndPendingUsersCountsAsyncWithHttpInfo(mode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes suggested users 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of ApiResponse (GetRequestAndPendingUsersCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRequestAndPendingUsersCountsResult>> GetRequestAndPendingUsersCountsAsyncWithHttpInfo (string mode = null)
        {

            var localVarPath = "/requestandpendingusers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestAndPendingUsersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRequestAndPendingUsersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRequestAndPendingUsersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRequestAndPendingUsersCountsResult)));
            
        }

        /// <summary>
        /// Get information of sessions belonging to a user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSessionsResult</returns>
        public GetSessionsResult GetSessions (string pg = null)
        {
             ApiResponse<GetSessionsResult> localVarResponse = GetSessionsWithHttpInfo(pg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information of sessions belonging to a user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSessionsResult</returns>
        public ApiResponse< GetSessionsResult > GetSessionsWithHttpInfo (string pg = null)
        {

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSessionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionsResult)));
            
        }

        /// <summary>
        /// Get information of sessions belonging to a user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSessionsResult</returns>
        public async System.Threading.Tasks.Task<GetSessionsResult> GetSessionsAsync (string pg = null)
        {
             ApiResponse<GetSessionsResult> localVarResponse = await GetSessionsAsyncWithHttpInfo(pg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information of sessions belonging to a user. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Pagination.(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSessionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSessionsResult>> GetSessionsAsyncWithHttpInfo (string pg = null)
        {

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSessionsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSuggestFollowersCountsResult</returns>
        public GetSuggestFollowersCountsResult GetSuggestFollowersCounts ()
        {
             ApiResponse<GetSuggestFollowersCountsResult> localVarResponse = GetSuggestFollowersCountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSuggestFollowersCountsResult</returns>
        public ApiResponse< GetSuggestFollowersCountsResult > GetSuggestFollowersCountsWithHttpInfo ()
        {

            var localVarPath = "/suggestfollowers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestFollowersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSuggestFollowersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSuggestFollowersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSuggestFollowersCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSuggestFollowersCountsResult</returns>
        public async System.Threading.Tasks.Task<GetSuggestFollowersCountsResult> GetSuggestFollowersCountsAsync ()
        {
             ApiResponse<GetSuggestFollowersCountsResult> localVarResponse = await GetSuggestFollowersCountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSuggestFollowersCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSuggestFollowersCountsResult>> GetSuggestFollowersCountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/suggestfollowers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestFollowersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSuggestFollowersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSuggestFollowersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSuggestFollowersCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSuggestedUsersCountsResult</returns>
        public GetSuggestedUsersCountsResult GetSuggestedUsersCounts ()
        {
             ApiResponse<GetSuggestedUsersCountsResult> localVarResponse = GetSuggestedUsersCountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSuggestedUsersCountsResult</returns>
        public ApiResponse< GetSuggestedUsersCountsResult > GetSuggestedUsersCountsWithHttpInfo ()
        {

            var localVarPath = "/suggestusers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedUsersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSuggestedUsersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSuggestedUsersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSuggestedUsersCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSuggestedUsersCountsResult</returns>
        public async System.Threading.Tasks.Task<GetSuggestedUsersCountsResult> GetSuggestedUsersCountsAsync ()
        {
             ApiResponse<GetSuggestedUsersCountsResult> localVarResponse = await GetSuggestedUsersCountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSuggestedUsersCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSuggestedUsersCountsResult>> GetSuggestedUsersCountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/suggestusers/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedUsersCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSuggestedUsersCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSuggestedUsersCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSuggestedUsersCountsResult)));
            
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>GetUserResult</returns>
        public GetUserResult GetUser (string userKey)
        {
             ApiResponse<GetUserResult> localVarResponse = GetUserWithHttpInfo(userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>ApiResponse of GetUserResult</returns>
        public ApiResponse< GetUserResult > GetUserWithHttpInfo (string userKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserApi->GetUser");

            var localVarPath = "/users/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserResult)));
            
        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>Task of GetUserResult</returns>
        public async System.Threading.Tasks.Task<GetUserResult> GetUserAsync (string userKey)
        {
             ApiResponse<GetUserResult> localVarResponse = await GetUserAsyncWithHttpInfo(userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets user display record for given user key 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <returns>Task of ApiResponse (GetUserResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserResult>> GetUserAsyncWithHttpInfo (string userKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserApi->GetUser");

            var localVarPath = "/users/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarPathParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserResult)));
            
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>GetUserByEmailResult</returns>
        public GetUserByEmailResult GetUserByEmail (string userName)
        {
             ApiResponse<GetUserByEmailResult> localVarResponse = GetUserByEmailWithHttpInfo(userName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>ApiResponse of GetUserByEmailResult</returns>
        public ApiResponse< GetUserByEmailResult > GetUserByEmailWithHttpInfo (string userName)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling UserApi->GetUserByEmail");

            var localVarPath = "/users/lookupByEmail/{userName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userName != null) localVarPathParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserByEmailResult)));
            
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>Task of GetUserByEmailResult</returns>
        public async System.Threading.Tasks.Task<GetUserByEmailResult> GetUserByEmailAsync (string userName)
        {
             ApiResponse<GetUserByEmailResult> localVarResponse = await GetUserByEmailAsyncWithHttpInfo(userName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"></param>
        /// <returns>Task of ApiResponse (GetUserByEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserByEmailResult>> GetUserByEmailAsyncWithHttpInfo (string userName)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling UserApi->GetUserByEmail");

            var localVarPath = "/users/lookupByEmail/{userName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userName != null) localVarPathParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserByEmailResult)));
            
        }

        /// <summary>
        /// Gets user status 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>GetUserStatusResult</returns>
        public GetUserStatusResult GetUserStatus (GetUserStatusInput input)
        {
             ApiResponse<GetUserStatusResult> localVarResponse = GetUserStatusWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets user status 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>ApiResponse of GetUserStatusResult</returns>
        public ApiResponse< GetUserStatusResult > GetUserStatusWithHttpInfo (GetUserStatusInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->GetUserStatus");

            var localVarPath = "/users/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserStatusResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserStatusResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserStatusResult)));
            
        }

        /// <summary>
        /// Gets user status 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>Task of GetUserStatusResult</returns>
        public async System.Threading.Tasks.Task<GetUserStatusResult> GetUserStatusAsync (GetUserStatusInput input)
        {
             ApiResponse<GetUserStatusResult> localVarResponse = await GetUserStatusAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets user status 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUserStatus Input</param>
        /// <returns>Task of ApiResponse (GetUserStatusResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserStatusResult>> GetUserStatusAsyncWithHttpInfo (GetUserStatusInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->GetUserStatus");

            var localVarPath = "/users/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserStatusResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserStatusResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserStatusResult)));
            
        }

        /// <summary>
        /// Gets users by keys 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>GetUsersResult</returns>
        public GetUsersResult GetUsers (List<string> userkeys)
        {
             ApiResponse<GetUsersResult> localVarResponse = GetUsersWithHttpInfo(userkeys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users by keys 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>ApiResponse of GetUsersResult</returns>
        public ApiResponse< GetUsersResult > GetUsersWithHttpInfo (List<string> userkeys)
        {
            // verify the required parameter 'userkeys' is set
            if (userkeys == null)
                throw new ApiException(400, "Missing required parameter 'userkeys' when calling UserApi->GetUsers");

            var localVarPath = "/users/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userkeys != null) localVarQueryParams.Add("userkeys", Configuration.ApiClient.ParameterToString(userkeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersResult)));
            
        }

        /// <summary>
        /// Gets users by keys 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>Task of GetUsersResult</returns>
        public async System.Threading.Tasks.Task<GetUsersResult> GetUsersAsync (List<string> userkeys)
        {
             ApiResponse<GetUsersResult> localVarResponse = await GetUsersAsyncWithHttpInfo(userkeys);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets users by keys 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userkeys"></param>
        /// <returns>Task of ApiResponse (GetUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersResult>> GetUsersAsyncWithHttpInfo (List<string> userkeys)
        {
            // verify the required parameter 'userkeys' is set
            if (userkeys == null)
                throw new ApiException(400, "Missing required parameter 'userkeys' when calling UserApi->GetUsers");

            var localVarPath = "/users/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userkeys != null) localVarQueryParams.Add("userkeys", Configuration.ApiClient.ParameterToString(userkeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersResult)));
            
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>GetUsersByEmailResult</returns>
        public GetUsersByEmailResult GetUsersByEmail (GetUsersByEmailInput input)
        {
             ApiResponse<GetUsersByEmailResult> localVarResponse = GetUsersByEmailWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>ApiResponse of GetUsersByEmailResult</returns>
        public ApiResponse< GetUsersByEmailResult > GetUsersByEmailWithHttpInfo (GetUsersByEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->GetUsersByEmail");

            var localVarPath = "/users/lookupByEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersByEmailResult)));
            
        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>Task of GetUsersByEmailResult</returns>
        public async System.Threading.Tasks.Task<GetUsersByEmailResult> GetUsersByEmailAsync (GetUsersByEmailInput input)
        {
             ApiResponse<GetUsersByEmailResult> localVarResponse = await GetUsersByEmailAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get User Display Record by email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">GetUsersByEmail Input</param>
        /// <returns>Task of ApiResponse (GetUsersByEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersByEmailResult>> GetUsersByEmailAsyncWithHttpInfo (GetUsersByEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->GetUsersByEmail");

            var localVarPath = "/users/lookupByEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersByEmailResult)));
            
        }

        /// <summary>
        /// Login action. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>LoginResult</returns>
        public LoginResult Login (LoginInput input)
        {
             ApiResponse<LoginResult> localVarResponse = LoginWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login action. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>ApiResponse of LoginResult</returns>
        public ApiResponse< LoginResult > LoginWithHttpInfo (LoginInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoginResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResult)));
            
        }

        /// <summary>
        /// Login action. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>Task of LoginResult</returns>
        public async System.Threading.Tasks.Task<LoginResult> LoginAsync (LoginInput input)
        {
             ApiResponse<LoginResult> localVarResponse = await LoginAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login action. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Login Input</param>
        /// <returns>Task of ApiResponse (LoginResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoginResult>> LoginAsyncWithHttpInfo (LoginInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoginResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResult)));
            
        }

        /// <summary>
        /// Logout 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogoutResult</returns>
        public LogoutResult Logout ()
        {
             ApiResponse<LogoutResult> localVarResponse = LogoutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogoutResult</returns>
        public ApiResponse< LogoutResult > LogoutWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogoutResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResult)));
            
        }

        /// <summary>
        /// Logout 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LogoutResult</returns>
        public async System.Threading.Tasks.Task<LogoutResult> LogoutAsync ()
        {
             ApiResponse<LogoutResult> localVarResponse = await LogoutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LogoutResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogoutResult>> LogoutAsyncWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogoutResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>PasswordRulesResult</returns>
        public PasswordRulesResult PasswordRules (string userKey = null, string username = null)
        {
             ApiResponse<PasswordRulesResult> localVarResponse = PasswordRulesWithHttpInfo(userKey, username);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of PasswordRulesResult</returns>
        public ApiResponse< PasswordRulesResult > PasswordRulesWithHttpInfo (string userKey = null, string username = null)
        {

            var localVarPath = "/pwd/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (username != null) localVarQueryParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PasswordRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PasswordRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PasswordRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PasswordRulesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of PasswordRulesResult</returns>
        public async System.Threading.Tasks.Task<PasswordRulesResult> PasswordRulesAsync (string userKey = null, string username = null)
        {
             ApiResponse<PasswordRulesResult> localVarResponse = await PasswordRulesAsyncWithHttpInfo(userKey, username);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of ApiResponse (PasswordRulesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PasswordRulesResult>> PasswordRulesAsyncWithHttpInfo (string userKey = null, string username = null)
        {

            var localVarPath = "/pwd/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (username != null) localVarQueryParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PasswordRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PasswordRulesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PasswordRulesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PasswordRulesResult)));
            
        }

        /// <summary>
        /// Request password by user name. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>RequestPasswordResult</returns>
        public RequestPasswordResult RequestPassword (RequestPasswordInput input)
        {
             ApiResponse<RequestPasswordResult> localVarResponse = RequestPasswordWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request password by user name. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>ApiResponse of RequestPasswordResult</returns>
        public ApiResponse< RequestPasswordResult > RequestPasswordWithHttpInfo (RequestPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->RequestPassword");

            var localVarPath = "/requestpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestPasswordResult)));
            
        }

        /// <summary>
        /// Request password by user name. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>Task of RequestPasswordResult</returns>
        public async System.Threading.Tasks.Task<RequestPasswordResult> RequestPasswordAsync (RequestPasswordInput input)
        {
             ApiResponse<RequestPasswordResult> localVarResponse = await RequestPasswordAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request password by user name. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RequestPassword Input</param>
        /// <returns>Task of ApiResponse (RequestPasswordResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestPasswordResult>> RequestPasswordAsyncWithHttpInfo (RequestPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->RequestPassword");

            var localVarPath = "/requestpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestPasswordResult)));
            
        }

        /// <summary>
        /// Reset password action when password expire. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>ResetExpiredPasswordResult</returns>
        public ResetExpiredPasswordResult ResetExpiredPassword (ResetExpiredPasswordInput input)
        {
             ApiResponse<ResetExpiredPasswordResult> localVarResponse = ResetExpiredPasswordWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password action when password expire. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>ApiResponse of ResetExpiredPasswordResult</returns>
        public ApiResponse< ResetExpiredPasswordResult > ResetExpiredPasswordWithHttpInfo (ResetExpiredPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetExpiredPassword");

            var localVarPath = "/resetExpiredPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetExpiredPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetExpiredPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetExpiredPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetExpiredPasswordResult)));
            
        }

        /// <summary>
        /// Reset password action when password expire. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>Task of ResetExpiredPasswordResult</returns>
        public async System.Threading.Tasks.Task<ResetExpiredPasswordResult> ResetExpiredPasswordAsync (ResetExpiredPasswordInput input)
        {
             ApiResponse<ResetExpiredPasswordResult> localVarResponse = await ResetExpiredPasswordAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password action when password expire. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetExpiredPassword Input</param>
        /// <returns>Task of ApiResponse (ResetExpiredPasswordResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResetExpiredPasswordResult>> ResetExpiredPasswordAsyncWithHttpInfo (ResetExpiredPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetExpiredPassword");

            var localVarPath = "/resetExpiredPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetExpiredPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetExpiredPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetExpiredPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetExpiredPasswordResult)));
            
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>ResetPasswordactionResult</returns>
        public ResetPasswordactionResult ResetPasswordaction (ResetPasswordactionInput input)
        {
             ApiResponse<ResetPasswordactionResult> localVarResponse = ResetPasswordactionWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>ApiResponse of ResetPasswordactionResult</returns>
        public ApiResponse< ResetPasswordactionResult > ResetPasswordactionWithHttpInfo (ResetPasswordactionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetPasswordaction");

            var localVarPath = "/resetpasswordaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPasswordactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetPasswordactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPasswordactionResult)));
            
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>Task of ResetPasswordactionResult</returns>
        public async System.Threading.Tasks.Task<ResetPasswordactionResult> ResetPasswordactionAsync (ResetPasswordactionInput input)
        {
             ApiResponse<ResetPasswordactionResult> localVarResponse = await ResetPasswordactionAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordaction Input</param>
        /// <returns>Task of ApiResponse (ResetPasswordactionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResetPasswordactionResult>> ResetPasswordactionAsyncWithHttpInfo (ResetPasswordactionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetPasswordaction");

            var localVarPath = "/resetpasswordaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPasswordactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetPasswordactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPasswordactionResult)));
            
        }

        /// <summary>
        /// Reset password by sms code way no matter what is the userName. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>ResetPasswordactionPhoneResult</returns>
        public ResetPasswordactionPhoneResult ResetPasswordactionPhone (ResetPasswordactionPhoneInput input)
        {
             ApiResponse<ResetPasswordactionPhoneResult> localVarResponse = ResetPasswordactionPhoneWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password by sms code way no matter what is the userName. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>ApiResponse of ResetPasswordactionPhoneResult</returns>
        public ApiResponse< ResetPasswordactionPhoneResult > ResetPasswordactionPhoneWithHttpInfo (ResetPasswordactionPhoneInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetPasswordactionPhone");

            var localVarPath = "/resetpasswordaction/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordactionPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPasswordactionPhoneResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetPasswordactionPhoneResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPasswordactionPhoneResult)));
            
        }

        /// <summary>
        /// Reset password by sms code way no matter what is the userName. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>Task of ResetPasswordactionPhoneResult</returns>
        public async System.Threading.Tasks.Task<ResetPasswordactionPhoneResult> ResetPasswordactionPhoneAsync (ResetPasswordactionPhoneInput input)
        {
             ApiResponse<ResetPasswordactionPhoneResult> localVarResponse = await ResetPasswordactionPhoneAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password by sms code way no matter what is the userName. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ResetPasswordactionPhone Input</param>
        /// <returns>Task of ApiResponse (ResetPasswordactionPhoneResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResetPasswordactionPhoneResult>> ResetPasswordactionPhoneAsyncWithHttpInfo (ResetPasswordactionPhoneInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->ResetPasswordactionPhone");

            var localVarPath = "/resetpasswordaction/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordactionPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPasswordactionPhoneResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResetPasswordactionPhoneResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPasswordactionPhoneResult)));
            
        }

        /// <summary>
        /// Send SMS code. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>SendSmsCodeResult</returns>
        public SendSmsCodeResult SendSmsCode (SendSmsCodeInput input)
        {
             ApiResponse<SendSmsCodeResult> localVarResponse = SendSmsCodeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS code. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>ApiResponse of SendSmsCodeResult</returns>
        public ApiResponse< SendSmsCodeResult > SendSmsCodeWithHttpInfo (SendSmsCodeInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->SendSmsCode");

            var localVarPath = "/smscode/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendSmsCodeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendSmsCodeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendSmsCodeResult)));
            
        }

        /// <summary>
        /// Send SMS code. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>Task of SendSmsCodeResult</returns>
        public async System.Threading.Tasks.Task<SendSmsCodeResult> SendSmsCodeAsync (SendSmsCodeInput input)
        {
             ApiResponse<SendSmsCodeResult> localVarResponse = await SendSmsCodeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS code. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SendSmsCode Input</param>
        /// <returns>Task of ApiResponse (SendSmsCodeResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendSmsCodeResult>> SendSmsCodeAsyncWithHttpInfo (SendSmsCodeInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->SendSmsCode");

            var localVarPath = "/smscode/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendSmsCodeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendSmsCodeResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendSmsCodeResult)));
            
        }

        /// <summary>
        /// Set login user as public 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>SetPublicResult</returns>
        public SetPublicResult SetPublic (SetPublicInput input)
        {
             ApiResponse<SetPublicResult> localVarResponse = SetPublicWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set login user as public 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>ApiResponse of SetPublicResult</returns>
        public ApiResponse< SetPublicResult > SetPublicWithHttpInfo (SetPublicInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->SetPublic");

            var localVarPath = "/user/public/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPublic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPublicResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPublicResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPublicResult)));
            
        }

        /// <summary>
        /// Set login user as public 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>Task of SetPublicResult</returns>
        public async System.Threading.Tasks.Task<SetPublicResult> SetPublicAsync (SetPublicInput input)
        {
             ApiResponse<SetPublicResult> localVarResponse = await SetPublicAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set login user as public 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SetPublic Input</param>
        /// <returns>Task of ApiResponse (SetPublicResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetPublicResult>> SetPublicAsyncWithHttpInfo (SetPublicInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->SetPublic");

            var localVarPath = "/user/public/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPublic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPublicResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPublicResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPublicResult)));
            
        }

        /// <summary>
        /// user register action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>SignupResult</returns>
        public SignupResult Signup (SignupInput input)
        {
             ApiResponse<SignupResult> localVarResponse = SignupWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// user register action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>ApiResponse of SignupResult</returns>
        public ApiResponse< SignupResult > SignupWithHttpInfo (SignupInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->Signup");

            var localVarPath = "/signUpAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Signup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignupResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignupResult)));
            
        }

        /// <summary>
        /// user register action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>Task of SignupResult</returns>
        public async System.Threading.Tasks.Task<SignupResult> SignupAsync (SignupInput input)
        {
             ApiResponse<SignupResult> localVarResponse = await SignupAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// user register action 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Signup Input</param>
        /// <returns>Task of ApiResponse (SignupResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignupResult>> SignupAsyncWithHttpInfo (SignupInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->Signup");

            var localVarPath = "/signUpAction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Signup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignupResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignupResult)));
            
        }

        /// <summary>
        /// edit user passWord 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>UpdatePasswordResult</returns>
        public UpdatePasswordResult UpdatePassword (UpdatePasswordInput input)
        {
             ApiResponse<UpdatePasswordResult> localVarResponse = UpdatePasswordWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// edit user passWord 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>ApiResponse of UpdatePasswordResult</returns>
        public ApiResponse< UpdatePasswordResult > UpdatePasswordWithHttpInfo (UpdatePasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->UpdatePassword");

            var localVarPath = "/settings/editUserPassWord";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatePasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePasswordResult)));
            
        }

        /// <summary>
        /// edit user passWord 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>Task of UpdatePasswordResult</returns>
        public async System.Threading.Tasks.Task<UpdatePasswordResult> UpdatePasswordAsync (UpdatePasswordInput input)
        {
             ApiResponse<UpdatePasswordResult> localVarResponse = await UpdatePasswordAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// edit user passWord 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdatePassword Input</param>
        /// <returns>Task of ApiResponse (UpdatePasswordResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePasswordResult>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->UpdatePassword");

            var localVarPath = "/settings/editUserPassWord";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatePasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePasswordResult)));
            
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>VmcRequestPasswordResult</returns>
        public VmcRequestPasswordResult VmcRequestPassword (VmcRequestPasswordInput input)
        {
             ApiResponse<VmcRequestPasswordResult> localVarResponse = VmcRequestPasswordWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>ApiResponse of VmcRequestPasswordResult</returns>
        public ApiResponse< VmcRequestPasswordResult > VmcRequestPasswordWithHttpInfo (VmcRequestPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->VmcRequestPassword");

            var localVarPath = "/vmc/requestpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VmcRequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VmcRequestPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VmcRequestPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VmcRequestPasswordResult)));
            
        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>Task of VmcRequestPasswordResult</returns>
        public async System.Threading.Tasks.Task<VmcRequestPasswordResult> VmcRequestPasswordAsync (VmcRequestPasswordInput input)
        {
             ApiResponse<VmcRequestPasswordResult> localVarResponse = await VmcRequestPasswordAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password via email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">VmcRequestPassword Input</param>
        /// <returns>Task of ApiResponse (VmcRequestPasswordResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VmcRequestPasswordResult>> VmcRequestPasswordAsyncWithHttpInfo (VmcRequestPasswordInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling UserApi->VmcRequestPassword");

            var localVarPath = "/vmc/requestpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VmcRequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VmcRequestPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VmcRequestPasswordResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VmcRequestPasswordResult)));
            
        }

    }
}
