/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFormApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a form definition from an prior uploaded file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>CreateDefinitionResult</returns>
        CreateDefinitionResult CreateDefinition (CreateDefinitionInput input);

        /// <summary>
        /// Create a form definition from an prior uploaded file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>ApiResponse of CreateDefinitionResult</returns>
        ApiResponse<CreateDefinitionResult> CreateDefinitionWithHttpInfo (CreateDefinitionInput input);
        /// <summary>
        /// Delete workflow form definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>DeleteDefinitionResult</returns>
        DeleteDefinitionResult DeleteDefinition (string key);

        /// <summary>
        /// Delete workflow form definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>ApiResponse of DeleteDefinitionResult</returns>
        ApiResponse<DeleteDefinitionResult> DeleteDefinitionWithHttpInfo (string key);
        /// <summary>
        /// Get form by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>GetFormResult</returns>
        GetFormResult GetForm (string key, string view);

        /// <summary>
        /// Get form by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>ApiResponse of GetFormResult</returns>
        ApiResponse<GetFormResult> GetFormWithHttpInfo (string key, string view);
        /// <summary>
        /// Update a form definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>UpdateDefinitionResult</returns>
        UpdateDefinitionResult UpdateDefinition (string key, UpdateDefinitionInput input);

        /// <summary>
        /// Update a form definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>ApiResponse of UpdateDefinitionResult</returns>
        ApiResponse<UpdateDefinitionResult> UpdateDefinitionWithHttpInfo (string key, UpdateDefinitionInput input);
        /// <summary>
        /// Update form data by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>UpdateFormResult</returns>
        UpdateFormResult UpdateForm (string key, UpdateFormInput input);

        /// <summary>
        /// Update form data by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>ApiResponse of UpdateFormResult</returns>
        ApiResponse<UpdateFormResult> UpdateFormWithHttpInfo (string key, UpdateFormInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a form definition from an prior uploaded file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>Task of CreateDefinitionResult</returns>
        System.Threading.Tasks.Task<CreateDefinitionResult> CreateDefinitionAsync (CreateDefinitionInput input);

        /// <summary>
        /// Create a form definition from an prior uploaded file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>Task of ApiResponse (CreateDefinitionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDefinitionResult>> CreateDefinitionAsyncWithHttpInfo (CreateDefinitionInput input);
        /// <summary>
        /// Delete workflow form definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>Task of DeleteDefinitionResult</returns>
        System.Threading.Tasks.Task<DeleteDefinitionResult> DeleteDefinitionAsync (string key);

        /// <summary>
        /// Delete workflow form definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>Task of ApiResponse (DeleteDefinitionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDefinitionResult>> DeleteDefinitionAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get form by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>Task of GetFormResult</returns>
        System.Threading.Tasks.Task<GetFormResult> GetFormAsync (string key, string view);

        /// <summary>
        /// Get form by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>Task of ApiResponse (GetFormResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFormResult>> GetFormAsyncWithHttpInfo (string key, string view);
        /// <summary>
        /// Update a form definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>Task of UpdateDefinitionResult</returns>
        System.Threading.Tasks.Task<UpdateDefinitionResult> UpdateDefinitionAsync (string key, UpdateDefinitionInput input);

        /// <summary>
        /// Update a form definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>Task of ApiResponse (UpdateDefinitionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDefinitionResult>> UpdateDefinitionAsyncWithHttpInfo (string key, UpdateDefinitionInput input);
        /// <summary>
        /// Update form data by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>Task of UpdateFormResult</returns>
        System.Threading.Tasks.Task<UpdateFormResult> UpdateFormAsync (string key, UpdateFormInput input);

        /// <summary>
        /// Update form data by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>Task of ApiResponse (UpdateFormResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFormResult>> UpdateFormAsyncWithHttpInfo (string key, UpdateFormInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FormApi : IFormApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public FormApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public FormApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FormApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a form definition from an prior uploaded file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>CreateDefinitionResult</returns>
        public CreateDefinitionResult CreateDefinition (CreateDefinitionInput input)
        {
             ApiResponse<CreateDefinitionResult> localVarResponse = CreateDefinitionWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a form definition from an prior uploaded file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>ApiResponse of CreateDefinitionResult</returns>
        public ApiResponse< CreateDefinitionResult > CreateDefinitionWithHttpInfo (CreateDefinitionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->CreateDefinition");

            var localVarPath = "/forms/definition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDefinitionResult)));
            
        }

        /// <summary>
        /// Create a form definition from an prior uploaded file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>Task of CreateDefinitionResult</returns>
        public async System.Threading.Tasks.Task<CreateDefinitionResult> CreateDefinitionAsync (CreateDefinitionInput input)
        {
             ApiResponse<CreateDefinitionResult> localVarResponse = await CreateDefinitionAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a form definition from an prior uploaded file. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateDefinition Input</param>
        /// <returns>Task of ApiResponse (CreateDefinitionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateDefinitionResult>> CreateDefinitionAsyncWithHttpInfo (CreateDefinitionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->CreateDefinition");

            var localVarPath = "/forms/definition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDefinitionResult)));
            
        }

        /// <summary>
        /// Delete workflow form definition. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>DeleteDefinitionResult</returns>
        public DeleteDefinitionResult DeleteDefinition (string key)
        {
             ApiResponse<DeleteDefinitionResult> localVarResponse = DeleteDefinitionWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete workflow form definition. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>ApiResponse of DeleteDefinitionResult</returns>
        public ApiResponse< DeleteDefinitionResult > DeleteDefinitionWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->DeleteDefinition");

            var localVarPath = "/forms/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDefinitionResult)));
            
        }

        /// <summary>
        /// Delete workflow form definition. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>Task of DeleteDefinitionResult</returns>
        public async System.Threading.Tasks.Task<DeleteDefinitionResult> DeleteDefinitionAsync (string key)
        {
             ApiResponse<DeleteDefinitionResult> localVarResponse = await DeleteDefinitionAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete workflow form definition. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of workflow form</param>
        /// <returns>Task of ApiResponse (DeleteDefinitionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDefinitionResult>> DeleteDefinitionAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->DeleteDefinition");

            var localVarPath = "/forms/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDefinitionResult)));
            
        }

        /// <summary>
        /// Get form by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>GetFormResult</returns>
        public GetFormResult GetForm (string key, string view)
        {
             ApiResponse<GetFormResult> localVarResponse = GetFormWithHttpInfo(key, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get form by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>ApiResponse of GetFormResult</returns>
        public ApiResponse< GetFormResult > GetFormWithHttpInfo (string key, string view)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->GetForm");
            // verify the required parameter 'view' is set
            if (view == null)
                throw new ApiException(400, "Missing required parameter 'view' when calling FormApi->GetForm");

            var localVarPath = "/forms/{key}/{view}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (view != null) localVarPathParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFormResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFormResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFormResult)));
            
        }

        /// <summary>
        /// Get form by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>Task of GetFormResult</returns>
        public async System.Threading.Tasks.Task<GetFormResult> GetFormAsync (string key, string view)
        {
             ApiResponse<GetFormResult> localVarResponse = await GetFormAsyncWithHttpInfo(key, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get form by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="view">Form view.</param>
        /// <returns>Task of ApiResponse (GetFormResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFormResult>> GetFormAsyncWithHttpInfo (string key, string view)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->GetForm");
            // verify the required parameter 'view' is set
            if (view == null)
                throw new ApiException(400, "Missing required parameter 'view' when calling FormApi->GetForm");

            var localVarPath = "/forms/{key}/{view}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (view != null) localVarPathParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFormResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFormResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFormResult)));
            
        }

        /// <summary>
        /// Update a form definition 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>UpdateDefinitionResult</returns>
        public UpdateDefinitionResult UpdateDefinition (string key, UpdateDefinitionInput input)
        {
             ApiResponse<UpdateDefinitionResult> localVarResponse = UpdateDefinitionWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a form definition 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>ApiResponse of UpdateDefinitionResult</returns>
        public ApiResponse< UpdateDefinitionResult > UpdateDefinitionWithHttpInfo (string key, UpdateDefinitionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->UpdateDefinition");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->UpdateDefinition");

            var localVarPath = "/forms/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefinitionResult)));
            
        }

        /// <summary>
        /// Update a form definition 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>Task of UpdateDefinitionResult</returns>
        public async System.Threading.Tasks.Task<UpdateDefinitionResult> UpdateDefinitionAsync (string key, UpdateDefinitionInput input)
        {
             ApiResponse<UpdateDefinitionResult> localVarResponse = await UpdateDefinitionAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a form definition 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">workflow form definition key</param>
        /// <param name="input">UpdateDefinition Input</param>
        /// <returns>Task of ApiResponse (UpdateDefinitionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDefinitionResult>> UpdateDefinitionAsyncWithHttpInfo (string key, UpdateDefinitionInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->UpdateDefinition");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->UpdateDefinition");

            var localVarPath = "/forms/definition/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefinitionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDefinitionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefinitionResult)));
            
        }

        /// <summary>
        /// Update form data by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>UpdateFormResult</returns>
        public UpdateFormResult UpdateForm (string key, UpdateFormInput input)
        {
             ApiResponse<UpdateFormResult> localVarResponse = UpdateFormWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update form data by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>ApiResponse of UpdateFormResult</returns>
        public ApiResponse< UpdateFormResult > UpdateFormWithHttpInfo (string key, UpdateFormInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->UpdateForm");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->UpdateForm");

            var localVarPath = "/forms/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFormResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFormResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFormResult)));
            
        }

        /// <summary>
        /// Update form data by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>Task of UpdateFormResult</returns>
        public async System.Threading.Tasks.Task<UpdateFormResult> UpdateFormAsync (string key, UpdateFormInput input)
        {
             ApiResponse<UpdateFormResult> localVarResponse = await UpdateFormAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update form data by key. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Form key.</param>
        /// <param name="input">UpdateForm Input</param>
        /// <returns>Task of ApiResponse (UpdateFormResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateFormResult>> UpdateFormAsyncWithHttpInfo (string key, UpdateFormInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling FormApi->UpdateForm");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling FormApi->UpdateForm");

            var localVarPath = "/forms/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFormResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFormResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFormResult)));
            
        }

    }
}
