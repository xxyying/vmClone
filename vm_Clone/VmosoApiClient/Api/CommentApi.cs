/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>CreateCommentResult</returns>
        CreateCommentResult CreateComment (CreateCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>ApiResponse of CreateCommentResult</returns>
        ApiResponse<CreateCommentResult> CreateCommentWithHttpInfo (CreateCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>CreateCommentFromDraftResult</returns>
        CreateCommentFromDraftResult CreateCommentFromDraft (CreateCommentFromDraftInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>ApiResponse of CreateCommentFromDraftResult</returns>
        ApiResponse<CreateCommentFromDraftResult> CreateCommentFromDraftWithHttpInfo (CreateCommentFromDraftInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>DeleteCommentResult</returns>
        DeleteCommentResult DeleteComment (DeleteCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>ApiResponse of DeleteCommentResult</returns>
        ApiResponse<DeleteCommentResult> DeleteCommentWithHttpInfo (DeleteCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>DeleteDraftResult</returns>
        DeleteDraftResult DeleteDraft (DeleteDraftInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>ApiResponse of DeleteDraftResult</returns>
        ApiResponse<DeleteDraftResult> DeleteDraftWithHttpInfo (DeleteDraftInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>GetCommentResult</returns>
        GetCommentResult GetComment (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>ApiResponse of GetCommentResult</returns>
        ApiResponse<GetCommentResult> GetCommentWithHttpInfo (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentCountsResult</returns>
        GetCommentCountsResult GetCommentCounts (string contentKey, string commentListKey = null, string subType = null, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentCountsResult</returns>
        ApiResponse<GetCommentCountsResult> GetCommentCountsWithHttpInfo (string contentKey, string commentListKey = null, string subType = null, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentReadersResult</returns>
        GetCommentReadersResult GetCommentReaders (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentReadersResult</returns>
        ApiResponse<GetCommentReadersResult> GetCommentReadersWithHttpInfo (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentsResult</returns>
        GetCommentsResult GetComments (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentsResult</returns>
        ApiResponse<GetCommentsResult> GetCommentsWithHttpInfo (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>GetCountResult</returns>
        GetCountResult GetCount (string contentKey, string commentListKey = null, string subType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>ApiResponse of GetCountResult</returns>
        ApiResponse<GetCountResult> GetCountWithHttpInfo (string contentKey, string commentListKey = null, string subType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>GetDraftsResult</returns>
        GetDraftsResult GetDrafts (string contentKey, string commentListKey = null, string subType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>ApiResponse of GetDraftsResult</returns>
        ApiResponse<GetDraftsResult> GetDraftsWithHttpInfo (string contentKey, string commentListKey = null, string subType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>MarkAllReadResult</returns>
        MarkAllReadResult MarkAllRead (MarkAllReadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>ApiResponse of MarkAllReadResult</returns>
        ApiResponse<MarkAllReadResult> MarkAllReadWithHttpInfo (MarkAllReadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>MarkReadResult</returns>
        MarkReadResult MarkRead (MarkReadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>ApiResponse of MarkReadResult</returns>
        ApiResponse<MarkReadResult> MarkReadWithHttpInfo (MarkReadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>MarkReadByEmailResult</returns>
        MarkReadByEmailResult MarkReadByEmail (string userKey, string commentListKey, int? commentId, string contentKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>ApiResponse of MarkReadByEmailResult</returns>
        ApiResponse<MarkReadByEmailResult> MarkReadByEmailWithHttpInfo (string userKey, string commentListKey, int? commentId, string contentKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>MarkUnreadResult</returns>
        MarkUnreadResult MarkUnread (MarkUnreadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>ApiResponse of MarkUnreadResult</returns>
        ApiResponse<MarkUnreadResult> MarkUnreadWithHttpInfo (MarkUnreadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>RecordCommentActionResult</returns>
        RecordCommentActionResult RecordCommentAction (RecordCommentActionInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>ApiResponse of RecordCommentActionResult</returns>
        ApiResponse<RecordCommentActionResult> RecordCommentActionWithHttpInfo (RecordCommentActionInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>UndeleteCommentResult</returns>
        UndeleteCommentResult UndeleteComment (UndeleteCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>ApiResponse of UndeleteCommentResult</returns>
        ApiResponse<UndeleteCommentResult> UndeleteCommentWithHttpInfo (UndeleteCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>UpdateCommentResult</returns>
        UpdateCommentResult UpdateComment (UpdateCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>ApiResponse of UpdateCommentResult</returns>
        ApiResponse<UpdateCommentResult> UpdateCommentWithHttpInfo (UpdateCommentInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>Task of CreateCommentResult</returns>
        System.Threading.Tasks.Task<CreateCommentResult> CreateCommentAsync (CreateCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>Task of ApiResponse (CreateCommentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCommentResult>> CreateCommentAsyncWithHttpInfo (CreateCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>Task of CreateCommentFromDraftResult</returns>
        System.Threading.Tasks.Task<CreateCommentFromDraftResult> CreateCommentFromDraftAsync (CreateCommentFromDraftInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>Task of ApiResponse (CreateCommentFromDraftResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCommentFromDraftResult>> CreateCommentFromDraftAsyncWithHttpInfo (CreateCommentFromDraftInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>Task of DeleteCommentResult</returns>
        System.Threading.Tasks.Task<DeleteCommentResult> DeleteCommentAsync (DeleteCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>Task of ApiResponse (DeleteCommentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCommentResult>> DeleteCommentAsyncWithHttpInfo (DeleteCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>Task of DeleteDraftResult</returns>
        System.Threading.Tasks.Task<DeleteDraftResult> DeleteDraftAsync (DeleteDraftInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>Task of ApiResponse (DeleteDraftResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDraftResult>> DeleteDraftAsyncWithHttpInfo (DeleteDraftInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>Task of GetCommentResult</returns>
        System.Threading.Tasks.Task<GetCommentResult> GetCommentAsync (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentResult>> GetCommentAsyncWithHttpInfo (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentCountsResult</returns>
        System.Threading.Tasks.Task<GetCommentCountsResult> GetCommentCountsAsync (string contentKey, string commentListKey = null, string subType = null, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentCountsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentCountsResult>> GetCommentCountsAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentReadersResult</returns>
        System.Threading.Tasks.Task<GetCommentReadersResult> GetCommentReadersAsync (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentReadersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentReadersResult>> GetCommentReadersAsyncWithHttpInfo (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentsResult</returns>
        System.Threading.Tasks.Task<GetCommentsResult> GetCommentsAsync (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentsResult>> GetCommentsAsyncWithHttpInfo (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of GetCountResult</returns>
        System.Threading.Tasks.Task<GetCountResult> GetCountAsync (string contentKey, string commentListKey = null, string subType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountResult>> GetCountAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of GetDraftsResult</returns>
        System.Threading.Tasks.Task<GetDraftsResult> GetDraftsAsync (string contentKey, string commentListKey = null, string subType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of ApiResponse (GetDraftsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDraftsResult>> GetDraftsAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>Task of MarkAllReadResult</returns>
        System.Threading.Tasks.Task<MarkAllReadResult> MarkAllReadAsync (MarkAllReadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>Task of ApiResponse (MarkAllReadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkAllReadResult>> MarkAllReadAsyncWithHttpInfo (MarkAllReadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>Task of MarkReadResult</returns>
        System.Threading.Tasks.Task<MarkReadResult> MarkReadAsync (MarkReadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>Task of ApiResponse (MarkReadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkReadResult>> MarkReadAsyncWithHttpInfo (MarkReadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>Task of MarkReadByEmailResult</returns>
        System.Threading.Tasks.Task<MarkReadByEmailResult> MarkReadByEmailAsync (string userKey, string commentListKey, int? commentId, string contentKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>Task of ApiResponse (MarkReadByEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkReadByEmailResult>> MarkReadByEmailAsyncWithHttpInfo (string userKey, string commentListKey, int? commentId, string contentKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>Task of MarkUnreadResult</returns>
        System.Threading.Tasks.Task<MarkUnreadResult> MarkUnreadAsync (MarkUnreadInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>Task of ApiResponse (MarkUnreadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnreadResult>> MarkUnreadAsyncWithHttpInfo (MarkUnreadInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>Task of RecordCommentActionResult</returns>
        System.Threading.Tasks.Task<RecordCommentActionResult> RecordCommentActionAsync (RecordCommentActionInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>Task of ApiResponse (RecordCommentActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordCommentActionResult>> RecordCommentActionAsyncWithHttpInfo (RecordCommentActionInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>Task of UndeleteCommentResult</returns>
        System.Threading.Tasks.Task<UndeleteCommentResult> UndeleteCommentAsync (UndeleteCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>Task of ApiResponse (UndeleteCommentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UndeleteCommentResult>> UndeleteCommentAsyncWithHttpInfo (UndeleteCommentInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>Task of UpdateCommentResult</returns>
        System.Threading.Tasks.Task<UpdateCommentResult> UpdateCommentAsync (UpdateCommentInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>Task of ApiResponse (UpdateCommentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCommentResult>> UpdateCommentAsyncWithHttpInfo (UpdateCommentInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommentApi : ICommentApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public CommentApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public CommentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>CreateCommentResult</returns>
        public CreateCommentResult CreateComment (CreateCommentInput input)
        {
             ApiResponse<CreateCommentResult> localVarResponse = CreateCommentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>ApiResponse of CreateCommentResult</returns>
        public ApiResponse< CreateCommentResult > CreateCommentWithHttpInfo (CreateCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->CreateComment");

            var localVarPath = "/comments/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>Task of CreateCommentResult</returns>
        public async System.Threading.Tasks.Task<CreateCommentResult> CreateCommentAsync (CreateCommentInput input)
        {
             ApiResponse<CreateCommentResult> localVarResponse = await CreateCommentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateComment Input</param>
        /// <returns>Task of ApiResponse (CreateCommentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCommentResult>> CreateCommentAsyncWithHttpInfo (CreateCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->CreateComment");

            var localVarPath = "/comments/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>CreateCommentFromDraftResult</returns>
        public CreateCommentFromDraftResult CreateCommentFromDraft (CreateCommentFromDraftInput input)
        {
             ApiResponse<CreateCommentFromDraftResult> localVarResponse = CreateCommentFromDraftWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>ApiResponse of CreateCommentFromDraftResult</returns>
        public ApiResponse< CreateCommentFromDraftResult > CreateCommentFromDraftWithHttpInfo (CreateCommentFromDraftInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->CreateCommentFromDraft");

            var localVarPath = "/comments/draftTOComment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCommentFromDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCommentFromDraftResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCommentFromDraftResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCommentFromDraftResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>Task of CreateCommentFromDraftResult</returns>
        public async System.Threading.Tasks.Task<CreateCommentFromDraftResult> CreateCommentFromDraftAsync (CreateCommentFromDraftInput input)
        {
             ApiResponse<CreateCommentFromDraftResult> localVarResponse = await CreateCommentFromDraftAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateCommentFromDraft Input</param>
        /// <returns>Task of ApiResponse (CreateCommentFromDraftResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCommentFromDraftResult>> CreateCommentFromDraftAsyncWithHttpInfo (CreateCommentFromDraftInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->CreateCommentFromDraft");

            var localVarPath = "/comments/draftTOComment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCommentFromDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCommentFromDraftResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCommentFromDraftResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCommentFromDraftResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>DeleteCommentResult</returns>
        public DeleteCommentResult DeleteComment (DeleteCommentInput input)
        {
             ApiResponse<DeleteCommentResult> localVarResponse = DeleteCommentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>ApiResponse of DeleteCommentResult</returns>
        public ApiResponse< DeleteCommentResult > DeleteCommentWithHttpInfo (DeleteCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->DeleteComment");

            var localVarPath = "/comments/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>Task of DeleteCommentResult</returns>
        public async System.Threading.Tasks.Task<DeleteCommentResult> DeleteCommentAsync (DeleteCommentInput input)
        {
             ApiResponse<DeleteCommentResult> localVarResponse = await DeleteCommentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteComment Input</param>
        /// <returns>Task of ApiResponse (DeleteCommentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteCommentResult>> DeleteCommentAsyncWithHttpInfo (DeleteCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->DeleteComment");

            var localVarPath = "/comments/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>DeleteDraftResult</returns>
        public DeleteDraftResult DeleteDraft (DeleteDraftInput input)
        {
             ApiResponse<DeleteDraftResult> localVarResponse = DeleteDraftWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>ApiResponse of DeleteDraftResult</returns>
        public ApiResponse< DeleteDraftResult > DeleteDraftWithHttpInfo (DeleteDraftInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->DeleteDraft");

            var localVarPath = "/comments/deleteDraft";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDraftResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDraftResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDraftResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>Task of DeleteDraftResult</returns>
        public async System.Threading.Tasks.Task<DeleteDraftResult> DeleteDraftAsync (DeleteDraftInput input)
        {
             ApiResponse<DeleteDraftResult> localVarResponse = await DeleteDraftAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteDraft Input</param>
        /// <returns>Task of ApiResponse (DeleteDraftResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDraftResult>> DeleteDraftAsyncWithHttpInfo (DeleteDraftInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->DeleteDraft");

            var localVarPath = "/comments/deleteDraft";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDraftResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDraftResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDraftResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>GetCommentResult</returns>
        public GetCommentResult GetComment (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null)
        {
             ApiResponse<GetCommentResult> localVarResponse = GetCommentWithHttpInfo(contentKey, commentListKey, commentID, commentPID, commentCID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>ApiResponse of GetCommentResult</returns>
        public ApiResponse< GetCommentResult > GetCommentWithHttpInfo (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetComment");

            var localVarPath = "/comments/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentID != null) localVarQueryParams.Add("commentID", Configuration.ApiClient.ParameterToString(commentID)); // query parameter
            if (commentPID != null) localVarQueryParams.Add("commentPID", Configuration.ApiClient.ParameterToString(commentPID)); // query parameter
            if (commentCID != null) localVarQueryParams.Add("commentCID", Configuration.ApiClient.ParameterToString(commentCID)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>Task of GetCommentResult</returns>
        public async System.Threading.Tasks.Task<GetCommentResult> GetCommentAsync (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null)
        {
             ApiResponse<GetCommentResult> localVarResponse = await GetCommentAsyncWithHttpInfo(contentKey, commentListKey, commentID, commentPID, commentCID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey">the comment list id (optional)</param>
        /// <param name="commentID"> (optional)</param>
        /// <param name="commentPID"> (optional)</param>
        /// <param name="commentCID"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCommentResult>> GetCommentAsyncWithHttpInfo (string contentKey, string commentListKey = null, int? commentID = null, int? commentPID = null, int? commentCID = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetComment");

            var localVarPath = "/comments/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentID != null) localVarQueryParams.Add("commentID", Configuration.ApiClient.ParameterToString(commentID)); // query parameter
            if (commentPID != null) localVarQueryParams.Add("commentPID", Configuration.ApiClient.ParameterToString(commentPID)); // query parameter
            if (commentCID != null) localVarQueryParams.Add("commentCID", Configuration.ApiClient.ParameterToString(commentCID)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentCountsResult</returns>
        public GetCommentCountsResult GetCommentCounts (string contentKey, string commentListKey = null, string subType = null, string options = null)
        {
             ApiResponse<GetCommentCountsResult> localVarResponse = GetCommentCountsWithHttpInfo(contentKey, commentListKey, subType, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentCountsResult</returns>
        public ApiResponse< GetCommentCountsResult > GetCommentCountsWithHttpInfo (string contentKey, string commentListKey = null, string subType = null, string options = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCommentCounts");

            var localVarPath = "/comment/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentCountsResult</returns>
        public async System.Threading.Tasks.Task<GetCommentCountsResult> GetCommentCountsAsync (string contentKey, string commentListKey = null, string subType = null, string options = null)
        {
             ApiResponse<GetCommentCountsResult> localVarResponse = await GetCommentCountsAsyncWithHttpInfo(contentKey, commentListKey, subType, options);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType">default general (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentCountsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCommentCountsResult>> GetCommentCountsAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null, string options = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCommentCounts");

            var localVarPath = "/comment/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentCountsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentCountsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentCountsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentReadersResult</returns>
        public GetCommentReadersResult GetCommentReaders (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null)
        {
             ApiResponse<GetCommentReadersResult> localVarResponse = GetCommentReadersWithHttpInfo(contentKey, commentId, commentListKey, options, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentReadersResult</returns>
        public ApiResponse< GetCommentReadersResult > GetCommentReadersWithHttpInfo (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCommentReaders");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentApi->GetCommentReaders");

            var localVarPath = "/comment/readerList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentId != null) localVarQueryParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentReaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentReadersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentReadersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentReadersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentReadersResult</returns>
        public async System.Threading.Tasks.Task<GetCommentReadersResult> GetCommentReadersAsync (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null)
        {
             ApiResponse<GetCommentReadersResult> localVarResponse = await GetCommentReadersAsyncWithHttpInfo(contentKey, commentId, commentListKey, options, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey">the content key</param>
        /// <param name="commentId"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;ReaderListOptionsV2Record&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentReadersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCommentReadersResult>> GetCommentReadersAsyncWithHttpInfo (string contentKey, int? commentId, string commentListKey = null, string options = null, string pg = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCommentReaders");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentApi->GetCommentReaders");

            var localVarPath = "/comment/readerList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentId != null) localVarQueryParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentReaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentReadersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentReadersResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentReadersResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>GetCommentsResult</returns>
        public GetCommentsResult GetComments (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null)
        {
             ApiResponse<GetCommentsResult> localVarResponse = GetCommentsWithHttpInfo(contentKey, options, pg, commentListKey, additionalData);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetCommentsResult</returns>
        public ApiResponse< GetCommentsResult > GetCommentsWithHttpInfo (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetComments");

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (additionalData != null) localVarQueryParams.Add("additionalData", Configuration.ApiClient.ParameterToString(additionalData)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetCommentsResult</returns>
        public async System.Threading.Tasks.Task<GetCommentsResult> GetCommentsAsync (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null)
        {
             ApiResponse<GetCommentsResult> localVarResponse = await GetCommentsAsyncWithHttpInfo(contentKey, options, pg, commentListKey, additionalData);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="options">(JSON object &lt;&lt;CommentListV2OptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="additionalData">(JSON object &lt;&lt;AdditionalDataRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCommentsResult>> GetCommentsAsyncWithHttpInfo (string contentKey, string options = null, string pg = null, string commentListKey = null, string additionalData = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetComments");

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (additionalData != null) localVarQueryParams.Add("additionalData", Configuration.ApiClient.ParameterToString(additionalData)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCommentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>GetCountResult</returns>
        public GetCountResult GetCount (string contentKey, string commentListKey = null, string subType = null)
        {
             ApiResponse<GetCountResult> localVarResponse = GetCountWithHttpInfo(contentKey, commentListKey, subType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>ApiResponse of GetCountResult</returns>
        public ApiResponse< GetCountResult > GetCountWithHttpInfo (string contentKey, string commentListKey = null, string subType = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCount");

            var localVarPath = "/comment/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of GetCountResult</returns>
        public async System.Threading.Tasks.Task<GetCountResult> GetCountAsync (string contentKey, string commentListKey = null, string subType = null)
        {
             ApiResponse<GetCountResult> localVarResponse = await GetCountAsyncWithHttpInfo(contentKey, commentListKey, subType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCountResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountResult>> GetCountAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetCount");

            var localVarPath = "/comment/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>GetDraftsResult</returns>
        public GetDraftsResult GetDrafts (string contentKey, string commentListKey = null, string subType = null)
        {
             ApiResponse<GetDraftsResult> localVarResponse = GetDraftsWithHttpInfo(contentKey, commentListKey, subType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>ApiResponse of GetDraftsResult</returns>
        public ApiResponse< GetDraftsResult > GetDraftsWithHttpInfo (string contentKey, string commentListKey = null, string subType = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetDrafts");

            var localVarPath = "/comments/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDraftsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDraftsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDraftsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of GetDraftsResult</returns>
        public async System.Threading.Tasks.Task<GetDraftsResult> GetDraftsAsync (string contentKey, string commentListKey = null, string subType = null)
        {
             ApiResponse<GetDraftsResult> localVarResponse = await GetDraftsAsyncWithHttpInfo(contentKey, commentListKey, subType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKey"></param>
        /// <param name="commentListKey"> (optional)</param>
        /// <param name="subType"> (optional)</param>
        /// <returns>Task of ApiResponse (GetDraftsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDraftsResult>> GetDraftsAsyncWithHttpInfo (string contentKey, string commentListKey = null, string subType = null)
        {
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->GetDrafts");

            var localVarPath = "/comments/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (subType != null) localVarQueryParams.Add("subType", Configuration.ApiClient.ParameterToString(subType)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDraftsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDraftsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDraftsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>MarkAllReadResult</returns>
        public MarkAllReadResult MarkAllRead (MarkAllReadInput input)
        {
             ApiResponse<MarkAllReadResult> localVarResponse = MarkAllReadWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>ApiResponse of MarkAllReadResult</returns>
        public ApiResponse< MarkAllReadResult > MarkAllReadWithHttpInfo (MarkAllReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkAllRead");

            var localVarPath = "/comment/markAllRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkAllReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkAllReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkAllReadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>Task of MarkAllReadResult</returns>
        public async System.Threading.Tasks.Task<MarkAllReadResult> MarkAllReadAsync (MarkAllReadInput input)
        {
             ApiResponse<MarkAllReadResult> localVarResponse = await MarkAllReadAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkAllRead Input</param>
        /// <returns>Task of ApiResponse (MarkAllReadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkAllReadResult>> MarkAllReadAsyncWithHttpInfo (MarkAllReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkAllRead");

            var localVarPath = "/comment/markAllRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkAllReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkAllReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkAllReadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>MarkReadResult</returns>
        public MarkReadResult MarkRead (MarkReadInput input)
        {
             ApiResponse<MarkReadResult> localVarResponse = MarkReadWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>ApiResponse of MarkReadResult</returns>
        public ApiResponse< MarkReadResult > MarkReadWithHttpInfo (MarkReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkRead");

            var localVarPath = "/comment/markRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>Task of MarkReadResult</returns>
        public async System.Threading.Tasks.Task<MarkReadResult> MarkReadAsync (MarkReadInput input)
        {
             ApiResponse<MarkReadResult> localVarResponse = await MarkReadAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkRead Input</param>
        /// <returns>Task of ApiResponse (MarkReadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkReadResult>> MarkReadAsyncWithHttpInfo (MarkReadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkRead");

            var localVarPath = "/comment/markRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkReadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkReadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>MarkReadByEmailResult</returns>
        public MarkReadByEmailResult MarkReadByEmail (string userKey, string commentListKey, int? commentId, string contentKey)
        {
             ApiResponse<MarkReadByEmailResult> localVarResponse = MarkReadByEmailWithHttpInfo(userKey, commentListKey, commentId, contentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>ApiResponse of MarkReadByEmailResult</returns>
        public ApiResponse< MarkReadByEmailResult > MarkReadByEmailWithHttpInfo (string userKey, string commentListKey, int? commentId, string contentKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'commentListKey' is set
            if (commentListKey == null)
                throw new ApiException(400, "Missing required parameter 'commentListKey' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->MarkReadByEmail");

            var localVarPath = "/comment/markReadByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentId != null) localVarQueryParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkReadByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkReadByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkReadByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadByEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>Task of MarkReadByEmailResult</returns>
        public async System.Threading.Tasks.Task<MarkReadByEmailResult> MarkReadByEmailAsync (string userKey, string commentListKey, int? commentId, string contentKey)
        {
             ApiResponse<MarkReadByEmailResult> localVarResponse = await MarkReadByEmailAsyncWithHttpInfo(userKey, commentListKey, commentId, contentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userKey"></param>
        /// <param name="commentListKey"></param>
        /// <param name="commentId"></param>
        /// <param name="contentKey">the content key</param>
        /// <returns>Task of ApiResponse (MarkReadByEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkReadByEmailResult>> MarkReadByEmailAsyncWithHttpInfo (string userKey, string commentListKey, int? commentId, string contentKey)
        {
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'commentListKey' is set
            if (commentListKey == null)
                throw new ApiException(400, "Missing required parameter 'commentListKey' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentApi->MarkReadByEmail");
            // verify the required parameter 'contentKey' is set
            if (contentKey == null)
                throw new ApiException(400, "Missing required parameter 'contentKey' when calling CommentApi->MarkReadByEmail");

            var localVarPath = "/comment/markReadByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userKey != null) localVarQueryParams.Add("userKey", Configuration.ApiClient.ParameterToString(userKey)); // query parameter
            if (commentListKey != null) localVarQueryParams.Add("commentListKey", Configuration.ApiClient.ParameterToString(commentListKey)); // query parameter
            if (commentId != null) localVarQueryParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // query parameter
            if (contentKey != null) localVarQueryParams.Add("contentKey", Configuration.ApiClient.ParameterToString(contentKey)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkReadByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkReadByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkReadByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadByEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>MarkUnreadResult</returns>
        public MarkUnreadResult MarkUnread (MarkUnreadInput input)
        {
             ApiResponse<MarkUnreadResult> localVarResponse = MarkUnreadWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>ApiResponse of MarkUnreadResult</returns>
        public ApiResponse< MarkUnreadResult > MarkUnreadWithHttpInfo (MarkUnreadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkUnread");

            var localVarPath = "/comment/markUnRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkUnread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnreadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkUnreadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnreadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>Task of MarkUnreadResult</returns>
        public async System.Threading.Tasks.Task<MarkUnreadResult> MarkUnreadAsync (MarkUnreadInput input)
        {
             ApiResponse<MarkUnreadResult> localVarResponse = await MarkUnreadAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">MarkUnread Input</param>
        /// <returns>Task of ApiResponse (MarkUnreadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnreadResult>> MarkUnreadAsyncWithHttpInfo (MarkUnreadInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->MarkUnread");

            var localVarPath = "/comment/markUnRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkUnread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnreadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkUnreadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnreadResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>RecordCommentActionResult</returns>
        public RecordCommentActionResult RecordCommentAction (RecordCommentActionInput input)
        {
             ApiResponse<RecordCommentActionResult> localVarResponse = RecordCommentActionWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>ApiResponse of RecordCommentActionResult</returns>
        public ApiResponse< RecordCommentActionResult > RecordCommentActionWithHttpInfo (RecordCommentActionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->RecordCommentAction");

            var localVarPath = "/commenting/action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordCommentAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordCommentActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordCommentActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordCommentActionResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>Task of RecordCommentActionResult</returns>
        public async System.Threading.Tasks.Task<RecordCommentActionResult> RecordCommentActionAsync (RecordCommentActionInput input)
        {
             ApiResponse<RecordCommentActionResult> localVarResponse = await RecordCommentActionAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RecordCommentAction Input</param>
        /// <returns>Task of ApiResponse (RecordCommentActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordCommentActionResult>> RecordCommentActionAsyncWithHttpInfo (RecordCommentActionInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->RecordCommentAction");

            var localVarPath = "/commenting/action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordCommentAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordCommentActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordCommentActionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordCommentActionResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>UndeleteCommentResult</returns>
        public UndeleteCommentResult UndeleteComment (UndeleteCommentInput input)
        {
             ApiResponse<UndeleteCommentResult> localVarResponse = UndeleteCommentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>ApiResponse of UndeleteCommentResult</returns>
        public ApiResponse< UndeleteCommentResult > UndeleteCommentWithHttpInfo (UndeleteCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->UndeleteComment");

            var localVarPath = "/comments/undelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UndeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UndeleteCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UndeleteCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UndeleteCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>Task of UndeleteCommentResult</returns>
        public async System.Threading.Tasks.Task<UndeleteCommentResult> UndeleteCommentAsync (UndeleteCommentInput input)
        {
             ApiResponse<UndeleteCommentResult> localVarResponse = await UndeleteCommentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UndeleteComment Input</param>
        /// <returns>Task of ApiResponse (UndeleteCommentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UndeleteCommentResult>> UndeleteCommentAsyncWithHttpInfo (UndeleteCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->UndeleteComment");

            var localVarPath = "/comments/undelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UndeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UndeleteCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UndeleteCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UndeleteCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>UpdateCommentResult</returns>
        public UpdateCommentResult UpdateComment (UpdateCommentInput input)
        {
             ApiResponse<UpdateCommentResult> localVarResponse = UpdateCommentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>ApiResponse of UpdateCommentResult</returns>
        public ApiResponse< UpdateCommentResult > UpdateCommentWithHttpInfo (UpdateCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->UpdateComment");

            var localVarPath = "/comments/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCommentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>Task of UpdateCommentResult</returns>
        public async System.Threading.Tasks.Task<UpdateCommentResult> UpdateCommentAsync (UpdateCommentInput input)
        {
             ApiResponse<UpdateCommentResult> localVarResponse = await UpdateCommentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UpdateComment Input</param>
        /// <returns>Task of ApiResponse (UpdateCommentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCommentResult>> UpdateCommentAsyncWithHttpInfo (UpdateCommentInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling CommentApi->UpdateComment");

            var localVarPath = "/comments/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCommentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCommentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCommentResult)));
            
        }

    }
}
