/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// bind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>BindLoginIDsResult</returns>
        BindLoginIDsResult BindLoginIDs (BindLoginIDsInput input);

        /// <summary>
        /// bind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>ApiResponse of BindLoginIDsResult</returns>
        ApiResponse<BindLoginIDsResult> BindLoginIDsWithHttpInfo (BindLoginIDsInput input);
        /// <summary>
        /// check secondary email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>CheckSecondaryEmailResult</returns>
        CheckSecondaryEmailResult CheckSecondaryEmail (string email);

        /// <summary>
        /// check secondary email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of CheckSecondaryEmailResult</returns>
        ApiResponse<CheckSecondaryEmailResult> CheckSecondaryEmailWithHttpInfo (string email);
        /// <summary>
        /// confirm bind email id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>ConfirmBindEmailIDResult</returns>
        ConfirmBindEmailIDResult ConfirmBindEmailID (ConfirmBindEmailIDInput input);

        /// <summary>
        /// confirm bind email id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>ApiResponse of ConfirmBindEmailIDResult</returns>
        ApiResponse<ConfirmBindEmailIDResult> ConfirmBindEmailIDWithHttpInfo (ConfirmBindEmailIDInput input);
        /// <summary>
        /// confirm alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>ConfirmSecondaryEmailResult</returns>
        ConfirmSecondaryEmailResult ConfirmSecondaryEmail (ConfirmSecondaryEmailInput input);

        /// <summary>
        /// confirm alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>ApiResponse of ConfirmSecondaryEmailResult</returns>
        ApiResponse<ConfirmSecondaryEmailResult> ConfirmSecondaryEmailWithHttpInfo (ConfirmSecondaryEmailInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLoginIDsResult</returns>
        GetLoginIDsResult GetLoginIDs ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLoginIDsResult</returns>
        ApiResponse<GetLoginIDsResult> GetLoginIDsWithHttpInfo ();
        /// <summary>
        /// Gets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>GetSettingsResult</returns>
        GetSettingsResult GetSettings (string options = null);

        /// <summary>
        /// Gets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSettingsResult</returns>
        ApiResponse<GetSettingsResult> GetSettingsWithHttpInfo (string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>RegisterAPPInfoResult</returns>
        RegisterAPPInfoResult RegisterAPPInfo (RegisterAPPInfoInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>ApiResponse of RegisterAPPInfoResult</returns>
        ApiResponse<RegisterAPPInfoResult> RegisterAPPInfoWithHttpInfo (RegisterAPPInfoInput input);
        /// <summary>
        /// Sets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>SaveSettingsResult</returns>
        SaveSettingsResult SaveSettings (SaveSettingsInput input);

        /// <summary>
        /// Sets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>ApiResponse of SaveSettingsResult</returns>
        ApiResponse<SaveSettingsResult> SaveSettingsWithHttpInfo (SaveSettingsInput input);
        /// <summary>
        /// unbind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>UnbindLoginIDsResult</returns>
        UnbindLoginIDsResult UnbindLoginIDs (UnbindLoginIDsInput input);

        /// <summary>
        /// unbind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>ApiResponse of UnbindLoginIDsResult</returns>
        ApiResponse<UnbindLoginIDsResult> UnbindLoginIDsWithHttpInfo (UnbindLoginIDsInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// bind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>Task of BindLoginIDsResult</returns>
        System.Threading.Tasks.Task<BindLoginIDsResult> BindLoginIDsAsync (BindLoginIDsInput input);

        /// <summary>
        /// bind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>Task of ApiResponse (BindLoginIDsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BindLoginIDsResult>> BindLoginIDsAsyncWithHttpInfo (BindLoginIDsInput input);
        /// <summary>
        /// check secondary email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of CheckSecondaryEmailResult</returns>
        System.Threading.Tasks.Task<CheckSecondaryEmailResult> CheckSecondaryEmailAsync (string email);

        /// <summary>
        /// check secondary email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (CheckSecondaryEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckSecondaryEmailResult>> CheckSecondaryEmailAsyncWithHttpInfo (string email);
        /// <summary>
        /// confirm bind email id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>Task of ConfirmBindEmailIDResult</returns>
        System.Threading.Tasks.Task<ConfirmBindEmailIDResult> ConfirmBindEmailIDAsync (ConfirmBindEmailIDInput input);

        /// <summary>
        /// confirm bind email id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>Task of ApiResponse (ConfirmBindEmailIDResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmBindEmailIDResult>> ConfirmBindEmailIDAsyncWithHttpInfo (ConfirmBindEmailIDInput input);
        /// <summary>
        /// confirm alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>Task of ConfirmSecondaryEmailResult</returns>
        System.Threading.Tasks.Task<ConfirmSecondaryEmailResult> ConfirmSecondaryEmailAsync (ConfirmSecondaryEmailInput input);

        /// <summary>
        /// confirm alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>Task of ApiResponse (ConfirmSecondaryEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmSecondaryEmailResult>> ConfirmSecondaryEmailAsyncWithHttpInfo (ConfirmSecondaryEmailInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLoginIDsResult</returns>
        System.Threading.Tasks.Task<GetLoginIDsResult> GetLoginIDsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLoginIDsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLoginIDsResult>> GetLoginIDsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSettingsResult</returns>
        System.Threading.Tasks.Task<GetSettingsResult> GetSettingsAsync (string options = null);

        /// <summary>
        /// Gets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSettingsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSettingsResult>> GetSettingsAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>Task of RegisterAPPInfoResult</returns>
        System.Threading.Tasks.Task<RegisterAPPInfoResult> RegisterAPPInfoAsync (RegisterAPPInfoInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>Task of ApiResponse (RegisterAPPInfoResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterAPPInfoResult>> RegisterAPPInfoAsyncWithHttpInfo (RegisterAPPInfoInput input);
        /// <summary>
        /// Sets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>Task of SaveSettingsResult</returns>
        System.Threading.Tasks.Task<SaveSettingsResult> SaveSettingsAsync (SaveSettingsInput input);

        /// <summary>
        /// Sets settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>Task of ApiResponse (SaveSettingsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveSettingsResult>> SaveSettingsAsyncWithHttpInfo (SaveSettingsInput input);
        /// <summary>
        /// unbind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>Task of UnbindLoginIDsResult</returns>
        System.Threading.Tasks.Task<UnbindLoginIDsResult> UnbindLoginIDsAsync (UnbindLoginIDsInput input);

        /// <summary>
        /// unbind login ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>Task of ApiResponse (UnbindLoginIDsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnbindLoginIDsResult>> UnbindLoginIDsAsyncWithHttpInfo (UnbindLoginIDsInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public SettingsApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// bind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>BindLoginIDsResult</returns>
        public BindLoginIDsResult BindLoginIDs (BindLoginIDsInput input)
        {
             ApiResponse<BindLoginIDsResult> localVarResponse = BindLoginIDsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// bind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>ApiResponse of BindLoginIDsResult</returns>
        public ApiResponse< BindLoginIDsResult > BindLoginIDsWithHttpInfo (BindLoginIDsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->BindLoginIDs");

            var localVarPath = "/settings/bindLoginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BindLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BindLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BindLoginIDsResult)));
            
        }

        /// <summary>
        /// bind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>Task of BindLoginIDsResult</returns>
        public async System.Threading.Tasks.Task<BindLoginIDsResult> BindLoginIDsAsync (BindLoginIDsInput input)
        {
             ApiResponse<BindLoginIDsResult> localVarResponse = await BindLoginIDsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// bind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">BindLoginIDs Input</param>
        /// <returns>Task of ApiResponse (BindLoginIDsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BindLoginIDsResult>> BindLoginIDsAsyncWithHttpInfo (BindLoginIDsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->BindLoginIDs");

            var localVarPath = "/settings/bindLoginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BindLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BindLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BindLoginIDsResult)));
            
        }

        /// <summary>
        /// check secondary email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>CheckSecondaryEmailResult</returns>
        public CheckSecondaryEmailResult CheckSecondaryEmail (string email)
        {
             ApiResponse<CheckSecondaryEmailResult> localVarResponse = CheckSecondaryEmailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// check secondary email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of CheckSecondaryEmailResult</returns>
        public ApiResponse< CheckSecondaryEmailResult > CheckSecondaryEmailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SettingsApi->CheckSecondaryEmail");

            var localVarPath = "/settings/checkSecondaryEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckSecondaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckSecondaryEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckSecondaryEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckSecondaryEmailResult)));
            
        }

        /// <summary>
        /// check secondary email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of CheckSecondaryEmailResult</returns>
        public async System.Threading.Tasks.Task<CheckSecondaryEmailResult> CheckSecondaryEmailAsync (string email)
        {
             ApiResponse<CheckSecondaryEmailResult> localVarResponse = await CheckSecondaryEmailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// check secondary email 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (CheckSecondaryEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckSecondaryEmailResult>> CheckSecondaryEmailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SettingsApi->CheckSecondaryEmail");

            var localVarPath = "/settings/checkSecondaryEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckSecondaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckSecondaryEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckSecondaryEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckSecondaryEmailResult)));
            
        }

        /// <summary>
        /// confirm bind email id 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>ConfirmBindEmailIDResult</returns>
        public ConfirmBindEmailIDResult ConfirmBindEmailID (ConfirmBindEmailIDInput input)
        {
             ApiResponse<ConfirmBindEmailIDResult> localVarResponse = ConfirmBindEmailIDWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirm bind email id 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>ApiResponse of ConfirmBindEmailIDResult</returns>
        public ApiResponse< ConfirmBindEmailIDResult > ConfirmBindEmailIDWithHttpInfo (ConfirmBindEmailIDInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->ConfirmBindEmailID");

            var localVarPath = "/settings/confirmBindEmailID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmBindEmailID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmBindEmailIDResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmBindEmailIDResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmBindEmailIDResult)));
            
        }

        /// <summary>
        /// confirm bind email id 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>Task of ConfirmBindEmailIDResult</returns>
        public async System.Threading.Tasks.Task<ConfirmBindEmailIDResult> ConfirmBindEmailIDAsync (ConfirmBindEmailIDInput input)
        {
             ApiResponse<ConfirmBindEmailIDResult> localVarResponse = await ConfirmBindEmailIDAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirm bind email id 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmBindEmailID Input</param>
        /// <returns>Task of ApiResponse (ConfirmBindEmailIDResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmBindEmailIDResult>> ConfirmBindEmailIDAsyncWithHttpInfo (ConfirmBindEmailIDInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->ConfirmBindEmailID");

            var localVarPath = "/settings/confirmBindEmailID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmBindEmailID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmBindEmailIDResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmBindEmailIDResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmBindEmailIDResult)));
            
        }

        /// <summary>
        /// confirm alias 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>ConfirmSecondaryEmailResult</returns>
        public ConfirmSecondaryEmailResult ConfirmSecondaryEmail (ConfirmSecondaryEmailInput input)
        {
             ApiResponse<ConfirmSecondaryEmailResult> localVarResponse = ConfirmSecondaryEmailWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirm alias 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>ApiResponse of ConfirmSecondaryEmailResult</returns>
        public ApiResponse< ConfirmSecondaryEmailResult > ConfirmSecondaryEmailWithHttpInfo (ConfirmSecondaryEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->ConfirmSecondaryEmail");

            var localVarPath = "/settings/confirmSecondaryEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmSecondaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmSecondaryEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmSecondaryEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmSecondaryEmailResult)));
            
        }

        /// <summary>
        /// confirm alias 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>Task of ConfirmSecondaryEmailResult</returns>
        public async System.Threading.Tasks.Task<ConfirmSecondaryEmailResult> ConfirmSecondaryEmailAsync (ConfirmSecondaryEmailInput input)
        {
             ApiResponse<ConfirmSecondaryEmailResult> localVarResponse = await ConfirmSecondaryEmailAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirm alias 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">ConfirmSecondaryEmail Input</param>
        /// <returns>Task of ApiResponse (ConfirmSecondaryEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmSecondaryEmailResult>> ConfirmSecondaryEmailAsyncWithHttpInfo (ConfirmSecondaryEmailInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->ConfirmSecondaryEmail");

            var localVarPath = "/settings/confirmSecondaryEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmSecondaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmSecondaryEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmSecondaryEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmSecondaryEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetLoginIDsResult</returns>
        public GetLoginIDsResult GetLoginIDs ()
        {
             ApiResponse<GetLoginIDsResult> localVarResponse = GetLoginIDsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetLoginIDsResult</returns>
        public ApiResponse< GetLoginIDsResult > GetLoginIDsWithHttpInfo ()
        {

            var localVarPath = "/settings/loginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLoginIDsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetLoginIDsResult</returns>
        public async System.Threading.Tasks.Task<GetLoginIDsResult> GetLoginIDsAsync ()
        {
             ApiResponse<GetLoginIDsResult> localVarResponse = await GetLoginIDsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetLoginIDsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLoginIDsResult>> GetLoginIDsAsyncWithHttpInfo ()
        {

            var localVarPath = "/settings/loginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLoginIDsResult)));
            
        }

        /// <summary>
        /// Gets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>GetSettingsResult</returns>
        public GetSettingsResult GetSettings (string options = null)
        {
             ApiResponse<GetSettingsResult> localVarResponse = GetSettingsWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSettingsResult</returns>
        public ApiResponse< GetSettingsResult > GetSettingsWithHttpInfo (string options = null)
        {

            var localVarPath = "/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSettingsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSettingsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSettingsResult)));
            
        }

        /// <summary>
        /// Gets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSettingsResult</returns>
        public async System.Threading.Tasks.Task<GetSettingsResult> GetSettingsAsync (string options = null)
        {
             ApiResponse<GetSettingsResult> localVarResponse = await GetSettingsAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">(JSON object &lt;&lt;SettingOptionsRecordV2&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSettingsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSettingsResult>> GetSettingsAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSettingsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSettingsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSettingsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>RegisterAPPInfoResult</returns>
        public RegisterAPPInfoResult RegisterAPPInfo (RegisterAPPInfoInput input)
        {
             ApiResponse<RegisterAPPInfoResult> localVarResponse = RegisterAPPInfoWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>ApiResponse of RegisterAPPInfoResult</returns>
        public ApiResponse< RegisterAPPInfoResult > RegisterAPPInfoWithHttpInfo (RegisterAPPInfoInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->RegisterAPPInfo");

            var localVarPath = "/settings/app/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAPPInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAPPInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAPPInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAPPInfoResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>Task of RegisterAPPInfoResult</returns>
        public async System.Threading.Tasks.Task<RegisterAPPInfoResult> RegisterAPPInfoAsync (RegisterAPPInfoInput input)
        {
             ApiResponse<RegisterAPPInfoResult> localVarResponse = await RegisterAPPInfoAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">RegisterAPPInfo Input</param>
        /// <returns>Task of ApiResponse (RegisterAPPInfoResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterAPPInfoResult>> RegisterAPPInfoAsyncWithHttpInfo (RegisterAPPInfoInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->RegisterAPPInfo");

            var localVarPath = "/settings/app/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAPPInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAPPInfoResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAPPInfoResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAPPInfoResult)));
            
        }

        /// <summary>
        /// Sets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>SaveSettingsResult</returns>
        public SaveSettingsResult SaveSettings (SaveSettingsInput input)
        {
             ApiResponse<SaveSettingsResult> localVarResponse = SaveSettingsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>ApiResponse of SaveSettingsResult</returns>
        public ApiResponse< SaveSettingsResult > SaveSettingsWithHttpInfo (SaveSettingsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->SaveSettings");

            var localVarPath = "/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveSettingsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveSettingsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveSettingsResult)));
            
        }

        /// <summary>
        /// Sets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>Task of SaveSettingsResult</returns>
        public async System.Threading.Tasks.Task<SaveSettingsResult> SaveSettingsAsync (SaveSettingsInput input)
        {
             ApiResponse<SaveSettingsResult> localVarResponse = await SaveSettingsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets settings 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">SaveSettings Input</param>
        /// <returns>Task of ApiResponse (SaveSettingsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveSettingsResult>> SaveSettingsAsyncWithHttpInfo (SaveSettingsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->SaveSettings");

            var localVarPath = "/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveSettingsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveSettingsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveSettingsResult)));
            
        }

        /// <summary>
        /// unbind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>UnbindLoginIDsResult</returns>
        public UnbindLoginIDsResult UnbindLoginIDs (UnbindLoginIDsInput input)
        {
             ApiResponse<UnbindLoginIDsResult> localVarResponse = UnbindLoginIDsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unbind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>ApiResponse of UnbindLoginIDsResult</returns>
        public ApiResponse< UnbindLoginIDsResult > UnbindLoginIDsWithHttpInfo (UnbindLoginIDsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->UnbindLoginIDs");

            var localVarPath = "/settings/unbindLoginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnbindLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnbindLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnbindLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnbindLoginIDsResult)));
            
        }

        /// <summary>
        /// unbind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>Task of UnbindLoginIDsResult</returns>
        public async System.Threading.Tasks.Task<UnbindLoginIDsResult> UnbindLoginIDsAsync (UnbindLoginIDsInput input)
        {
             ApiResponse<UnbindLoginIDsResult> localVarResponse = await UnbindLoginIDsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unbind login ids 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">UnbindLoginIDs Input</param>
        /// <returns>Task of ApiResponse (UnbindLoginIDsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnbindLoginIDsResult>> UnbindLoginIDsAsyncWithHttpInfo (UnbindLoginIDsInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SettingsApi->UnbindLoginIDs");

            var localVarPath = "/settings/unbindLoginIDs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnbindLoginIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnbindLoginIDsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnbindLoginIDsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnbindLoginIDsResult)));
            
        }

    }
}
