/* 
 * Vmoso API
 *
 * Vmoso API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VmosoApiClient.Client;
using VmosoApiClient.Model;

namespace VmosoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>AddContactSpacesResult</returns>
        AddContactSpacesResult AddContactSpaces (string contactType, AddContactSpacesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>ApiResponse of AddContactSpacesResult</returns>
        ApiResponse<AddContactSpacesResult> AddContactSpacesWithHttpInfo (string contactType, AddContactSpacesInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>AddObjectsResult</returns>
        AddObjectsResult AddObjects (string folderKey, AddObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>ApiResponse of AddObjectsResult</returns>
        ApiResponse<AddObjectsResult> AddObjectsWithHttpInfo (string folderKey, AddObjectsInput input);
        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>AddSpaceParticipantsResult</returns>
        AddSpaceParticipantsResult AddSpaceParticipants (string key, AddSpaceParticipantsInput input);

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>ApiResponse of AddSpaceParticipantsResult</returns>
        ApiResponse<AddSpaceParticipantsResult> AddSpaceParticipantsWithHttpInfo (string key, AddSpaceParticipantsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>CategorizeObjectsResult</returns>
        CategorizeObjectsResult CategorizeObjects (string key, CategorizeObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>ApiResponse of CategorizeObjectsResult</returns>
        ApiResponse<CategorizeObjectsResult> CategorizeObjectsWithHttpInfo (string key, CategorizeObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>CreateResult</returns>
        CreateResult Create (CreateInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>ApiResponse of CreateResult</returns>
        ApiResponse<CreateResult> CreateWithHttpInfo (CreateInput input);
        /// <summary>
        /// Create a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>CreateSpaceResult</returns>
        CreateSpaceResult CreateSpace (CreateSpaceInput input);

        /// <summary>
        /// Create a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>ApiResponse of CreateSpaceResult</returns>
        ApiResponse<CreateSpaceResult> CreateSpaceWithHttpInfo (CreateSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>DeleteSpaceResult</returns>
        DeleteSpaceResult DeleteSpace (string folderKey, DeleteSpaceInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>ApiResponse of DeleteSpaceResult</returns>
        ApiResponse<DeleteSpaceResult> DeleteSpaceWithHttpInfo (string folderKey, DeleteSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>DeleteSpacesResult</returns>
        DeleteSpacesResult DeleteSpaces (DeleteSpacesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>ApiResponse of DeleteSpacesResult</returns>
        ApiResponse<DeleteSpacesResult> DeleteSpacesWithHttpInfo (DeleteSpacesInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>FolderMultishareResult</returns>
        FolderMultishareResult FolderMultishare (FolderMultishareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>ApiResponse of FolderMultishareResult</returns>
        ApiResponse<FolderMultishareResult> FolderMultishareWithHttpInfo (FolderMultishareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetContentResult</returns>
        GetContentResult GetContent (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetContentResult</returns>
        ApiResponse<GetContentResult> GetContentWithHttpInfo (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetContentMarksResult</returns>
        GetContentMarksResult GetContentMarks (string itemKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetContentMarksResult</returns>
        ApiResponse<GetContentMarksResult> GetContentMarksWithHttpInfo (string itemKey, string spaceId = null);
        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCorporateSpacesResult</returns>
        GetCorporateSpacesResult GetCorporateSpaces ();

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCorporateSpacesResult</returns>
        ApiResponse<GetCorporateSpacesResult> GetCorporateSpacesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetFullPathResult</returns>
        GetFullPathResult GetFullPath (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetFullPathResult</returns>
        ApiResponse<GetFullPathResult> GetFullPathWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetParentSpacesResult</returns>
        GetParentSpacesResult GetParentSpaces (string folderKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetParentSpacesResult</returns>
        ApiResponse<GetParentSpacesResult> GetParentSpacesWithHttpInfo (string folderKey, string spaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetPublicSpaceResult</returns>
        GetPublicSpaceResult GetPublicSpace (string folderKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetPublicSpaceResult</returns>
        ApiResponse<GetPublicSpaceResult> GetPublicSpaceWithHttpInfo (string folderKey, string spaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSharedSpaceResult</returns>
        GetSharedSpaceResult GetSharedSpace (string key, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSharedSpaceResult</returns>
        ApiResponse<GetSharedSpaceResult> GetSharedSpaceWithHttpInfo (string key, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSpaceResult</returns>
        GetSpaceResult GetSpace (string folderKey, string spaceId = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSpaceResult</returns>
        ApiResponse<GetSpaceResult> GetSpaceWithHttpInfo (string folderKey, string spaceId = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>GetSpaceUserByEmailResult</returns>
        GetSpaceUserByEmailResult GetSpaceUserByEmail (string key, List<string> email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>ApiResponse of GetSpaceUserByEmailResult</returns>
        ApiResponse<GetSpaceUserByEmailResult> GetSpaceUserByEmailWithHttpInfo (string key, List<string> email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSpacesResult</returns>
        GetSpacesResult GetSpaces (string tag, List<string> keys = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSpacesResult</returns>
        ApiResponse<GetSpacesResult> GetSpacesWithHttpInfo (string tag, List<string> keys = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>GetSpacesForContentsResult</returns>
        GetSpacesForContentsResult GetSpacesForContents (List<string> contentKeys, string spaceKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>ApiResponse of GetSpacesForContentsResult</returns>
        ApiResponse<GetSpacesForContentsResult> GetSpacesForContentsWithHttpInfo (List<string> contentKeys, string spaceKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>GetSubSpacesResult</returns>
        GetSubSpacesResult GetSubSpaces (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>ApiResponse of GetSubSpacesResult</returns>
        ApiResponse<GetSubSpacesResult> GetSubSpacesWithHttpInfo (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>GetUserRolesInSpaceResult</returns>
        GetUserRolesInSpaceResult GetUserRolesInSpace (string key, List<string> userKeys = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>ApiResponse of GetUserRolesInSpaceResult</returns>
        ApiResponse<GetUserRolesInSpaceResult> GetUserRolesInSpaceWithHttpInfo (string key, List<string> userKeys = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>GetWallResult</returns>
        GetWallResult GetWall (string spaceId, string folderKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>ApiResponse of GetWallResult</returns>
        ApiResponse<GetWallResult> GetWallWithHttpInfo (string spaceId, string folderKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>LeaveSpaceResult</returns>
        LeaveSpaceResult LeaveSpace (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of LeaveSpaceResult</returns>
        ApiResponse<LeaveSpaceResult> LeaveSpaceWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ListAssociationItemResult</returns>
        ListAssociationItemResult ListAssociationItem (string key, string association, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ListAssociationItemResult</returns>
        ApiResponse<ListAssociationItemResult> ListAssociationItemWithHttpInfo (string key, string association, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>MarkContentsResult</returns>
        MarkContentsResult MarkContents (string markType, MarkContentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>ApiResponse of MarkContentsResult</returns>
        ApiResponse<MarkContentsResult> MarkContentsWithHttpInfo (string markType, MarkContentsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>MoveObjectsResult</returns>
        MoveObjectsResult MoveObjects (string fromFolderKey, MoveObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>ApiResponse of MoveObjectsResult</returns>
        ApiResponse<MoveObjectsResult> MoveObjectsWithHttpInfo (string fromFolderKey, MoveObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>MoveSpaceResult</returns>
        MoveSpaceResult MoveSpace (string fromFolderKey, MoveSpaceInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>ApiResponse of MoveSpaceResult</returns>
        ApiResponse<MoveSpaceResult> MoveSpaceWithHttpInfo (string fromFolderKey, MoveSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>MultishareResult</returns>
        MultishareResult Multishare (MultishareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>ApiResponse of MultishareResult</returns>
        ApiResponse<MultishareResult> MultishareWithHttpInfo (MultishareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>RemoveAllMarksResult</returns>
        RemoveAllMarksResult RemoveAllMarks (string markType, RemoveAllMarksInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>ApiResponse of RemoveAllMarksResult</returns>
        ApiResponse<RemoveAllMarksResult> RemoveAllMarksWithHttpInfo (string markType, RemoveAllMarksInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>RemoveObjectsResult</returns>
        RemoveObjectsResult RemoveObjects (string folderKey, RemoveObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>ApiResponse of RemoveObjectsResult</returns>
        ApiResponse<RemoveObjectsResult> RemoveObjectsWithHttpInfo (string folderKey, RemoveObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>RemoveSpaceParticipantsResult</returns>
        RemoveSpaceParticipantsResult RemoveSpaceParticipants (string key, RemoveSpaceParticipantsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>ApiResponse of RemoveSpaceParticipantsResult</returns>
        ApiResponse<RemoveSpaceParticipantsResult> RemoveSpaceParticipantsWithHttpInfo (string key, RemoveSpaceParticipantsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>ShareResult</returns>
        ShareResult Share (ShareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>ApiResponse of ShareResult</returns>
        ApiResponse<ShareResult> ShareWithHttpInfo (ShareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>ShareObjectResult</returns>
        ShareObjectResult ShareObject (string key, ShareObjectInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>ApiResponse of ShareObjectResult</returns>
        ApiResponse<ShareObjectResult> ShareObjectWithHttpInfo (string key, ShareObjectInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>UnmarkContentsResult</returns>
        UnmarkContentsResult UnmarkContents (string markType, UnmarkContentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>ApiResponse of UnmarkContentsResult</returns>
        ApiResponse<UnmarkContentsResult> UnmarkContentsWithHttpInfo (string markType, UnmarkContentsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>UnshareResult</returns>
        UnshareResult Unshare (UnshareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>ApiResponse of UnshareResult</returns>
        ApiResponse<UnshareResult> UnshareWithHttpInfo (UnshareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>UnshareObjectResult</returns>
        UnshareObjectResult UnshareObject (string key, UnshareObjectInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>ApiResponse of UnshareObjectResult</returns>
        ApiResponse<UnshareObjectResult> UnshareObjectWithHttpInfo (string key, UnshareObjectInput input);
        /// <summary>
        /// Update name and desc of folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>UpdateSpaceResult</returns>
        UpdateSpaceResult UpdateSpace (string folderKey, UpdateSpaceInput input);

        /// <summary>
        /// Update name and desc of folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>ApiResponse of UpdateSpaceResult</returns>
        ApiResponse<UpdateSpaceResult> UpdateSpaceWithHttpInfo (string folderKey, UpdateSpaceInput input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>Task of AddContactSpacesResult</returns>
        System.Threading.Tasks.Task<AddContactSpacesResult> AddContactSpacesAsync (string contactType, AddContactSpacesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>Task of ApiResponse (AddContactSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddContactSpacesResult>> AddContactSpacesAsyncWithHttpInfo (string contactType, AddContactSpacesInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>Task of AddObjectsResult</returns>
        System.Threading.Tasks.Task<AddObjectsResult> AddObjectsAsync (string folderKey, AddObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>Task of ApiResponse (AddObjectsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddObjectsResult>> AddObjectsAsyncWithHttpInfo (string folderKey, AddObjectsInput input);
        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>Task of AddSpaceParticipantsResult</returns>
        System.Threading.Tasks.Task<AddSpaceParticipantsResult> AddSpaceParticipantsAsync (string key, AddSpaceParticipantsInput input);

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>Task of ApiResponse (AddSpaceParticipantsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddSpaceParticipantsResult>> AddSpaceParticipantsAsyncWithHttpInfo (string key, AddSpaceParticipantsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>Task of CategorizeObjectsResult</returns>
        System.Threading.Tasks.Task<CategorizeObjectsResult> CategorizeObjectsAsync (string key, CategorizeObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>Task of ApiResponse (CategorizeObjectsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategorizeObjectsResult>> CategorizeObjectsAsyncWithHttpInfo (string key, CategorizeObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>Task of CreateResult</returns>
        System.Threading.Tasks.Task<CreateResult> CreateAsync (CreateInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>Task of ApiResponse (CreateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResult>> CreateAsyncWithHttpInfo (CreateInput input);
        /// <summary>
        /// Create a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>Task of CreateSpaceResult</returns>
        System.Threading.Tasks.Task<CreateSpaceResult> CreateSpaceAsync (CreateSpaceInput input);

        /// <summary>
        /// Create a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>Task of ApiResponse (CreateSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSpaceResult>> CreateSpaceAsyncWithHttpInfo (CreateSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>Task of DeleteSpaceResult</returns>
        System.Threading.Tasks.Task<DeleteSpaceResult> DeleteSpaceAsync (string folderKey, DeleteSpaceInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>Task of ApiResponse (DeleteSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSpaceResult>> DeleteSpaceAsyncWithHttpInfo (string folderKey, DeleteSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>Task of DeleteSpacesResult</returns>
        System.Threading.Tasks.Task<DeleteSpacesResult> DeleteSpacesAsync (DeleteSpacesInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>Task of ApiResponse (DeleteSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSpacesResult>> DeleteSpacesAsyncWithHttpInfo (DeleteSpacesInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>Task of FolderMultishareResult</returns>
        System.Threading.Tasks.Task<FolderMultishareResult> FolderMultishareAsync (FolderMultishareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>Task of ApiResponse (FolderMultishareResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderMultishareResult>> FolderMultishareAsyncWithHttpInfo (FolderMultishareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetContentResult</returns>
        System.Threading.Tasks.Task<GetContentResult> GetContentAsync (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetContentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContentResult>> GetContentAsyncWithHttpInfo (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetContentMarksResult</returns>
        System.Threading.Tasks.Task<GetContentMarksResult> GetContentMarksAsync (string itemKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetContentMarksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContentMarksResult>> GetContentMarksAsyncWithHttpInfo (string itemKey, string spaceId = null);
        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCorporateSpacesResult</returns>
        System.Threading.Tasks.Task<GetCorporateSpacesResult> GetCorporateSpacesAsync ();

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCorporateSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporateSpacesResult>> GetCorporateSpacesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetFullPathResult</returns>
        System.Threading.Tasks.Task<GetFullPathResult> GetFullPathAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetFullPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFullPathResult>> GetFullPathAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetParentSpacesResult</returns>
        System.Threading.Tasks.Task<GetParentSpacesResult> GetParentSpacesAsync (string folderKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetParentSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetParentSpacesResult>> GetParentSpacesAsyncWithHttpInfo (string folderKey, string spaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetPublicSpaceResult</returns>
        System.Threading.Tasks.Task<GetPublicSpaceResult> GetPublicSpaceAsync (string folderKey, string spaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetPublicSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPublicSpaceResult>> GetPublicSpaceAsyncWithHttpInfo (string folderKey, string spaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSharedSpaceResult</returns>
        System.Threading.Tasks.Task<GetSharedSpaceResult> GetSharedSpaceAsync (string key, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSharedSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSharedSpaceResult>> GetSharedSpaceAsyncWithHttpInfo (string key, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSpaceResult</returns>
        System.Threading.Tasks.Task<GetSpaceResult> GetSpaceAsync (string folderKey, string spaceId = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpaceResult>> GetSpaceAsyncWithHttpInfo (string folderKey, string spaceId = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>Task of GetSpaceUserByEmailResult</returns>
        System.Threading.Tasks.Task<GetSpaceUserByEmailResult> GetSpaceUserByEmailAsync (string key, List<string> email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (GetSpaceUserByEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpaceUserByEmailResult>> GetSpaceUserByEmailAsyncWithHttpInfo (string key, List<string> email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSpacesResult</returns>
        System.Threading.Tasks.Task<GetSpacesResult> GetSpacesAsync (string tag, List<string> keys = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpacesResult>> GetSpacesAsyncWithHttpInfo (string tag, List<string> keys = null, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of GetSpacesForContentsResult</returns>
        System.Threading.Tasks.Task<GetSpacesForContentsResult> GetSpacesForContentsAsync (List<string> contentKeys, string spaceKey = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSpacesForContentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpacesForContentsResult>> GetSpacesForContentsAsyncWithHttpInfo (List<string> contentKeys, string spaceKey = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of GetSubSpacesResult</returns>
        System.Threading.Tasks.Task<GetSubSpacesResult> GetSubSpacesAsync (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSubSpacesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubSpacesResult>> GetSubSpacesAsyncWithHttpInfo (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>Task of GetUserRolesInSpaceResult</returns>
        System.Threading.Tasks.Task<GetUserRolesInSpaceResult> GetUserRolesInSpaceAsync (string key, List<string> userKeys = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>Task of ApiResponse (GetUserRolesInSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserRolesInSpaceResult>> GetUserRolesInSpaceAsyncWithHttpInfo (string key, List<string> userKeys = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>Task of GetWallResult</returns>
        System.Threading.Tasks.Task<GetWallResult> GetWallAsync (string spaceId, string folderKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>Task of ApiResponse (GetWallResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWallResult>> GetWallAsyncWithHttpInfo (string spaceId, string folderKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of LeaveSpaceResult</returns>
        System.Threading.Tasks.Task<LeaveSpaceResult> LeaveSpaceAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (LeaveSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveSpaceResult>> LeaveSpaceAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ListAssociationItemResult</returns>
        System.Threading.Tasks.Task<ListAssociationItemResult> ListAssociationItemAsync (string key, string association, string options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ListAssociationItemResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssociationItemResult>> ListAssociationItemAsyncWithHttpInfo (string key, string association, string options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>Task of MarkContentsResult</returns>
        System.Threading.Tasks.Task<MarkContentsResult> MarkContentsAsync (string markType, MarkContentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>Task of ApiResponse (MarkContentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkContentsResult>> MarkContentsAsyncWithHttpInfo (string markType, MarkContentsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>Task of MoveObjectsResult</returns>
        System.Threading.Tasks.Task<MoveObjectsResult> MoveObjectsAsync (string fromFolderKey, MoveObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>Task of ApiResponse (MoveObjectsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MoveObjectsResult>> MoveObjectsAsyncWithHttpInfo (string fromFolderKey, MoveObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>Task of MoveSpaceResult</returns>
        System.Threading.Tasks.Task<MoveSpaceResult> MoveSpaceAsync (string fromFolderKey, MoveSpaceInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>Task of ApiResponse (MoveSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MoveSpaceResult>> MoveSpaceAsyncWithHttpInfo (string fromFolderKey, MoveSpaceInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>Task of MultishareResult</returns>
        System.Threading.Tasks.Task<MultishareResult> MultishareAsync (MultishareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>Task of ApiResponse (MultishareResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultishareResult>> MultishareAsyncWithHttpInfo (MultishareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>Task of RemoveAllMarksResult</returns>
        System.Threading.Tasks.Task<RemoveAllMarksResult> RemoveAllMarksAsync (string markType, RemoveAllMarksInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>Task of ApiResponse (RemoveAllMarksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveAllMarksResult>> RemoveAllMarksAsyncWithHttpInfo (string markType, RemoveAllMarksInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>Task of RemoveObjectsResult</returns>
        System.Threading.Tasks.Task<RemoveObjectsResult> RemoveObjectsAsync (string folderKey, RemoveObjectsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>Task of ApiResponse (RemoveObjectsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveObjectsResult>> RemoveObjectsAsyncWithHttpInfo (string folderKey, RemoveObjectsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>Task of RemoveSpaceParticipantsResult</returns>
        System.Threading.Tasks.Task<RemoveSpaceParticipantsResult> RemoveSpaceParticipantsAsync (string key, RemoveSpaceParticipantsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>Task of ApiResponse (RemoveSpaceParticipantsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveSpaceParticipantsResult>> RemoveSpaceParticipantsAsyncWithHttpInfo (string key, RemoveSpaceParticipantsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>Task of ShareResult</returns>
        System.Threading.Tasks.Task<ShareResult> ShareAsync (ShareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>Task of ApiResponse (ShareResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareResult>> ShareAsyncWithHttpInfo (ShareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>Task of ShareObjectResult</returns>
        System.Threading.Tasks.Task<ShareObjectResult> ShareObjectAsync (string key, ShareObjectInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>Task of ApiResponse (ShareObjectResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareObjectResult>> ShareObjectAsyncWithHttpInfo (string key, ShareObjectInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>Task of UnmarkContentsResult</returns>
        System.Threading.Tasks.Task<UnmarkContentsResult> UnmarkContentsAsync (string markType, UnmarkContentsInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>Task of ApiResponse (UnmarkContentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnmarkContentsResult>> UnmarkContentsAsyncWithHttpInfo (string markType, UnmarkContentsInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>Task of UnshareResult</returns>
        System.Threading.Tasks.Task<UnshareResult> UnshareAsync (UnshareInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>Task of ApiResponse (UnshareResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnshareResult>> UnshareAsyncWithHttpInfo (UnshareInput input);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>Task of UnshareObjectResult</returns>
        System.Threading.Tasks.Task<UnshareObjectResult> UnshareObjectAsync (string key, UnshareObjectInput input);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>Task of ApiResponse (UnshareObjectResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnshareObjectResult>> UnshareObjectAsyncWithHttpInfo (string key, UnshareObjectInput input);
        /// <summary>
        /// Update name and desc of folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>Task of UpdateSpaceResult</returns>
        System.Threading.Tasks.Task<UpdateSpaceResult> UpdateSpaceAsync (string folderKey, UpdateSpaceInput input);

        /// <summary>
        /// Update name and desc of folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>Task of ApiResponse (UpdateSpaceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSpaceResult>> UpdateSpaceAsyncWithHttpInfo (string folderKey, UpdateSpaceInput input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpaceApi : ISpaceApi
    {
        private VmosoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceApi"/> class.
        /// </summary>
        /// <param name="configuration">An ApiClient</param>
        /// <returns></returns>
        public SpaceApi(ApiClient apiClient)
        {
            this.Configuration = apiClient.Configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            //if (Configuration.ApiClient.Configuration == null)
            //{
            this.Configuration.ApiClient.Configuration = this.Configuration;
            //}
        }
 
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceApi"/> class.
        /// </summary>
        /// <param name="basePath">A base path</param>
        /// <returns></returns>
        public SpaceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpaceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VmosoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VmosoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>AddContactSpacesResult</returns>
        public AddContactSpacesResult AddContactSpaces (string contactType, AddContactSpacesInput input)
        {
             ApiResponse<AddContactSpacesResult> localVarResponse = AddContactSpacesWithHttpInfo(contactType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>ApiResponse of AddContactSpacesResult</returns>
        public ApiResponse< AddContactSpacesResult > AddContactSpacesWithHttpInfo (string contactType, AddContactSpacesInput input)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling SpaceApi->AddContactSpaces");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddContactSpaces");

            var localVarPath = "/folders/contacts/{contactType}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactType != null) localVarPathParams.Add("contactType", Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddContactSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddContactSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddContactSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>Task of AddContactSpacesResult</returns>
        public async System.Threading.Tasks.Task<AddContactSpacesResult> AddContactSpacesAsync (string contactType, AddContactSpacesInput input)
        {
             ApiResponse<AddContactSpacesResult> localVarResponse = await AddContactSpacesAsyncWithHttpInfo(contactType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <param name="input">AddContactSpaces Input</param>
        /// <returns>Task of ApiResponse (AddContactSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddContactSpacesResult>> AddContactSpacesAsyncWithHttpInfo (string contactType, AddContactSpacesInput input)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling SpaceApi->AddContactSpaces");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddContactSpaces");

            var localVarPath = "/folders/contacts/{contactType}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactType != null) localVarPathParams.Add("contactType", Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddContactSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddContactSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddContactSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>AddObjectsResult</returns>
        public AddObjectsResult AddObjects (string folderKey, AddObjectsInput input)
        {
             ApiResponse<AddObjectsResult> localVarResponse = AddObjectsWithHttpInfo(folderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>ApiResponse of AddObjectsResult</returns>
        public ApiResponse< AddObjectsResult > AddObjectsWithHttpInfo (string folderKey, AddObjectsInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->AddObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddObjects");

            var localVarPath = "/folders/{folderKey}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>Task of AddObjectsResult</returns>
        public async System.Threading.Tasks.Task<AddObjectsResult> AddObjectsAsync (string folderKey, AddObjectsInput input)
        {
             ApiResponse<AddObjectsResult> localVarResponse = await AddObjectsAsyncWithHttpInfo(folderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">AddObjects Input</param>
        /// <returns>Task of ApiResponse (AddObjectsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddObjectsResult>> AddObjectsAsyncWithHttpInfo (string folderKey, AddObjectsInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->AddObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddObjects");

            var localVarPath = "/folders/{folderKey}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddObjectsResult)));
            
        }

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>AddSpaceParticipantsResult</returns>
        public AddSpaceParticipantsResult AddSpaceParticipants (string key, AddSpaceParticipantsInput input)
        {
             ApiResponse<AddSpaceParticipantsResult> localVarResponse = AddSpaceParticipantsWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>ApiResponse of AddSpaceParticipantsResult</returns>
        public ApiResponse< AddSpaceParticipantsResult > AddSpaceParticipantsWithHttpInfo (string key, AddSpaceParticipantsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->AddSpaceParticipants");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddSpaceParticipants");

            var localVarPath = "/folders/{key}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSpaceParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddSpaceParticipantsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddSpaceParticipantsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddSpaceParticipantsResult)));
            
        }

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>Task of AddSpaceParticipantsResult</returns>
        public async System.Threading.Tasks.Task<AddSpaceParticipantsResult> AddSpaceParticipantsAsync (string key, AddSpaceParticipantsInput input)
        {
             ApiResponse<AddSpaceParticipantsResult> localVarResponse = await AddSpaceParticipantsAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add participant to space.Participant can be members or admins,Also this support managing white and black list particpant 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">AddSpaceParticipants Input</param>
        /// <returns>Task of ApiResponse (AddSpaceParticipantsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddSpaceParticipantsResult>> AddSpaceParticipantsAsyncWithHttpInfo (string key, AddSpaceParticipantsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->AddSpaceParticipants");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->AddSpaceParticipants");

            var localVarPath = "/folders/{key}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSpaceParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddSpaceParticipantsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddSpaceParticipantsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddSpaceParticipantsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>CategorizeObjectsResult</returns>
        public CategorizeObjectsResult CategorizeObjects (string key, CategorizeObjectsInput input)
        {
             ApiResponse<CategorizeObjectsResult> localVarResponse = CategorizeObjectsWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>ApiResponse of CategorizeObjectsResult</returns>
        public ApiResponse< CategorizeObjectsResult > CategorizeObjectsWithHttpInfo (string key, CategorizeObjectsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->CategorizeObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->CategorizeObjects");

            var localVarPath = "/folders/{key}/categorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategorizeObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategorizeObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategorizeObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>Task of CategorizeObjectsResult</returns>
        public async System.Threading.Tasks.Task<CategorizeObjectsResult> CategorizeObjectsAsync (string key, CategorizeObjectsInput input)
        {
             ApiResponse<CategorizeObjectsResult> localVarResponse = await CategorizeObjectsAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">CategorizeObjects Input</param>
        /// <returns>Task of ApiResponse (CategorizeObjectsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategorizeObjectsResult>> CategorizeObjectsAsyncWithHttpInfo (string key, CategorizeObjectsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->CategorizeObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->CategorizeObjects");

            var localVarPath = "/folders/{key}/categorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategorizeObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategorizeObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategorizeObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>CreateResult</returns>
        public CreateResult Create (CreateInput input)
        {
             ApiResponse<CreateResult> localVarResponse = CreateWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>ApiResponse of CreateResult</returns>
        public ApiResponse< CreateResult > CreateWithHttpInfo (CreateInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Create");

            var localVarPath = "/space/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>Task of CreateResult</returns>
        public async System.Threading.Tasks.Task<CreateResult> CreateAsync (CreateInput input)
        {
             ApiResponse<CreateResult> localVarResponse = await CreateAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Create Input</param>
        /// <returns>Task of ApiResponse (CreateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResult>> CreateAsyncWithHttpInfo (CreateInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Create");

            var localVarPath = "/space/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResult)));
            
        }

        /// <summary>
        /// Create a folder. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>CreateSpaceResult</returns>
        public CreateSpaceResult CreateSpace (CreateSpaceInput input)
        {
             ApiResponse<CreateSpaceResult> localVarResponse = CreateSpaceWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>ApiResponse of CreateSpaceResult</returns>
        public ApiResponse< CreateSpaceResult > CreateSpaceWithHttpInfo (CreateSpaceInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->CreateSpace");

            var localVarPath = "/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSpaceResult)));
            
        }

        /// <summary>
        /// Create a folder. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>Task of CreateSpaceResult</returns>
        public async System.Threading.Tasks.Task<CreateSpaceResult> CreateSpaceAsync (CreateSpaceInput input)
        {
             ApiResponse<CreateSpaceResult> localVarResponse = await CreateSpaceAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a folder. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">CreateSpace Input</param>
        /// <returns>Task of ApiResponse (CreateSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSpaceResult>> CreateSpaceAsyncWithHttpInfo (CreateSpaceInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->CreateSpace");

            var localVarPath = "/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>DeleteSpaceResult</returns>
        public DeleteSpaceResult DeleteSpace (string folderKey, DeleteSpaceInput input)
        {
             ApiResponse<DeleteSpaceResult> localVarResponse = DeleteSpaceWithHttpInfo(folderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>ApiResponse of DeleteSpaceResult</returns>
        public ApiResponse< DeleteSpaceResult > DeleteSpaceWithHttpInfo (string folderKey, DeleteSpaceInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->DeleteSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->DeleteSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>Task of DeleteSpaceResult</returns>
        public async System.Threading.Tasks.Task<DeleteSpaceResult> DeleteSpaceAsync (string folderKey, DeleteSpaceInput input)
        {
             ApiResponse<DeleteSpaceResult> localVarResponse = await DeleteSpaceAsyncWithHttpInfo(folderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">DeleteSpace Input</param>
        /// <returns>Task of ApiResponse (DeleteSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteSpaceResult>> DeleteSpaceAsyncWithHttpInfo (string folderKey, DeleteSpaceInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->DeleteSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->DeleteSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>DeleteSpacesResult</returns>
        public DeleteSpacesResult DeleteSpaces (DeleteSpacesInput input)
        {
             ApiResponse<DeleteSpacesResult> localVarResponse = DeleteSpacesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>ApiResponse of DeleteSpacesResult</returns>
        public ApiResponse< DeleteSpacesResult > DeleteSpacesWithHttpInfo (DeleteSpacesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->DeleteSpaces");

            var localVarPath = "/folders/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>Task of DeleteSpacesResult</returns>
        public async System.Threading.Tasks.Task<DeleteSpacesResult> DeleteSpacesAsync (DeleteSpacesInput input)
        {
             ApiResponse<DeleteSpacesResult> localVarResponse = await DeleteSpacesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">DeleteSpaces Input</param>
        /// <returns>Task of ApiResponse (DeleteSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteSpacesResult>> DeleteSpacesAsyncWithHttpInfo (DeleteSpacesInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->DeleteSpaces");

            var localVarPath = "/folders/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>FolderMultishareResult</returns>
        public FolderMultishareResult FolderMultishare (FolderMultishareInput input)
        {
             ApiResponse<FolderMultishareResult> localVarResponse = FolderMultishareWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>ApiResponse of FolderMultishareResult</returns>
        public ApiResponse< FolderMultishareResult > FolderMultishareWithHttpInfo (FolderMultishareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->FolderMultishare");

            var localVarPath = "/folders/multishare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FolderMultishare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMultishareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMultishareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMultishareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>Task of FolderMultishareResult</returns>
        public async System.Threading.Tasks.Task<FolderMultishareResult> FolderMultishareAsync (FolderMultishareInput input)
        {
             ApiResponse<FolderMultishareResult> localVarResponse = await FolderMultishareAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">FolderMultishare Input</param>
        /// <returns>Task of ApiResponse (FolderMultishareResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderMultishareResult>> FolderMultishareAsyncWithHttpInfo (FolderMultishareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->FolderMultishare");

            var localVarPath = "/folders/multishare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FolderMultishare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMultishareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMultishareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMultishareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>GetContentResult</returns>
        public GetContentResult GetContent (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null)
        {
             ApiResponse<GetContentResult> localVarResponse = GetContentWithHttpInfo(folderKey, contentType, spaceId, option, pg);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetContentResult</returns>
        public ApiResponse< GetContentResult > GetContentWithHttpInfo (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetContent");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SpaceApi->GetContent");

            var localVarPath = "/folders/{folderKey}/contents/{contentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (contentType != null) localVarPathParams.Add("contentType", Configuration.ApiClient.ParameterToString(contentType)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (option != null) localVarQueryParams.Add("option", Configuration.ApiClient.ParameterToString(option)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetContentResult</returns>
        public async System.Threading.Tasks.Task<GetContentResult> GetContentAsync (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null)
        {
             ApiResponse<GetContentResult> localVarResponse = await GetContentAsyncWithHttpInfo(folderKey, contentType, spaceId, option, pg);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="contentType"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="option">(JSON object &lt;&lt;FolderOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetContentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContentResult>> GetContentAsyncWithHttpInfo (string folderKey, string contentType, string spaceId = null, string option = null, string pg = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetContent");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SpaceApi->GetContent");

            var localVarPath = "/folders/{folderKey}/contents/{contentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (contentType != null) localVarPathParams.Add("contentType", Configuration.ApiClient.ParameterToString(contentType)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (option != null) localVarQueryParams.Add("option", Configuration.ApiClient.ParameterToString(option)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetContentMarksResult</returns>
        public GetContentMarksResult GetContentMarks (string itemKey, string spaceId = null)
        {
             ApiResponse<GetContentMarksResult> localVarResponse = GetContentMarksWithHttpInfo(itemKey, spaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetContentMarksResult</returns>
        public ApiResponse< GetContentMarksResult > GetContentMarksWithHttpInfo (string itemKey, string spaceId = null)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling SpaceApi->GetContentMarks");

            var localVarPath = "/folders/type/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentMarksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetContentMarksResult</returns>
        public async System.Threading.Tasks.Task<GetContentMarksResult> GetContentMarksAsync (string itemKey, string spaceId = null)
        {
             ApiResponse<GetContentMarksResult> localVarResponse = await GetContentMarksAsyncWithHttpInfo(itemKey, spaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetContentMarksResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContentMarksResult>> GetContentMarksAsyncWithHttpInfo (string itemKey, string spaceId = null)
        {
            // verify the required parameter 'itemKey' is set
            if (itemKey == null)
                throw new ApiException(400, "Missing required parameter 'itemKey' when calling SpaceApi->GetContentMarks");

            var localVarPath = "/folders/type/{itemKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemKey != null) localVarPathParams.Add("itemKey", Configuration.ApiClient.ParameterToString(itemKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentMarksResult)));
            
        }

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCorporateSpacesResult</returns>
        public GetCorporateSpacesResult GetCorporateSpaces ()
        {
             ApiResponse<GetCorporateSpacesResult> localVarResponse = GetCorporateSpacesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCorporateSpacesResult</returns>
        public ApiResponse< GetCorporateSpacesResult > GetCorporateSpacesWithHttpInfo ()
        {

            var localVarPath = "/folders/corporate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporateSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateSpacesResult)));
            
        }

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCorporateSpacesResult</returns>
        public async System.Threading.Tasks.Task<GetCorporateSpacesResult> GetCorporateSpacesAsync ()
        {
             ApiResponse<GetCorporateSpacesResult> localVarResponse = await GetCorporateSpacesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve corporate hotspots that user can administer.Can be used for ucw hotspot picker. 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCorporateSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporateSpacesResult>> GetCorporateSpacesAsyncWithHttpInfo ()
        {

            var localVarPath = "/folders/corporate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporateSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>GetFullPathResult</returns>
        public GetFullPathResult GetFullPath (string key)
        {
             ApiResponse<GetFullPathResult> localVarResponse = GetFullPathWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of GetFullPathResult</returns>
        public ApiResponse< GetFullPathResult > GetFullPathWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetFullPath");

            var localVarPath = "/folders/{key}/getpath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFullPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFullPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFullPathResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of GetFullPathResult</returns>
        public async System.Threading.Tasks.Task<GetFullPathResult> GetFullPathAsync (string key)
        {
             ApiResponse<GetFullPathResult> localVarResponse = await GetFullPathAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (GetFullPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFullPathResult>> GetFullPathAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetFullPath");

            var localVarPath = "/folders/{key}/getpath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFullPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFullPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFullPathResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetParentSpacesResult</returns>
        public GetParentSpacesResult GetParentSpaces (string folderKey, string spaceId = null)
        {
             ApiResponse<GetParentSpacesResult> localVarResponse = GetParentSpacesWithHttpInfo(folderKey, spaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetParentSpacesResult</returns>
        public ApiResponse< GetParentSpacesResult > GetParentSpacesWithHttpInfo (string folderKey, string spaceId = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetParentSpaces");

            var localVarPath = "/folders/{folderKey}/parents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetParentSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetParentSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetParentSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetParentSpacesResult</returns>
        public async System.Threading.Tasks.Task<GetParentSpacesResult> GetParentSpacesAsync (string folderKey, string spaceId = null)
        {
             ApiResponse<GetParentSpacesResult> localVarResponse = await GetParentSpacesAsyncWithHttpInfo(folderKey, spaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetParentSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetParentSpacesResult>> GetParentSpacesAsyncWithHttpInfo (string folderKey, string spaceId = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetParentSpaces");

            var localVarPath = "/folders/{folderKey}/parents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetParentSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetParentSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetParentSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>GetPublicSpaceResult</returns>
        public GetPublicSpaceResult GetPublicSpace (string folderKey, string spaceId = null)
        {
             ApiResponse<GetPublicSpaceResult> localVarResponse = GetPublicSpaceWithHttpInfo(folderKey, spaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>ApiResponse of GetPublicSpaceResult</returns>
        public ApiResponse< GetPublicSpaceResult > GetPublicSpaceWithHttpInfo (string folderKey, string spaceId = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetPublicSpace");

            var localVarPath = "/folders/{folderKey}/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPublicSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPublicSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPublicSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of GetPublicSpaceResult</returns>
        public async System.Threading.Tasks.Task<GetPublicSpaceResult> GetPublicSpaceAsync (string folderKey, string spaceId = null)
        {
             ApiResponse<GetPublicSpaceResult> localVarResponse = await GetPublicSpaceAsyncWithHttpInfo(folderKey, spaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetPublicSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPublicSpaceResult>> GetPublicSpaceAsyncWithHttpInfo (string folderKey, string spaceId = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetPublicSpace");

            var localVarPath = "/folders/{folderKey}/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPublicSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPublicSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPublicSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSharedSpaceResult</returns>
        public GetSharedSpaceResult GetSharedSpace (string key, string options = null)
        {
             ApiResponse<GetSharedSpaceResult> localVarResponse = GetSharedSpaceWithHttpInfo(key, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSharedSpaceResult</returns>
        public ApiResponse< GetSharedSpaceResult > GetSharedSpaceWithHttpInfo (string key, string options = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSharedSpace");

            var localVarPath = "/space/{key}/sharedspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSharedSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSharedSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSharedSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSharedSpaceResult</returns>
        public async System.Threading.Tasks.Task<GetSharedSpaceResult> GetSharedSpaceAsync (string key, string options = null)
        {
             ApiResponse<GetSharedSpaceResult> localVarResponse = await GetSharedSpaceAsyncWithHttpInfo(key, options);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="options">(JSON object &lt;&lt;SpaceListOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSharedSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSharedSpaceResult>> GetSharedSpaceAsyncWithHttpInfo (string key, string options = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSharedSpace");

            var localVarPath = "/space/{key}/sharedspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSharedSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSharedSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSharedSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSpaceResult</returns>
        public GetSpaceResult GetSpace (string folderKey, string spaceId = null, string format = null)
        {
             ApiResponse<GetSpaceResult> localVarResponse = GetSpaceWithHttpInfo(folderKey, spaceId, format);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSpaceResult</returns>
        public ApiResponse< GetSpaceResult > GetSpaceWithHttpInfo (string folderKey, string spaceId = null, string format = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSpaceResult</returns>
        public async System.Threading.Tasks.Task<GetSpaceResult> GetSpaceAsync (string folderKey, string spaceId = null, string format = null)
        {
             ApiResponse<GetSpaceResult> localVarResponse = await GetSpaceAsyncWithHttpInfo(folderKey, spaceId, format);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpaceResult>> GetSpaceAsyncWithHttpInfo (string folderKey, string spaceId = null, string format = null)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>GetSpaceUserByEmailResult</returns>
        public GetSpaceUserByEmailResult GetSpaceUserByEmail (string key, List<string> email)
        {
             ApiResponse<GetSpaceUserByEmailResult> localVarResponse = GetSpaceUserByEmailWithHttpInfo(key, email);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>ApiResponse of GetSpaceUserByEmailResult</returns>
        public ApiResponse< GetSpaceUserByEmailResult > GetSpaceUserByEmailWithHttpInfo (string key, List<string> email)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSpaceUserByEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SpaceApi->GetSpaceUserByEmail");

            var localVarPath = "/folders/hotspots/participants/checkEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpaceUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpaceUserByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpaceUserByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpaceUserByEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>Task of GetSpaceUserByEmailResult</returns>
        public async System.Threading.Tasks.Task<GetSpaceUserByEmailResult> GetSpaceUserByEmailAsync (string key, List<string> email)
        {
             ApiResponse<GetSpaceUserByEmailResult> localVarResponse = await GetSpaceUserByEmailAsyncWithHttpInfo(key, email);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (GetSpaceUserByEmailResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpaceUserByEmailResult>> GetSpaceUserByEmailAsyncWithHttpInfo (string key, List<string> email)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSpaceUserByEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SpaceApi->GetSpaceUserByEmail");

            var localVarPath = "/folders/hotspots/participants/checkEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpaceUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpaceUserByEmailResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpaceUserByEmailResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpaceUserByEmailResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>GetSpacesResult</returns>
        public GetSpacesResult GetSpaces (string tag, List<string> keys = null, string format = null)
        {
             ApiResponse<GetSpacesResult> localVarResponse = GetSpacesWithHttpInfo(tag, keys, format);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of GetSpacesResult</returns>
        public ApiResponse< GetSpacesResult > GetSpacesWithHttpInfo (string tag, List<string> keys = null, string format = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling SpaceApi->GetSpaces");

            var localVarPath = "/folders/{tag}/spaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (keys != null) localVarQueryParams.Add("keys", Configuration.ApiClient.ParameterToString(keys)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of GetSpacesResult</returns>
        public async System.Threading.Tasks.Task<GetSpacesResult> GetSpacesAsync (string tag, List<string> keys = null, string format = null)
        {
             ApiResponse<GetSpacesResult> localVarResponse = await GetSpacesAsyncWithHttpInfo(tag, keys, format);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (GetSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpacesResult>> GetSpacesAsyncWithHttpInfo (string tag, List<string> keys = null, string format = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling SpaceApi->GetSpaces");

            var localVarPath = "/folders/{tag}/spaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (keys != null) localVarQueryParams.Add("keys", Configuration.ApiClient.ParameterToString(keys)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>GetSpacesForContentsResult</returns>
        public GetSpacesForContentsResult GetSpacesForContents (List<string> contentKeys, string spaceKey = null)
        {
             ApiResponse<GetSpacesForContentsResult> localVarResponse = GetSpacesForContentsWithHttpInfo(contentKeys, spaceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>ApiResponse of GetSpacesForContentsResult</returns>
        public ApiResponse< GetSpacesForContentsResult > GetSpacesForContentsWithHttpInfo (List<string> contentKeys, string spaceKey = null)
        {
            // verify the required parameter 'contentKeys' is set
            if (contentKeys == null)
                throw new ApiException(400, "Missing required parameter 'contentKeys' when calling SpaceApi->GetSpacesForContents");

            var localVarPath = "/folders/contents/ref";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spaceKey != null) localVarQueryParams.Add("spaceKey", Configuration.ApiClient.ParameterToString(spaceKey)); // query parameter
            if (contentKeys != null) localVarQueryParams.Add("contentKeys", Configuration.ApiClient.ParameterToString(contentKeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpacesForContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpacesForContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpacesForContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpacesForContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of GetSpacesForContentsResult</returns>
        public async System.Threading.Tasks.Task<GetSpacesForContentsResult> GetSpacesForContentsAsync (List<string> contentKeys, string spaceKey = null)
        {
             ApiResponse<GetSpacesForContentsResult> localVarResponse = await GetSpacesForContentsAsyncWithHttpInfo(contentKeys, spaceKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentKeys"></param>
        /// <param name="spaceKey"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSpacesForContentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpacesForContentsResult>> GetSpacesForContentsAsyncWithHttpInfo (List<string> contentKeys, string spaceKey = null)
        {
            // verify the required parameter 'contentKeys' is set
            if (contentKeys == null)
                throw new ApiException(400, "Missing required parameter 'contentKeys' when calling SpaceApi->GetSpacesForContents");

            var localVarPath = "/folders/contents/ref";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spaceKey != null) localVarQueryParams.Add("spaceKey", Configuration.ApiClient.ParameterToString(spaceKey)); // query parameter
            if (contentKeys != null) localVarQueryParams.Add("contentKeys", Configuration.ApiClient.ParameterToString(contentKeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpacesForContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpacesForContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpacesForContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpacesForContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>GetSubSpacesResult</returns>
        public GetSubSpacesResult GetSubSpaces (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null)
        {
             ApiResponse<GetSubSpacesResult> localVarResponse = GetSubSpacesWithHttpInfo(key, pg, spaceId, options, format, mode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>ApiResponse of GetSubSpacesResult</returns>
        public ApiResponse< GetSubSpacesResult > GetSubSpacesWithHttpInfo (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSubSpaces");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling SpaceApi->GetSubSpaces");

            var localVarPath = "/folders/{key}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of GetSubSpacesResult</returns>
        public async System.Threading.Tasks.Task<GetSubSpacesResult> GetSubSpacesAsync (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null)
        {
             ApiResponse<GetSubSpacesResult> localVarResponse = await GetSubSpacesAsyncWithHttpInfo(key, pg, spaceId, options, format, mode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="pg">(JSON object &lt;&lt;PaginationRecord&gt;&gt;)</param>
        /// <param name="spaceId"> (optional)</param>
        /// <param name="options">(JSON object &lt;&lt;StreamOptionsRecord&gt;&gt;) (optional)</param>
        /// <param name="format">(JSON object &lt;&lt;FormatRecord&gt;&gt;) (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSubSpacesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubSpacesResult>> GetSubSpacesAsyncWithHttpInfo (string key, string pg, string spaceId = null, string options = null, string format = null, string mode = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetSubSpaces");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling SpaceApi->GetSubSpaces");

            var localVarPath = "/folders/{key}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter
            if (pg != null) localVarQueryParams.Add("pg", Configuration.ApiClient.ParameterToString(pg)); // query parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubSpaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubSpacesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubSpacesResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubSpacesResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>GetUserRolesInSpaceResult</returns>
        public GetUserRolesInSpaceResult GetUserRolesInSpace (string key, List<string> userKeys = null)
        {
             ApiResponse<GetUserRolesInSpaceResult> localVarResponse = GetUserRolesInSpaceWithHttpInfo(key, userKeys);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>ApiResponse of GetUserRolesInSpaceResult</returns>
        public ApiResponse< GetUserRolesInSpaceResult > GetUserRolesInSpaceWithHttpInfo (string key, List<string> userKeys = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetUserRolesInSpace");

            var localVarPath = "/folders/{key}/checkUserKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (userKeys != null) localVarQueryParams.Add("userKeys", Configuration.ApiClient.ParameterToString(userKeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesInSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserRolesInSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserRolesInSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserRolesInSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>Task of GetUserRolesInSpaceResult</returns>
        public async System.Threading.Tasks.Task<GetUserRolesInSpaceResult> GetUserRolesInSpaceAsync (string key, List<string> userKeys = null)
        {
             ApiResponse<GetUserRolesInSpaceResult> localVarResponse = await GetUserRolesInSpaceAsyncWithHttpInfo(key, userKeys);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="userKeys"> (optional)</param>
        /// <returns>Task of ApiResponse (GetUserRolesInSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserRolesInSpaceResult>> GetUserRolesInSpaceAsyncWithHttpInfo (string key, List<string> userKeys = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->GetUserRolesInSpace");

            var localVarPath = "/folders/{key}/checkUserKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (userKeys != null) localVarQueryParams.Add("userKeys", Configuration.ApiClient.ParameterToString(userKeys)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesInSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserRolesInSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserRolesInSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserRolesInSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>GetWallResult</returns>
        public GetWallResult GetWall (string spaceId, string folderKey)
        {
             ApiResponse<GetWallResult> localVarResponse = GetWallWithHttpInfo(spaceId, folderKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>ApiResponse of GetWallResult</returns>
        public ApiResponse< GetWallResult > GetWallWithHttpInfo (string spaceId, string folderKey)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new ApiException(400, "Missing required parameter 'spaceId' when calling SpaceApi->GetWall");
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetWall");

            var localVarPath = "/folders/{folderKey}/wall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWallResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWallResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWallResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>Task of GetWallResult</returns>
        public async System.Threading.Tasks.Task<GetWallResult> GetWallAsync (string spaceId, string folderKey)
        {
             ApiResponse<GetWallResult> localVarResponse = await GetWallAsyncWithHttpInfo(spaceId, folderKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderKey"></param>
        /// <returns>Task of ApiResponse (GetWallResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWallResult>> GetWallAsyncWithHttpInfo (string spaceId, string folderKey)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new ApiException(400, "Missing required parameter 'spaceId' when calling SpaceApi->GetWall");
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->GetWall");

            var localVarPath = "/folders/{folderKey}/wall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (spaceId != null) localVarQueryParams.Add("spaceId", Configuration.ApiClient.ParameterToString(spaceId)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWallResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWallResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWallResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>LeaveSpaceResult</returns>
        public LeaveSpaceResult LeaveSpace (string key)
        {
             ApiResponse<LeaveSpaceResult> localVarResponse = LeaveSpaceWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of LeaveSpaceResult</returns>
        public ApiResponse< LeaveSpaceResult > LeaveSpaceWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->LeaveSpace");

            var localVarPath = "/folders/{key}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaveSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LeaveSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaveSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of LeaveSpaceResult</returns>
        public async System.Threading.Tasks.Task<LeaveSpaceResult> LeaveSpaceAsync (string key)
        {
             ApiResponse<LeaveSpaceResult> localVarResponse = await LeaveSpaceAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (LeaveSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LeaveSpaceResult>> LeaveSpaceAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->LeaveSpace");

            var localVarPath = "/folders/{key}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaveSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LeaveSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaveSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ListAssociationItemResult</returns>
        public ListAssociationItemResult ListAssociationItem (string key, string association, string options = null)
        {
             ApiResponse<ListAssociationItemResult> localVarResponse = ListAssociationItemWithHttpInfo(key, association, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>ApiResponse of ListAssociationItemResult</returns>
        public ApiResponse< ListAssociationItemResult > ListAssociationItemWithHttpInfo (string key, string association, string options = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->ListAssociationItem");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling SpaceApi->ListAssociationItem");

            var localVarPath = "/association/{key}/{association}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (association != null) localVarPathParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssociationItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssociationItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAssociationItemResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssociationItemResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ListAssociationItemResult</returns>
        public async System.Threading.Tasks.Task<ListAssociationItemResult> ListAssociationItemAsync (string key, string association, string options = null)
        {
             ApiResponse<ListAssociationItemResult> localVarResponse = await ListAssociationItemAsyncWithHttpInfo(key, association, options);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="association"></param>
        /// <param name="options">(JSON object &lt;&lt;QueryOptionsRecord&gt;&gt;) (optional)</param>
        /// <returns>Task of ApiResponse (ListAssociationItemResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAssociationItemResult>> ListAssociationItemAsyncWithHttpInfo (string key, string association, string options = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->ListAssociationItem");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling SpaceApi->ListAssociationItem");

            var localVarPath = "/association/{key}/{association}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (association != null) localVarPathParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // path parameter
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssociationItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssociationItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAssociationItemResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssociationItemResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>MarkContentsResult</returns>
        public MarkContentsResult MarkContents (string markType, MarkContentsInput input)
        {
             ApiResponse<MarkContentsResult> localVarResponse = MarkContentsWithHttpInfo(markType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>ApiResponse of MarkContentsResult</returns>
        public ApiResponse< MarkContentsResult > MarkContentsWithHttpInfo (string markType, MarkContentsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->MarkContents");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MarkContents");

            var localVarPath = "/folders/mark/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>Task of MarkContentsResult</returns>
        public async System.Threading.Tasks.Task<MarkContentsResult> MarkContentsAsync (string markType, MarkContentsInput input)
        {
             ApiResponse<MarkContentsResult> localVarResponse = await MarkContentsAsyncWithHttpInfo(markType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">MarkContents Input</param>
        /// <returns>Task of ApiResponse (MarkContentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkContentsResult>> MarkContentsAsyncWithHttpInfo (string markType, MarkContentsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->MarkContents");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MarkContents");

            var localVarPath = "/folders/mark/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarkContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>MoveObjectsResult</returns>
        public MoveObjectsResult MoveObjects (string fromFolderKey, MoveObjectsInput input)
        {
             ApiResponse<MoveObjectsResult> localVarResponse = MoveObjectsWithHttpInfo(fromFolderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>ApiResponse of MoveObjectsResult</returns>
        public ApiResponse< MoveObjectsResult > MoveObjectsWithHttpInfo (string fromFolderKey, MoveObjectsInput input)
        {
            // verify the required parameter 'fromFolderKey' is set
            if (fromFolderKey == null)
                throw new ApiException(400, "Missing required parameter 'fromFolderKey' when calling SpaceApi->MoveObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MoveObjects");

            var localVarPath = "/folders/{fromFolderKey}/contents/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fromFolderKey != null) localVarPathParams.Add("fromFolderKey", Configuration.ApiClient.ParameterToString(fromFolderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MoveObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MoveObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MoveObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>Task of MoveObjectsResult</returns>
        public async System.Threading.Tasks.Task<MoveObjectsResult> MoveObjectsAsync (string fromFolderKey, MoveObjectsInput input)
        {
             ApiResponse<MoveObjectsResult> localVarResponse = await MoveObjectsAsyncWithHttpInfo(fromFolderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveObjects Input</param>
        /// <returns>Task of ApiResponse (MoveObjectsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MoveObjectsResult>> MoveObjectsAsyncWithHttpInfo (string fromFolderKey, MoveObjectsInput input)
        {
            // verify the required parameter 'fromFolderKey' is set
            if (fromFolderKey == null)
                throw new ApiException(400, "Missing required parameter 'fromFolderKey' when calling SpaceApi->MoveObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MoveObjects");

            var localVarPath = "/folders/{fromFolderKey}/contents/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fromFolderKey != null) localVarPathParams.Add("fromFolderKey", Configuration.ApiClient.ParameterToString(fromFolderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MoveObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MoveObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MoveObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>MoveSpaceResult</returns>
        public MoveSpaceResult MoveSpace (string fromFolderKey, MoveSpaceInput input)
        {
             ApiResponse<MoveSpaceResult> localVarResponse = MoveSpaceWithHttpInfo(fromFolderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>ApiResponse of MoveSpaceResult</returns>
        public ApiResponse< MoveSpaceResult > MoveSpaceWithHttpInfo (string fromFolderKey, MoveSpaceInput input)
        {
            // verify the required parameter 'fromFolderKey' is set
            if (fromFolderKey == null)
                throw new ApiException(400, "Missing required parameter 'fromFolderKey' when calling SpaceApi->MoveSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MoveSpace");

            var localVarPath = "/folders/{fromFolderKey}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fromFolderKey != null) localVarPathParams.Add("fromFolderKey", Configuration.ApiClient.ParameterToString(fromFolderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MoveSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MoveSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MoveSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>Task of MoveSpaceResult</returns>
        public async System.Threading.Tasks.Task<MoveSpaceResult> MoveSpaceAsync (string fromFolderKey, MoveSpaceInput input)
        {
             ApiResponse<MoveSpaceResult> localVarResponse = await MoveSpaceAsyncWithHttpInfo(fromFolderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromFolderKey"></param>
        /// <param name="input">MoveSpace Input</param>
        /// <returns>Task of ApiResponse (MoveSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MoveSpaceResult>> MoveSpaceAsyncWithHttpInfo (string fromFolderKey, MoveSpaceInput input)
        {
            // verify the required parameter 'fromFolderKey' is set
            if (fromFolderKey == null)
                throw new ApiException(400, "Missing required parameter 'fromFolderKey' when calling SpaceApi->MoveSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->MoveSpace");

            var localVarPath = "/folders/{fromFolderKey}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fromFolderKey != null) localVarPathParams.Add("fromFolderKey", Configuration.ApiClient.ParameterToString(fromFolderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MoveSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MoveSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MoveSpaceResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>MultishareResult</returns>
        public MultishareResult Multishare (MultishareInput input)
        {
             ApiResponse<MultishareResult> localVarResponse = MultishareWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>ApiResponse of MultishareResult</returns>
        public ApiResponse< MultishareResult > MultishareWithHttpInfo (MultishareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Multishare");

            var localVarPath = "/space/multishare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multishare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultishareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultishareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultishareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>Task of MultishareResult</returns>
        public async System.Threading.Tasks.Task<MultishareResult> MultishareAsync (MultishareInput input)
        {
             ApiResponse<MultishareResult> localVarResponse = await MultishareAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Multishare Input</param>
        /// <returns>Task of ApiResponse (MultishareResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultishareResult>> MultishareAsyncWithHttpInfo (MultishareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Multishare");

            var localVarPath = "/space/multishare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multishare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultishareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultishareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultishareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>RemoveAllMarksResult</returns>
        public RemoveAllMarksResult RemoveAllMarks (string markType, RemoveAllMarksInput input)
        {
             ApiResponse<RemoveAllMarksResult> localVarResponse = RemoveAllMarksWithHttpInfo(markType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>ApiResponse of RemoveAllMarksResult</returns>
        public ApiResponse< RemoveAllMarksResult > RemoveAllMarksWithHttpInfo (string markType, RemoveAllMarksInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->RemoveAllMarks");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveAllMarks");

            var localVarPath = "/folders/removeAll/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveAllMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveAllMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveAllMarksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>Task of RemoveAllMarksResult</returns>
        public async System.Threading.Tasks.Task<RemoveAllMarksResult> RemoveAllMarksAsync (string markType, RemoveAllMarksInput input)
        {
             ApiResponse<RemoveAllMarksResult> localVarResponse = await RemoveAllMarksAsyncWithHttpInfo(markType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">RemoveAllMarks Input</param>
        /// <returns>Task of ApiResponse (RemoveAllMarksResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveAllMarksResult>> RemoveAllMarksAsyncWithHttpInfo (string markType, RemoveAllMarksInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->RemoveAllMarks");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveAllMarks");

            var localVarPath = "/folders/removeAll/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveAllMarksResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveAllMarksResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveAllMarksResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>RemoveObjectsResult</returns>
        public RemoveObjectsResult RemoveObjects (string folderKey, RemoveObjectsInput input)
        {
             ApiResponse<RemoveObjectsResult> localVarResponse = RemoveObjectsWithHttpInfo(folderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>ApiResponse of RemoveObjectsResult</returns>
        public ApiResponse< RemoveObjectsResult > RemoveObjectsWithHttpInfo (string folderKey, RemoveObjectsInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->RemoveObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveObjects");

            var localVarPath = "/folders/{folderKey}/contents/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>Task of RemoveObjectsResult</returns>
        public async System.Threading.Tasks.Task<RemoveObjectsResult> RemoveObjectsAsync (string folderKey, RemoveObjectsInput input)
        {
             ApiResponse<RemoveObjectsResult> localVarResponse = await RemoveObjectsAsyncWithHttpInfo(folderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">RemoveObjects Input</param>
        /// <returns>Task of ApiResponse (RemoveObjectsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveObjectsResult>> RemoveObjectsAsyncWithHttpInfo (string folderKey, RemoveObjectsInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->RemoveObjects");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveObjects");

            var localVarPath = "/folders/{folderKey}/contents/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveObjectsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveObjectsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveObjectsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>RemoveSpaceParticipantsResult</returns>
        public RemoveSpaceParticipantsResult RemoveSpaceParticipants (string key, RemoveSpaceParticipantsInput input)
        {
             ApiResponse<RemoveSpaceParticipantsResult> localVarResponse = RemoveSpaceParticipantsWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>ApiResponse of RemoveSpaceParticipantsResult</returns>
        public ApiResponse< RemoveSpaceParticipantsResult > RemoveSpaceParticipantsWithHttpInfo (string key, RemoveSpaceParticipantsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->RemoveSpaceParticipants");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveSpaceParticipants");

            var localVarPath = "/folders/{key}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveSpaceParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveSpaceParticipantsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveSpaceParticipantsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveSpaceParticipantsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>Task of RemoveSpaceParticipantsResult</returns>
        public async System.Threading.Tasks.Task<RemoveSpaceParticipantsResult> RemoveSpaceParticipantsAsync (string key, RemoveSpaceParticipantsInput input)
        {
             ApiResponse<RemoveSpaceParticipantsResult> localVarResponse = await RemoveSpaceParticipantsAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">RemoveSpaceParticipants Input</param>
        /// <returns>Task of ApiResponse (RemoveSpaceParticipantsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveSpaceParticipantsResult>> RemoveSpaceParticipantsAsyncWithHttpInfo (string key, RemoveSpaceParticipantsInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->RemoveSpaceParticipants");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->RemoveSpaceParticipants");

            var localVarPath = "/folders/{key}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveSpaceParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveSpaceParticipantsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveSpaceParticipantsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveSpaceParticipantsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>ShareResult</returns>
        public ShareResult Share (ShareInput input)
        {
             ApiResponse<ShareResult> localVarResponse = ShareWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>ApiResponse of ShareResult</returns>
        public ApiResponse< ShareResult > ShareWithHttpInfo (ShareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Share");

            var localVarPath = "/space/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Share", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>Task of ShareResult</returns>
        public async System.Threading.Tasks.Task<ShareResult> ShareAsync (ShareInput input)
        {
             ApiResponse<ShareResult> localVarResponse = await ShareAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Share Input</param>
        /// <returns>Task of ApiResponse (ShareResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareResult>> ShareAsyncWithHttpInfo (ShareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Share");

            var localVarPath = "/space/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Share", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>ShareObjectResult</returns>
        public ShareObjectResult ShareObject (string key, ShareObjectInput input)
        {
             ApiResponse<ShareObjectResult> localVarResponse = ShareObjectWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>ApiResponse of ShareObjectResult</returns>
        public ApiResponse< ShareObjectResult > ShareObjectWithHttpInfo (string key, ShareObjectInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->ShareObject");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->ShareObject");

            var localVarPath = "/folders/{key}/sharetouserspace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShareObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareObjectResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>Task of ShareObjectResult</returns>
        public async System.Threading.Tasks.Task<ShareObjectResult> ShareObjectAsync (string key, ShareObjectInput input)
        {
             ApiResponse<ShareObjectResult> localVarResponse = await ShareObjectAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">ShareObject Input</param>
        /// <returns>Task of ApiResponse (ShareObjectResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareObjectResult>> ShareObjectAsyncWithHttpInfo (string key, ShareObjectInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->ShareObject");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->ShareObject");

            var localVarPath = "/folders/{key}/sharetouserspace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShareObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareObjectResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>UnmarkContentsResult</returns>
        public UnmarkContentsResult UnmarkContents (string markType, UnmarkContentsInput input)
        {
             ApiResponse<UnmarkContentsResult> localVarResponse = UnmarkContentsWithHttpInfo(markType, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>ApiResponse of UnmarkContentsResult</returns>
        public ApiResponse< UnmarkContentsResult > UnmarkContentsWithHttpInfo (string markType, UnmarkContentsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->UnmarkContents");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UnmarkContents");

            var localVarPath = "/folders/unmark/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>Task of UnmarkContentsResult</returns>
        public async System.Threading.Tasks.Task<UnmarkContentsResult> UnmarkContentsAsync (string markType, UnmarkContentsInput input)
        {
             ApiResponse<UnmarkContentsResult> localVarResponse = await UnmarkContentsAsyncWithHttpInfo(markType, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markType"></param>
        /// <param name="input">UnmarkContents Input</param>
        /// <returns>Task of ApiResponse (UnmarkContentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnmarkContentsResult>> UnmarkContentsAsyncWithHttpInfo (string markType, UnmarkContentsInput input)
        {
            // verify the required parameter 'markType' is set
            if (markType == null)
                throw new ApiException(400, "Missing required parameter 'markType' when calling SpaceApi->UnmarkContents");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UnmarkContents");

            var localVarPath = "/folders/unmark/{markType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (markType != null) localVarPathParams.Add("markType", Configuration.ApiClient.ParameterToString(markType)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnmarkContentsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnmarkContentsResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnmarkContentsResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>UnshareResult</returns>
        public UnshareResult Unshare (UnshareInput input)
        {
             ApiResponse<UnshareResult> localVarResponse = UnshareWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>ApiResponse of UnshareResult</returns>
        public ApiResponse< UnshareResult > UnshareWithHttpInfo (UnshareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Unshare");

            var localVarPath = "/space/unshare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unshare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnshareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnshareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnshareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>Task of UnshareResult</returns>
        public async System.Threading.Tasks.Task<UnshareResult> UnshareAsync (UnshareInput input)
        {
             ApiResponse<UnshareResult> localVarResponse = await UnshareAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Unshare Input</param>
        /// <returns>Task of ApiResponse (UnshareResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnshareResult>> UnshareAsyncWithHttpInfo (UnshareInput input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->Unshare");

            var localVarPath = "/space/unshare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unshare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnshareResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnshareResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnshareResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>UnshareObjectResult</returns>
        public UnshareObjectResult UnshareObject (string key, UnshareObjectInput input)
        {
             ApiResponse<UnshareObjectResult> localVarResponse = UnshareObjectWithHttpInfo(key, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>ApiResponse of UnshareObjectResult</returns>
        public ApiResponse< UnshareObjectResult > UnshareObjectWithHttpInfo (string key, UnshareObjectInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->UnshareObject");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UnshareObject");

            var localVarPath = "/folders/{key}/unshareitem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnshareObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnshareObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnshareObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnshareObjectResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>Task of UnshareObjectResult</returns>
        public async System.Threading.Tasks.Task<UnshareObjectResult> UnshareObjectAsync (string key, UnshareObjectInput input)
        {
             ApiResponse<UnshareObjectResult> localVarResponse = await UnshareObjectAsyncWithHttpInfo(key, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="input">UnshareObject Input</param>
        /// <returns>Task of ApiResponse (UnshareObjectResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnshareObjectResult>> UnshareObjectAsyncWithHttpInfo (string key, UnshareObjectInput input)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SpaceApi->UnshareObject");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UnshareObject");

            var localVarPath = "/folders/{key}/unshareitem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnshareObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnshareObjectResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnshareObjectResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnshareObjectResult)));
            
        }

        /// <summary>
        /// Update name and desc of folder 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>UpdateSpaceResult</returns>
        public UpdateSpaceResult UpdateSpace (string folderKey, UpdateSpaceInput input)
        {
             ApiResponse<UpdateSpaceResult> localVarResponse = UpdateSpaceWithHttpInfo(folderKey, input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update name and desc of folder 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>ApiResponse of UpdateSpaceResult</returns>
        public ApiResponse< UpdateSpaceResult > UpdateSpaceWithHttpInfo (string folderKey, UpdateSpaceInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->UpdateSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UpdateSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateSpaceResult)));
            
        }

        /// <summary>
        /// Update name and desc of folder 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>Task of UpdateSpaceResult</returns>
        public async System.Threading.Tasks.Task<UpdateSpaceResult> UpdateSpaceAsync (string folderKey, UpdateSpaceInput input)
        {
             ApiResponse<UpdateSpaceResult> localVarResponse = await UpdateSpaceAsyncWithHttpInfo(folderKey, input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update name and desc of folder 
        /// </summary>
        /// <exception cref="VmosoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderKey"></param>
        /// <param name="input">UpdateSpace Input</param>
        /// <returns>Task of ApiResponse (UpdateSpaceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateSpaceResult>> UpdateSpaceAsyncWithHttpInfo (string folderKey, UpdateSpaceInput input)
        {
            // verify the required parameter 'folderKey' is set
            if (folderKey == null)
                throw new ApiException(400, "Missing required parameter 'folderKey' when calling SpaceApi->UpdateSpace");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpaceApi->UpdateSpace");

            var localVarPath = "/folders/{folderKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (folderKey != null) localVarPathParams.Add("folderKey", Configuration.ApiClient.ParameterToString(folderKey)); // path parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (vmoso_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-CV-Authorization")))
            {
                localVarHeaderParams["X-CV-Authorization"] = Configuration.GetApiKeyWithPrefix("X-CV-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSpace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateSpaceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateSpaceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateSpaceResult)));
            
        }

    }
}
